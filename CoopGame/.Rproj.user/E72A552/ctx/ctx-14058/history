linUnCoef(c(1:7))
numberOfRows
nrow(indices)
length(indices)
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
length(indices)
linUnCoef(c(1:7))
numberOfRows
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(1:7))
linUnCoef(c(1:7))
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(1:7))
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(1:7))
numberOfRows
linUnCoef(c(1:7))
bm[bmIndices,"cVal"]
bm[bmIndices,"cVal"]*1
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
bmIndices
bm
i
(n)
indices
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
bm[indices,,drop=FALSE]
bm[indices,,drop=FALSE]
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
View(bm)
linUnCoef(c(0,0,0,60,60,60,72))
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
bm
linUnCoef(c(0,0,0,60,60,60,72))
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
length(which(indices&1))
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
View(linUnCoef)
View(linUnCoef)
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
indices
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/20161202_Probleme_bzgl_Unanimity_Game.R')
linUnCoef(c(0,0,0,60,60,60,72))
linUnCoef(c(0,0,0,60,60,60,72))
lapply(cardOfKs,function(x){(-1)^(cardOfT-x)})
bm[bmIndices,"cVal"]
(bm[bmIndices,"cVal"]*signs)
sum(bm[bmIndices,"cVal"]*signs);
bm[bmIndices,"cVal"]
bm
bmIndices
bm
bm[bmIndices,]
linUnCoef(c(0,0,0,60,48,60,72))
linUnCoef(c(0,0,0,60,48,60,72))
linUnCoef(c(0,0,0,60,48,60,72))
bm
bm[bmIndices,"cVal"]
sum(bm[bmIndices,"cVal"]*signs)
bm[bmIndices,"cVal"]
bm[bmIndices,]
bm[bmIndices,]
bm
linUnCoef(c(0,0,0,60,48,30,72))
linUnCoef(c(0,0,0,60,48,30,72))
setwd("../Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/")
library(CoopGame)
nb<-NucleolusBase(1:7)
nb
library(CoopGame)
checkAbort(nb,2)
nb<-NucleolusBase()
nb<-NucleolusBase(1:7)
nb
checkAbort(nb,3)
library(CoopGame)
checkAbort(nb,3)
library(CoopGame)
checkAbort(nb,4)
nb
getMatrixLastCol(nb)
getMatrixLastCol(nb@LPCoopGameUtils)
getLPObjVal(nb)
getLPObjVal(nb@LPCoopGameUtils)
library(glpkAPI)
??Feasible
??feasible
??feasib
??feas
?GLPK_FEAS
??GLPK_FEAS
?GLP_FEAS
library(CoopGame)
nb=NucleolusBase(1:7)
nb
solveSimplexLP(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb
getRowsDualGLPK(nb@LPCoopGameUtils)
nb@LPCoopGameUtils
getRowsDualGLPK(nb@LPCoopGameUtils)
getRowDualGLPK(nb@LPCoopGameUtils)
library(CoopGame)
getRowsDualGLPK(nb@LPCoopGameUtils@LP)
nb=NucleolusBase(1:7)
updateNucleolusBase(nb)
library(CoopGame)
nb
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb=NucleolusBase(1:7)
solveSimplexLP(nb@LPCoopGameUtils)
nb=NucleolusBase(1:7)
updateNucleolusBase(nb)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateLPMatrix(nb)
updateLPRows(nb)
getMatrix(nb@LPCoopGameUtils)
getLPDualSolutionPos(nb)
pos=getLPDualSolutionPos(nb)
getMatrix(nb@LPCoopGameUtils)[pos,,drop=FALSE]
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
updateNucleolusBase(nb)
nb
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
updateNucleolusBase(nb)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb
updateLPMatrix(nb)
nb
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateLPMatrix()
updateLPMatrix(nb)
updateLPRows(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
.Object<-nb
primal=getLPPrimalSolution(.Object@LPCoopGameUtils)
primal
getColsPrimGLPK(.Object@LPCoopGameUtils@LP)
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
.Object<-nb
primal=getLPPrimalSolution(.Object@LPCoopGameUtils)
primal
n=length(primal)-1
n
primal=primal[-n]
primal
primal=getLPPrimalSolution(.Object@LPCoopGameUtils)
primal=primal[-length(primal)]
primal
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb
library(CoopGame)
nb=NucleolusBase(1:7)
updateNucleolusBase(nb)
nb=NucleolusBase(1:7)
updateLPCoopGameUtils(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb
solveSimplexLP(nb@LPCoopGameUtils)
nb
updateNucleolusBase(nb)
nb
solveSimplexLP(nb@LPCoopGameUtils)
updateNucleolusBase(nb)
nb
nb=NucleolusBase(1:7)
library(CoopGame)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
nb=NucleolusBase(1:7)
.Object<-nb
oldObjValue=NULL
library(CoopGame)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
library(CoopGame)
library(CoopGame)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
nb
library(CoopGame)
nb=NucleolusBase(1:7)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
nb
calculateNucleolus(nb)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
library(CoopGame)
nucleolus(1:7)
library(CoopGame)
nucleolus(1:7)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
library(CoopGame)
nb=NucleolusBase(1:7)
calculateNucleolus(nb)
calculateNucleolus(nb)
e=3
e
sol=calculateNucleolus(nb)
sol
library(CoopGame)
nucleolus(c(1, 1, 1, 2, 3, 4, 5))
n
n
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
calculateNucleolus(nb)
A
getwd()
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/nucleolus2.R')
nucleolus2(A)
library(CoopGame)
A
nb=NucleolusBase(A)
calculateNucleolus(nb)
library(CoopGame)
setwd("../own_tests/")
nb=NucleolusBase(A)
calculateNucleolus(nb)
library(CoopGame)
nb=NucleolusBase(A)
calculateNucleolus(nb)
getwd()
setwd("../own_tests/debug/")
library(CoopGame)
?print
source('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/debug/TEMP.R')
library(CoopGame)
calculateNucleolus(A)
nb
calculateNucleolus(nb)
write(print("hi"),file="test.txt")
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/debug/TEMP.R')
calculateNucleolus(nb)
library(glpkAPI)
calculateNucleolus(nb)
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/debug/TEMP.R')
calculateNucleolus(nb)
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/debug/TEMP.R')
calculateNucleolus(nb)
nb=NucleolusBase(A)
A
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
calculateNucleolus(nb)
library(CoopGame)
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/debug/TEMP.R')
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
calculateNucleolus(A)
calculateNucleolus(nb)
calculateNucleolus(nb)
nb=NucleolusBase(A)
calculateNucleolus(nb)
updateLPMatrix(nb)
updateLPMatrix(.Object)
updateLPRows(.Object)
.Object
A
library(CoopGame)
rm(list=ls())
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
calculateNucleolus(nb)
debugSource('C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/own_tests/debug/TEMP.R')
calculateNucleolus(nb)
getwd()
calculateNucleolus(nb)
write(print(d),"test.txt")
write(print("dfsdf"),"test.txt")
calculateNucleolus(nb)
as.data.frame()
as.data.frame(.Object)
dcBuildOnto
nb=new("NucleolusBase")
nb=new("NucleolusBase")
nb
A=c(1, 1, 1, 2, 3, 4, 5)
nucleolus(A)
rlb
rub
rtype
library(testthat)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=new("NucleolusBase")
initLPRows(nb)
nb=new("NucleolusBase",A)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=new("NucleolusBase",A=A)
initLPRows(nb)
rlb=c(1, 1, 1, 2, 3, 4, 5)
rub=c(Inf, Inf, Inf, Inf, Inf, Inf,5)
rtype=c(2, 2, 2, 2, 2, 2, 5)
expect_equal(getRlb(nb@LPCoopGameUtils),rlb)
expect_equal(getRub(nb@LPCoopGameUtils),rub)
expect_equal(getRtype(nb@LPCoopGameUtils),rtype)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=new("NucleolusBase",A=A)
initLPMatrix(nb)
coeffMat=createBitMatrix(n=3,A)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
getMatrix(nb@LPCoopGameUtils)
excess=c(rep(1,6),0)
nb=new("NucleolusBase",A=A)
initLPMatrix(nb)
coeffMat=createBitMatrix(n=3,A)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
excess=c(rep(1,6),0)
coeffMat=createBitMatrix(n=3,excess)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=new("NucleolusBase",A=A)
initLPMatrix(nb)
excess=c(rep(1,6),0)
coeffMat=createBitMatrix(n=3,excess)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
nucleolus(A)
clb
cub
ctype
nb=new("NucleolusBase",A=A)
initLPBndsObjCoefs(nb)
rep(Inf, n + 1)
rep(Inf, n + 1)
rep(Inf, n + 1)
rep(Inf, n + 1)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=new("NucleolusBase",A=A)
initLPBndsObjCoefs(nb)
clb=c(0,0,0,-Inf)
cub=c(Inf, Inf, Inf, Inf)
ctype=c(2, 2, 2, 1)
expect_equal(getClb(nb@LPCoopGameUtils),clb)
expect_equal(getCub(nb@LPCoopGameUtils),cub)
library(CoopGame)
expect_equal(getClb(nb@LPCoopGameUtils),clb)
expect_equal(getCub(nb@LPCoopGameUtils),cub)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=new("NucleolusBase",A=A)
initLPBndsObjCoefs(nb)
clb=c(0,0,0,-Inf)
cub=c(Inf, Inf, Inf, Inf)
ctype=c(2, 2, 2, 1)
expect_equal(getClb(nb@LPCoopGameUtils),clb)
expect_equal(getCub(nb@LPCoopGameUtils),cub)
expect_equal(getCtype(nb@LPCoopGameUtils),ctype)
expect_equal(getCtype(nb@LPCoopGameUtils),ctype)
library(CoopGame)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
clb=c(0,0,0,-Inf)
cub=c(Inf, Inf, Inf, Inf)
ctype=c(2, 2, 2, 1)
rlb=c(1, 1, 1, 2, 3, 4, 5)
rub=c(Inf, Inf, Inf, Inf, Inf, Inf,5)
rtype=c(2, 2, 2, 2, 2, 2, 5)
excess=c(rep(1,6),0)
coeffMat=createBitMatrix(n=3,excess)
expect_equal(getClb(nb@LPCoopGameUtils),clb)
expect_equal(getCub(nb@LPCoopGameUtils),cub)
expect_equal(getCtype(nb@LPCoopGameUtils),ctype)
expect_equal(getRlb(nb@LPCoopGameUtils),rlb)
expect_equal(getRub(nb@LPCoopGameUtils),rub)
expect_equal(getRtype(nb@LPCoopGameUtils),rtype)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
solveSimplexLP(nb@LPCoopGameUtils)
expect_equal(getLPDualSolutionPos(nb@LPCoopGameUtils),c(1,6))
expect_equal(getLPDualSolutionPos(nb),c(1,6))
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
solveSimplexLP(nb@LPCoopGameUtils)
updateLPRows(nb)
nucleolus(c(1, 1, 1, 2, 3, 4, 5))
nucleolus(c(1, 1, 1, 2, 3, 4, 5))
rlb
rub
rtype
coeffMat
excess=rep(1,7)
excess[1,6,7]=0
excess[c(1,6,7)]=0
excess
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
updateLPRows
updateLPRows
nb=NucleolusBase(A)
updateLPRows
solveSimplexLP(nb@LPCoopGameUtils)
updateLPRows(nb)
excess=rep(1,7)
excess[c(1,6,7)]=0
coeffMat=createBitMatrix(n=3,excess)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
getMatrix(nb@LPCoopGameUtils)
A=c(1, 1, 1, 2, 3, 4, 5)
nb=NucleolusBase(A)
nb=NucleolusBase(A)
solveSimplexLP(nb@LPCoopGameUtils)
updateLPRows(nb)
excess=rep(1,7)
excess[c(1,6,7)]=0
coeffMat=createBitMatrix(n=3,excess)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
updateLPMatrix(nb)
expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
nucleolus(c(1, 1, 1, 2, 3, 4, 5))
nucleolus(c(1, 1, 1, 2, 3, 4, 5))
