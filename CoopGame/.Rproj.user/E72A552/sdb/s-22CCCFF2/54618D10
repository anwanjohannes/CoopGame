{
    "collab_server" : "",
    "contents" : "#' @name getUnanimityCoefficients\n#' @title getUnanimityCoefficients\n#' @description getUnanimityCoefficients\n#' @aliases getUnanimityCoefficients\n#' @export getUnanimityCoefficients\n#' @template author/JA\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 153\n#' @template cites/GILLES_2015\n#' @templateVar GILLES_2015_P p. 15 f.\n#' @template cites/SHAPLEY_1953\n#' @templateVar SHAPLEY_1953_P pp. 307--317\n#' @template param/A \n#' @return numeric vector containing the unanimity coefficients\n#' @examples \n#' library(CoopGame)\n#' getUnanimityCoefficients(c(0,0,0,60,48,30,72))\n#' #[1]   0   0   0  60  48  30 -66\n\ngetUnanimityCoefficients=function(A){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_getUnanimityCoefficients(paramCheckResult, A)\n\n  n=getNumberOfPlayers(A)\n  N=length(A);\n  bm=createBitMatrix(n,A);\n  unanimityCoefficients=c();\n\n  for(i in 1:N){\n    bmIndices=getCorrespondingRows(bm,n,index=i);\n    signs=getSigns(bm,n, bmIndices);\n    #this line realises formula in Harald Wiese \"Kooperative Spieltheorie\" p.124\n    lambda_T_v=sum(bm[bmIndices,\"cVal\"]*signs);\n    unanimityCoefficients=c(unanimityCoefficients,lambda_T_v);\n  }\n  return(unanimityCoefficients);\n\n}\n\ninitialParamCheck_getUnanimityCoefficients=function(paramCheckResult,A){\n  stopOnInvalidGameVectorA(paramCheckResult, A)\n}\n\n#Function figures out only signs neccessary for calculating unanimity coefficients\n#with formula provided in Harald Wiese \"Kooperative Spieltheorie\" p.124 subject to the referenced rows of bit matrix\ngetSigns<-function(bm,n, indices){\n  \n  cardOfKs=c(apply(bm[indices,,drop=FALSE],1,function(x){sum(x[1:n])}));\n  #Check how many entries in vector indices are true corresponds to length of considered entries\n  numberOfRows=length(which(indices&1));\n  cardOfT=cardOfKs[numberOfRows];\n  signs=unlist(lapply(cardOfKs,function(x){(-1)^(cardOfT-x)}));\n  return(signs);\n}\n\n#Function figures out which rows of bit matrix are neccessary for calculating unanimity coefficients\n#with formula provided in Harald Wiese \"Kooperative Spieltheorie\" p.124 for a certain coalition T (referenced by parameters index and n)\ngetCorrespondingRows<-function(bm,n,index){\n  N=2^n-1;\n  #Get all players who are not contained in referenced row of bit matrix\n  playersNotInvolved=!as.vector(bm[index,1:n]);\n  #pattern matrix for boolean arithmetic\n  pm=matrix(playersNotInvolved,nrow=index,ncol=n,byrow = TRUE);\n  #AND binary and pattern matrix\n  resolvedPlayerMatrix=bm[1:index,1:n]&pm\n  #Get indices where the special players are not involved\n  indices=!apply(resolvedPlayerMatrix,1,function(x){any(x)})\n  indices=c(indices,rep(FALSE,N-index))\n  return(indices);\n}\n",
    "created" : 1525209194864.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3562251742",
    "id" : "54618D10",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/getUnanimityCoefficients.R",
    "project_path" : "R/getUnanimityCoefficients.R",
    "properties" : {
    },
    "relative_order" : 18,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}