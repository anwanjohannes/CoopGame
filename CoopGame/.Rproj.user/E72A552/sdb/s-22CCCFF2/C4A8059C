{
    "collab_server" : "",
    "contents" : "#' @name proportionalNucleolus\n#' @title proportionalNucleolus for n Players\n#' @description Calculates the Proportional Nucleolus for a game specified by game vector A.\n#' @aliases proportionalNucleolus\n#' @export proportionalNucleolus\n#' @template author/JA\n#' @template author/JS\n#' @template cites/YOUNG_ET_AL_1982\n#' @templateVar YOUNG_ET_AL_1982_P pp. 463 -- 475\n#' @inheritParams CoopGameBaseParams\n#' @template param/enableTermOutLP\n#' @return the Proportional Nucleolus\n#' @export proportionalNucleolus\n#' @examples\n#' library(CoopGame)\n#' A<-c(0,0,0,48,60,72,140)\n#' proportionalNucleolus(A)\n#' #[1] 28.00000 46.66667 65.33333\nproportionalNucleolus <- function(A,enableTermOutLP = FALSE){\n  retValue = NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute the proportional nucleolus.\")\n  }\n  else\n  {\n    pcn=ProportionalNucleolus(A=A)\n    retVal = calculateNucleolus(pcn,enableTermOutLP=enableTermOutLP)\n  }\n  return(retVal)\n} \n\n\n#' @title Constructor for ProportionalNucleolus\n#' @noRd\n#' @template author/JA\n#' @name ProportionalNucleolus\n#' #@export\nProportionalNucleolus<-function(A){\n  retProportionalNucleolus=methods::new(\"ProportionalNucleolus\",A=A)\n  return(retProportionalNucleolus)\n}\n\n#' @title ProportionalNucleolus - S4 class for Nucleolus derivatives\n#' @noRd\n#' @template author/JA\n#' @description An S4 class for the Proportional Nucleolus.\n#' @include NucleolusBase.R\n#'# @exportClass ProportionalNucleolus\nsetClass(\n  \"ProportionalNucleolus\",\n  contains=\"NucleolusBase\"\n)\n\n#' @rdname determineExcessCoefficients-methods\n#' @aliases determineExcessCoefficients,ProportionalNucleolus-method\nsetMethod(\n  \"determineExcessCoefficients\",\n  signature=\"ProportionalNucleolus\",\n  definition=function(.Object){\n    N=length(.Object@A)\n    return(c(.Object@A[-N],0))\n  }\n)\n\n#' @rdname initLPBndsObjCoefs-methods\n#' @aliases initLPBndsObjCoefs,ProportionalNucleolus-method\nsetMethod(\n  \"initLPBndsObjCoefs\",\n  signature=\"ProportionalNucleolus\",\n  definition=function(.Object){\n    lpCoopGameUtils<-.Object@LPCoopGameUtils\n    n=getNumberOfPlayers(.Object@A)\n    setClb(lpCoopGameUtils)<- rep(-Inf, n + 1)\n    setCub(lpCoopGameUtils)<- rep(Inf, n + 1)\n    setCtype(lpCoopGameUtils)<- rep(GLP_FR, n + 1)\n    setObj(lpCoopGameUtils)<- c(rep(0, n), 1)\n    eval.parent(substitute(.Object@LPCoopGameUtils<-lpCoopGameUtils))\n  }\n)\n\n#' @name drawProportionalNucleolus\n#' @title drawProportionalNucleolus for n players\n#' @description drawProportionalNucleolus draws the proportional nucleolus for 3 or 4 players.\n#' @aliases drawProportionalNucleolus\n#' @export drawProportionalNucleolus\n#' @template author/JA\n#' @template cites/YOUNG_ET_AL_1982\n#' @templateVar YOUNG_ET_AL_1982_P pp. 463 -- 475\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @examples\n#' library(CoopGame)\n#' A<-c(0,0,0,48,60,72,140)\n#' drawProportionalNucleolus(A)\ndrawProportionalNucleolus<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Proportional Nucleolus\"){\n  A=GameVector(A)\n  pgv=proportionalNucleolus(A);\n  visualize(A, pointsToDraw=pgv, holdOn=holdOn, colour = colour , label=label, name = name)\n}",
    "created" : 1534235025512.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1026609137",
    "id" : "C4A8059C",
    "lastKnownWriteTime" : 1537819503,
    "last_content_update" : 1537819503,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/ProportionalNucleolus.R",
    "project_path" : "R/ProportionalNucleolus.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 40,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}