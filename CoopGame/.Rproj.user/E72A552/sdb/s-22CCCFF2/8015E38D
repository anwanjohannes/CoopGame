{
    "collab_server" : "",
    "contents" : "#' @name getkCover\n#' @title getkCover\n#' @description getkCover: returns k-cover for a given cooperative game (- this concept is most sensible for 1-convex games)\n#' @aliases getkCover\n#' @export getkCover\n#' @template author/JS\n#' @template cites/DRIESSEN_1998\n#' @templateVar DRIESSEN_1998_P p. 173\n#' @template param/A\n#' @param k An integer specifying k in the k-cover \n#' @return numeric vector containing the k-cover of the given game \n#' @examples \n#' library(CoopGame)\n#' #Example from textbook by Driessen, p. 175, with alpha = 0.6 and k = 2\n#' alpha = 0.6\n#' getkCover(c(0,0,0,alpha,alpha,0,1), k=2)\n#' #[1] 0.0 0.0 0.0 0.6 0.6 0.0 1.0\n\ngetkCover=function(A, k){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_getkCover(paramCheckResult, A, k)\n  N=length(A);\n  n<-getNumberOfPlayers(A)\n  x <- getUtopiaPayoff(A)\n  result <- A\n  for (i in 1:N)\n  {\n    playersInCurrCoal <- getPlayersFromIndex(n,i)\n    if (length(playersInCurrCoal) < k)\n    {\n      result[i] <- A[i]\n    }\n    else\n    {\n      result[i] <- A[N] - sum(x[-playersInCurrCoal])  \n    }\n  }\n  return(result);\n}\n\ninitialParamCheck_getkCover=function(paramCheckResult,A, k){\n  stopOnInvalidGameVectorA(paramCheckResult, A)\n  stopOnInvalidNumber(paramCheckResult, k)\n}\n",
    "created" : 1536695772000.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1408023845",
    "id" : "8015E38D",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/getkCover.R",
    "project_path" : "R/getkCover.R",
    "properties" : {
    },
    "relative_order" : 124,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}