{
    "collab_server" : "",
    "contents" : "#' @title BitMatrix class\n#' @template param/n\n#' @template param/A\n#' @description Class derived from matrix where each column represents \n#' characterisitc vector of player. Constructor is provided by function \\link{BitMatrix}.\n#' @slot .Data is matrix where each column represents the characteristic vector for a player. \n#' @exportClass BitMatrix\nsetClass(\n  \"BitMatrix\",\n  contains = \"matrix\"\n)\n\nsetMethod(\n  f=\"initialize\",\n  signature = \"BitMatrix\",\n  definition =  function(.Object, n, A) {\n    if(!is.null(A)){\n      paramCheckResult=getEmptyParamCheckResult()\n      stopOnInvalidGameVectorA(paramCheckResult,A=A)\n      .Object@.Data=createBitMatrix(n,A)\n    }else{\n      .Object@.Data=createBitMatrix(n)\n    }\n    methods::validObject(.Object)\n    return(.Object)\n  }\n)\n\n\n\n#' @title Constructor for BitMatrix\n#' @description Constructor for BitMatrix (\\linkS4class{BitMatrix}).\n#' @template author/JA\n#' @name BitMatrix\n#' @template param/n\n#' @template param/A\n#' @export BitMatrix\n#' @return instance of BitMatrix\n#' @examples\n#' #Using bit matrix for glove game with 3 players and\n#' #left glove players L={1,2} and right glove players R={3}.\n#' library(CoopGame)\n#' A<-cFuncGloveVector(n = 3,L = c(1,2), R=c(3))\n#' BitMatrix(n=3,A)\n#' #An object of class \"BitMatrix\"\n#' #           cVal\n#' #[1,] 1 0 0    0\n#' #[2,] 0 1 0    0\n#' #[3,] 0 0 1    0\n#' #[4,] 1 1 0    0\n#' #[5,] 1 0 1    1\n#' #[6,] 0 1 1    1\n#' #[7,] 1 1 1    1\n#' \nBitMatrix<-function(n,A=NULL){\n  retAP=methods::new(\"BitMatrix\",n,A)\n  return(retAP)\n}\n\n\n#' @title createBitMatrix\n#' @name createBitMatrix\n#' @description createBitMatrix creates a bit matrix with the dimensions (numberOfPlayers+1 X 2^numberOfPlayers-1) which contains all possible coalitions (apart from the null coalition) for the set of all players. \n#'              Each player is represented by a column which describes if this player is either participating (by value 1) or non-participating (by value 0).\n#'              The last column (named cVal) contains the values created by each coalition.\n#'              According to that each row expresses a coalition as a subset of all players\n#'\n#' @aliases createBitMatrix\n#' @export createBitMatrix\n#' @importFrom hier.part combos\n#' @template author/JA\n#' @template param/n\n#' @template param/A\n#' @return The return is a bit matrix containing all possible coalitions apart from the empty coalition\n#' @examples\n#' library(CoopGame)\n#' A=cFuncQuotaVector(n=3,w=c(1,2,3),q=5)\n#' bm=createBitMatrix(3,A)\n#' bm\n#'# Output:\n#'#            cVal\n#'# [1,] 1 0 0    0\n#'# [2,] 0 1 0    0\n#'# [3,] 0 0 1    0\n#'# [4,] 1 1 0    0\n#'# [5,] 1 0 1    0\n#'# [6,] 0 1 1    1\n#'# [7,] 1 1 1    1\n\n\n\ncreateBitMatrix=function(n,A=NULL){\n\n  #Create all possible subsets from set of all players\n  bm=hier.part::combos(n)$binary\n\n  #Add column named cVal which is intended to contain the values each created by the accordingly coalition\n  bm=cbind(bm,cVal=0)\n  #According to decision at meeting on 12/4 removed this row\n  #bm=rbind(bm,ec=0)\n\n  #Fill column named cVal by values of game vector A\n  if(methods::hasArg(A)){\n    bm[1:length(A),\"cVal\"]=A\n  }\n  #return bit matrix containing all possible coalition apart from the null coalition\n  return (bm)\n}\n\n#' @title getPlayersFromBitVector\n#' @name getPlayersFromBitVector\n#' @description getPlayersFromBitVector determines players involved out of binary vector.#'\n#' @aliases getPlayersFromBitVector\n#' @export getPlayersFromBitVector\n#' @template author/JA\n#' @template author/JS\n#' @param bitVector represents the binary vector \n#' @return playerVector contains the numbers of the involved players \n#' @examples \n#' library(CoopGame)\n#' myBitVector <-c(1,0,1,0)\n#' (players<-getPlayersFromBitVector(myBitVector))\n#' #[1] 1 3 \n#' \ngetPlayersFromBitVector=function(bitVector){\n  numberOfPlayers=length(bitVector)\n  #changed identification of players for the playerVector on proposal of Alexandra Tiukkel to line below\n  playerVector=which(bitVector&1)\n  return(playerVector)\n}\n\n#' @title getPlayersFromBMRow\n#' @name getPlayersFromBMRow\n#' @description getPlayersFromBMRow determines players involved out of bit matrix row\n#' @aliases getPlayersFromBMRow\n#' @export getPlayersFromBMRow\n#' @template author/JA\n#' @template author/JS\n#' @param bmRow represents the bit matrix row.\n#' @return playerVector contains involved players (e.g. c(1,3) see example below for bitIndex=5 and n=3)\n#' @examples\n#' library(CoopGame)\n#'  bm=createBitMatrix(n=3,A=c(1:7))\n#' #Corresponding bit matrix:\n#' #           cVal\n#' #[1,] 1 0 0    1\n#' #[2,] 0 1 0    2\n#' #[3,] 0 0 1    3\n#' #[4,] 1 1 0    4\n#' #[5,] 1 0 1    5 <=Specified bit index\n#' #[6,] 0 1 1    6\n#' #[7,] 1 1 1    7\n#'\n#' #Determine players from bit matrix row by index 5\n#'  players=getPlayersFromBMRow(bmRow=bm[5,])\n#' #Result:\n#'  players # [1] 1 4\n\ngetPlayersFromBMRow=function(bmRow){\n  players=getPlayersFromBitVector(bmRow[1:(which(names(bmRow)==\"cVal\")-1)])\n  #Remove col and rownames\n  \n  return(unname(players))\n}\n##Second Section: END\n",
    "created" : 1534321838566.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1725795631",
    "id" : "BE286B4C",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/bitMatrix.R",
    "project_path" : "R/bitMatrix.R",
    "properties" : {
    },
    "relative_order" : 68,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}