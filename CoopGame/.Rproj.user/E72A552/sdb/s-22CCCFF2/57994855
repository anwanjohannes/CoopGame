{
    "collab_server" : "",
    "contents" : "boolSkip=F\n\ntest_that(\"Check 82.1 - stopOnInvalidGameVector\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  A1=NULL #1000\n  A2=1:6  #1001\n  A3=c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\") #1002\n  A4=1:15; #1003\n  A5=rep(0,7) #1004\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A1))\n  expect_equal(paramCheckResult$errCode,1000) #Error Code 1000: Game vector A is invalid as 'NULL'\n  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A2))\n  expect_equal(paramCheckResult$errCode,1001) #Error Code 1001: Number of elements in A is invalid \n  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A3))\n  expect_equal(paramCheckResult$errCode,1002) #Error Code 1002: Type of game vector is not numeric\n  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A4,n=3))\n  expect_equal(paramCheckResult$errCode,1003) #Error Code 1003: Game vector A has different number of players than n \n  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A5))\n  expect_equal(paramCheckResult$errCode,1004) #Error Code 1004: Null game specified, value for every player is 0 \n})\n\ntest_that(\"Check 82.2 - stopOnInvalidGrandCoalitionN\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  N1=NULL #1010\n  N2=\"3\"  #1011\n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidGrandCoalitionN(paramCheckResult,N1)) \n  expect_equal(paramCheckResult$errCode,1010) #Error Code 1010: Grand coalition vector N is invalid as 'NULL'\n  expect_error(stopOnInvalidGrandCoalitionN(paramCheckResult,N=N2))\n  expect_equal(paramCheckResult$errCode,1011) #Error Code 1011: Grand coalition vector N is invalid as not numeric\n  \n})\n\ntest_that(\"Check 82.3 - stopOnInvalidCoalitionS\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  S1=NULL #1020\n  S2=c(\"1\",\"2\") #1021\n  S3=c(1,2,3,4); N=c(1,2,3) #1022\n  S4=c(1,2,3,4,5); n1=3; #1023\n  S5=c(1,2,3,4,5);A=1:7; #1024\n  paramCheckResult=c()\n  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S1))\n  expect_equal(paramCheckResult$errCode,1020) #Error Code 1020: Coalition vector S is invalid as 'NULL'\n  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S2))\n  expect_equal(paramCheckResult$errCode,1021) #Error Code 1021: Coalition vector S is invalid as not numeric\n  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S3,N = N))\n  expect_equal(paramCheckResult$errCode,1022) #Error Code 1022: Coalition vector S no subset of grand coalition N'\n  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S4,n=n1))\n  expect_equal(paramCheckResult$errCode,1023) #Error Code 1023: The number of players in S cannot be greater \\cr than the number of players in N\n  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S5,A=A))\n  expect_equal(paramCheckResult$errCode,1024) #Error Code 1024: Specified coalition is inconsistent to game vector\n})\n\ntest_that(\"Check 82.4 - stopOnInvalidNumberOfPlayers\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  n1=1; #1050\n  n2=21; #1051\n  #todo not numeric of length 1\n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidNumberOfPlayers(paramCheckResult,n = n1))\n  expect_equal(paramCheckResult$errCode,1050) #Error Code 1050: Number of players is invalid as below 2 \n  expect_error(stopOnInvalidNumberOfPlayers(paramCheckResult,n = n2))\n  expect_equal(paramCheckResult$errCode,1051) #Error Code 1051: Number of players is invalid as above 20\n})\n\n\n\n\ntest_that(\"Check 82.5 - stopOnInvalidIndex\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  ix1=NULL #1070\n  ix2=\"2\" #1071\n  ix3=15; n5=3 #1072\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidIndex(paramCheckResult,index = ix1))\n  expect_equal(paramCheckResult$errCode,1070) #Error Code 1070: Index is 'NULL'. \n  expect_error(stopOnInvalidIndex(paramCheckResult,index = ix2))\n  expect_equal(paramCheckResult$errCode,1071) #Error Code 1071: Index is 'not numeric'.\n  expect_error(stopOnInvalidIndex(paramCheckResult,index = ix3, n=n5))\n  expect_equal(paramCheckResult$errCode,1072) #Error Code 1072: Index is within the wrong range according to number of players n.\n  \n})\n\ntest_that(\"Check 82.7 - stopOnInvalidNChooseB\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  n1=NULL    #1080\n  b1=NULL    #1081\n  n2=\"4\"     #1082\n  b2=\"2\"     #1083\n  n3=3; b3=5 #1084\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidNChooseB(paramCheckResult,n = n1))\n  expect_equal(paramCheckResult$errCode,1080) #Error Code 1080: Number of players 'n' is 'NULL' \n  expect_error(stopOnInvalidNChooseB(paramCheckResult,n=4,b = b1))\n  expect_equal(paramCheckResult$errCode,1081) #Error Code 1081: Number of involved players 'b' is 'NULL' \n  expect_error(stopOnInvalidNChooseB(paramCheckResult,n = n2, b=2))\n  expect_equal(paramCheckResult$errCode,1082) #Error Code 1082: Number of players 'n' is not 'numeric' \n  expect_error(stopOnInvalidNChooseB(paramCheckResult,n = n3, b=b3))\n  expect_equal(paramCheckResult$errCode,1083) #Error Code 1084: Number of involved players 'b' is greater than \\cr of players 'n'\n})\n\n\ntest_that(\"Check 82.8 - stopOnInvalidBoolean\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  b1=1 #1120\n  b2=logical(3) #1121\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidBoolean(paramCheckResult,boolean = b1))\n  expect_equal(paramCheckResult$errCode,1120) #Error Code 1120: Parameter is not a boolean value \n  expect_error(stopOnInvalidBoolean(paramCheckResult,boolean = b2))\n  expect_equal(paramCheckResult$errCode,1121) #Error Code 1121: Parameter is not of length 1\n})\n\ntest_that(\"Check 82.9 - stopOnInvalidNumber\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  num=\"2\" #1130\n  num2=c(1,2,3) #1131\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidNumber(paramCheckResult,number = num)) \n  expect_equal(paramCheckResult$errCode,1130) #Error Code 1130: Parameter is not a number\n  expect_error(stopOnInvalidNumber(paramCheckResult,number = num2))\n  expect_equal(paramCheckResult$errCode,1131) #Error Code 1131: Parameter is not of length 1 \n})\n\ntest_that(\"Check 82.10 - stopOnInvalidCoalitionFunctionV\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  v=2 #1040\n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidCoalitionFunctionV(paramCheckResult,v = v))\n  expect_equal(paramCheckResult$errCode,1040) #Error Code 1040: Coalition function v is no function\n})\n\ntest_that(\"Check 82.11 - stopOnInvalidLeftRightCFuncGlove\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  L1=c(1,2); R1=c(3); N1=c(1,2,3,4) #1138\n  L2=c(); R2=c(1:4); N2=c(1,2,3,4) #1139\n  L3=c(1:4); R3=c(); N3=c(1,2,3,4) #1140\n  L4=c(1,2); R4=c(2,3,4); N4=c(1,2,3,4) #1141\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L1, R = R1, N = N1)) \n  expect_equal(paramCheckResult$errCode,1138) #Error Code 1138: Not all players in L and R included. \n  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L2, R = R2, N = N2))\n  expect_equal(paramCheckResult$errCode,1139) #Error Code 1139: L must have size > 0.\n  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L3, R = R3, N = N3))\n  expect_equal(paramCheckResult$errCode,1140) #Error Code 1140: R must have size > 0. \n  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L4, R = R4, N = N4))\n  expect_equal(paramCheckResult$errCode,1141) #Error Code 1141: L and R have to be disjoint sets. \n})\n\ntest_that(\"Check 82.12 - stopOnInvalidVetoPlayer\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  vp1=NULL\n  vp2=c(1,2)\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidVetoPlayer(paramCheckResult,vetoPlayer = vp1))\n  expect_equal(paramCheckResult$errCode,1143) #Error Code 1143: At least one veto player has to be specified \n  expect_error(stopOnInvalidVetoPlayer(paramCheckResult, vetoPlayer = vp2))\n  expect_equal(paramCheckResult$errCode,1144) #Error Code 1144: Only a single veto player is allowed for this game\n})\n\ntest_that(\"Check 82.13 - stopOnInvalidQuota\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  q1=-1 #5020\n  q2=\"4\" #5021\n  q3=NULL #5022\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidQuota(paramCheckResult,q = q1))\n  expect_equal(paramCheckResult$errCode,1031) #Error Code 1031: Quota must be greater than zero!\n  expect_error(stopOnInvalidQuota(paramCheckResult,q = q2))\n  expect_equal(paramCheckResult$errCode,1032) #Error Code 1032: Quota must be numeric!\n  expect_error(stopOnInvalidQuota(paramCheckResult,q = q3))\n  expect_equal(paramCheckResult$errCode,1030) #Error Code 1030: Invalid quota as q is NULL \n})\n\ntest_that(\"Check 82.14 - stopOnInvalidWeightVector\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  n1=4; w1=c(1,2,3)\n  n2=3; w2=c(\"1\",\"2\",\"3\")\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidWeightVector(paramCheckResult, n = n1, w = w1))\n  expect_equal(paramCheckResult$errCode,1110) #Error Code 1110: Number of weights must be equal or greater than number of players in coalition!\n  expect_error(stopOnInvalidWeightVector(paramCheckResult, n = n2, w = w2))\n  expect_equal(paramCheckResult$errCode,1111) #Error Code 1111: Invalid weight vector as w is numeric \n})\n\ntest_that(\"Check 82.15 - stopOnInvalidDictator\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  dic1=NULL\n  dic2=\"3\"\n  dic3=c(1,2,3)\n  dic4=5; n4=3 \n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic1))\n  expect_equal(paramCheckResult$errCode,1093) #Error Code 1093: 'dictator' is 'NULL' \n  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic2))\n  expect_equal(paramCheckResult$errCode,1091) #Error Code 1091: Representation of 'dictator' is not 'numeric' \n  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic3))\n  expect_equal(paramCheckResult$errCode,1090) #Error Code 1090: 'dictator' does not contain one single element \n  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic4, n=n4))\n  expect_equal(paramCheckResult$errCode,1092) #Error Code 1092: 'dictator' is not element of grand coalition\n})\n\ntest_that(\"Check 82.16 - stopOnInvalidEstate\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  E=-1\n  E2=\"23\"\n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidEstate(paramCheckResult, E))\n  expect_equal(paramCheckResult$errCode,1150) #Error Code 1150: Estate must be nonnegative! \n  expect_error(stopOnInvalidEstate(paramCheckResult, E2))\n  expect_equal(paramCheckResult$errCode,1151) #Error Code 1151: Estate must be numeric! \n})\n\ntest_that(\"Check 82.16 - stopOnInvalidClaimsVector\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  n1=4\n  d1=c(1,2,3)\n  n2=4\n  d2=c(\"1\",\"2\",\"3\",\"4\")\n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidClaimsVector(paramCheckResult, n1,d1))\n  expect_equal(paramCheckResult$errCode,1160) #Error Code 1160: Number of claims must equal the number of players in the bankruptcy game!\n  expect_error(stopOnInvalidClaimsVector(paramCheckResult, n2,d2))\n  expect_equal(paramCheckResult$errCode,1161) #Error Code 1161: Invalid claims vector as d must be numeric \n})\n\ntest_that(\"Check 82.17 - stopOnInvalidAllocation\" ,{\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  x1=NULL; #1100\n  x2=c(\"1\",\"2\",\"3\");n2=3; #1101\n  n3=4;x3=c(1,2,4,5,6);#1102\n  x4=c(1,2,3,4); A4=1:7; #1103\n  \n  paramCheckResult=getEmptyParamCheckResult()\n  expect_error(stopOnInvalidAllocation(paramCheckResult, x=x1))      #Error Code 1100: Allocation 'x' is NULL \n  expect_equal(paramCheckResult$errCode,1100)\n  expect_error(stopOnInvalidAllocation(paramCheckResult, x=x2,n=n2)) #Error Code 1101: Allocation 'x' is not of type numeric. \n  expect_equal(paramCheckResult$errCode,1101)\n  expect_error(stopOnInvalidAllocation(paramCheckResult, x=x3,n=n3)) #Error Code 1102: Allocation 'x' has wrong number of elements according to number of players specified by 'n'. \n  expect_equal(paramCheckResult$errCode,1102)\n  expect_error(stopOnInvalidAllocation(paramCheckResult, x=x4,A=A4)) #Error Code 1103: Allocation is inconsistent to game vector. \n  expect_equal(paramCheckResult$errCode,1103)\n})",
    "created" : 1536507941246.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4132606280",
    "id" : "57994855",
    "lastKnownWriteTime" : 1536693748,
    "last_content_update" : 1536693748862,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/tests/testthat/test_82_ParameterChecks.R",
    "project_path" : "tests/testthat/test_82_ParameterChecks.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 116,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}