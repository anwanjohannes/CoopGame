{
    "collab_server" : "",
    "contents" : "#' @name publicGoodValue\n#' @title publicGoodValue\n#' @description Calculates the (normalized) Public Good Value for a specified nonnegative TU game.\n#' @aliases publicGoodValue hollerValue\n#' @export publicGoodValue\n#' @template author/JS\n#' @template cites/HOLLER_ET_LI_1995\n#' @templateVar HOLLER_ET_LI_1995_P pp. 257 -- 270\n#' @template cites/HOLLER_ET_PACKEL_1983\n#' @templateVar HOLLER_ET_PACKEL_1983_P pp. 21 -- 29\n#' @template cites/HOLLER_1982\n#' @templateVar HOLLER_1982_P pp. 262 -- 271\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @return Public Good Value for specified nonnegative TU game \n#' @examples \n#' # Example from original 1995 paper by Holler and Li\n#' A <- c(1,2,3,4,0,0,0)\n#' publicGoodValue(A)\n#' #[1] 0.3571429 0.4285714 0.2142857\n#' \n#' A=c(0,0,0,0.7,11,0,15)\n#' publicGoodValue(A) \n#' #[1] 0.3903509 0.2295322 0.3801170\n#' \npublicGoodValue<-function(A)\n{\n  retVal=NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any (normalized) public Good value.\")\n  }\n  else\n  {\n    pgv=PublicGoodValueConcept(A)\n    pgvcs=calculatePointSolution(pgv)\n    pgvcs=pgvcs/sum(pgvcs)\n    retVal = pgvcs\n  }\n  return(retVal)\n}\n\n#' @name absolutePublicGoodValue\n#' @title absolutePublicGoodValue\n#' @description Calculates the absolute Public Good Value for a specified nonnegative TU game.\n#' @aliases absolutePublicGoodValue absoluteHollerValue\n#' @export absolutePublicGoodValue \n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @template cites/HOLLER_ET_LI_1995\n#' @templateVar HOLLER_ET_LI_1995_P pp. 257 -- 270\n#' @inheritParams CoopGameBaseParams\n#' @return Absolute Public Good Value for specified simple game \n#' @examples \n#' #Example from original 1995 paper by Holler and Li\n#' A <- c(1,2,3,4,0,0,0)\n#' absolutePublicGoodValue(A)\n#' #[1] 5 6 3\n#' \n#' A=c(0,0,0,0.7,11,0,15)\n#' absolutePublicGoodValue(A) \n#' #[1] 26.7 15.7 26.0\n#' # Note that in general the absolute Public Good Value is not an efficient vector, \n#' # i.e. the sum of its entries is not always 1.\n#' \nabsolutePublicGoodValue<-function(A)\n{\n  retVal = NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. We do not compute any Public Good value in this case.\")\n  }\n  else\n  {\n    pgv=PublicGoodValueConcept(A)\n    pgvcs=calculatePointSolution(pgv)\n    retVal=pgvcs\n  }\n  return(retVal)\n}\n\n\n\nlogicPublicGoodValue=function(A){\n  retVal=NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any Public Good Value.\")\n  }\n  else\n  {\n    n=getNumberOfPlayers(A)\n    bm=createBitMatrix(n,A)\n    #the gaining coalitions\n    rgcs= getRealGainingCoalitions(A)\n    pgv=sapply(c(1:n),function(i){sum(rgcs[rgcs[,i]>0,\"cVal\"])})\n    retVal = pgv\n  }\n  return(retVal)\n}\n\n#' @title PublicGoodValueConcept\n#' @noRd\n#' @description PublicGoodValueConcept\n#' @include PointSolutionConcept.R\n# @exportClass PublicGoodValueConcept\n\nsetClass(\n  \"PublicGoodValueConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @rdname calculatePointSolution-methods\n#' @aliases calculatePointSolution,PublicGoodValueConcept-method\nsetMethod(\n  \"calculatePointSolution\",\n  signature=\"PublicGoodValueConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicPublicGoodValue(A))\n  }\n)\n\n#' @title Constructor for PublicGoodValueConcept\n#' @noRd\n#' @template author/JS\n#' @name PublicGoodValueConcept\n#' #@export\nPublicGoodValueConcept<-function(A){\n  retPublicGoodValue=methods::new(\"PublicGoodValueConcept\",A)\n  return(retPublicGoodValue)\n}\n\n\n\n#' @name drawPublicGoodValue\n#' @title drawPublicGoodValue for 3 or 4 players\n#' @description drawPublicGoodValue draws the (normalized) Public Good Value for 3 or 4 players.\n#' @aliases drawPublicGoodValue\n#' @export drawPublicGoodValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @return Draws (normalized) Public Good value for given game vector with 3 or 4 players\n#' @examples\n#' A=c(0,0,0,1,1,0,1)\n#' drawPublicGoodValue(A) \ndrawPublicGoodValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Normalized Public Good Value\"){\n  A=GameVector(A)\n  sm=publicGoodValue(A);\n  visualize(A, pointsToDraw=sm, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1536419478599.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2535382553",
    "id" : "54B727C3",
    "lastKnownWriteTime" : 1536091312,
    "last_content_update" : 1536091312,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/PublicGoodValueConcept.R",
    "project_path" : "R/PublicGoodValueConcept.R",
    "properties" : {
    },
    "relative_order" : 105,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}