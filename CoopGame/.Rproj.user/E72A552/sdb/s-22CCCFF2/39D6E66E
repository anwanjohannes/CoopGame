{
    "collab_server" : "",
    "contents" : "#Date: 20151229\n#File description of myersonFunction.R:\n#File contains functions for calculating the myerson function value for a specific coalition S (subset of N)\n#First section of myersonFunction.R contains controller function myersonFunction.R which calls either of myersonFunction4cFunc.R or of myersonFunction4Vector.R\n#-myersonFunction -> either calls myersonFunction4Vector or myersonFunction4cFunc\n#-initialParamCheck_myersonFunction\n#Second section of myersonFunction.R contains function myersonFunction4cFunc.R and corresponding parameter check function:\n#-myersonFunction4cFunc.R -> coalition function as input\n#-initialParamCheck_myersonFunction4cFunc -> checks parameters of myersonFunction4cFunc.R\n#Third section of BitMatrix.R contains function myersonFunction4Vector.\n#-myersonFunction4Vector.R\n\n##First section: START\n\n#  Version 1.0\n#  Datum: 11.11.2015\n#' @name myersonFunction\n#' @title Calculates value for myerson function according to assigned coalition function and a coalition  \\eqn{p \\subset S}\n#' @description Calculates value for myerson function either by calling function myersonFunction4cFunc (in case a coalition function is specified) or by calling myersonFunction4Vector (game vector A is specified).\n#' @aliases myersonFunction\n#' @export myersonFunction\n#' @export initialParamCheck_myersonFunction\n#' @author Johannes Anwander\n#' @param L (graph.data.frame) represents network, S expresses the coalition and v the coalition function\n#' used within myerson the myerson function: \\deqn{v^{ L }(S)=\\sum{ K \\in S/L }{ }{ v(K) }}\n#' @return returns the value of the myerson function\n#' @examples\n#' dummyVfunc=function(S,...){\n#'  length(S);\n#' }\n#' edgesList=cbind(c(1,3,4),c(2,4,5))\n#' G=graph.data.frame(edgesList)\n#' plot(G)\n#' S=c(\"2\",\"1\")\n#' myersonFunction(G,S,dummyVfunc)\n\n\nmyersonFunction=function(G, S, A=NULL,v=NULL, ...){ # v=NULL ..\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_myersonFunction(paramCheckResult, A, v, G, S)\n  if(!is.null(v)){\n    myersonFunction4cFunc(v, G, S, ...)\n  }else if(!is.null(A)){\n    myersonFunction4Vector(A, G, S, ...)\n  }\n}\n\n#  Version 1.0\n#  Date: 20160103\n#' @name initialParamCheck_myersonFunction\n#' @title initialParamCheck_myersonFunction - parameter check for myersonFunction\n#' @description initialParamCheck_myersonFunction validates parameters passed to myersonFunction\n#' @aliases initialParamCheck_myersonFunction\n#' @export initialParamCheck_myersonFunction\n#' @author Johannes Anwander\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param A represents number of players involved in whole game.\n#' @param v represents coalition function.\n#' @param G represents network.\n#' @examples\n#'   paramCheckResult=getEmptyParamCheckResult()\n#'   initialParamCheck_myersonFunction(paramCheckResult,A=c(1:7),v=NULL,G=graph(c(1,2,2,3)),S=c(1,2))\n\ninitialParamCheck_myersonFunction=function(paramCheckResult, A, v, G, S){\n  stopOnInvalidDefinitionAorV(paramCheckResult,A,v)\n  stopOnInvalidCoalitionS(paramCheckResult, S)\n  if(!is.null(A)){\n    stopOnInvalidGameVectorA(paramCheckResult,A)\n  }\n  if(!is.null(v)){\n    stopOnInvalidCoalitionFunctionV(paramCheckResult, v)\n  }\n  stopOnInvalidNetworkG(paramCheckResult, G)\n}\n##First section: END\n\n##Second section: START\n\n#  Version 1.0\n#  Datum: 11.11.2015\n#' @name myersonFunction4cFunc\n#' @title Calculates value for myerson function according to assigned coalition function and a coalition  $\\\\psubset$ S\n#' @description Returns calculated value from myerson function\n#' @aliases myersonFunction4cFunc\n#' @export myersonFunction4cFunc\n#' @export initialParamCheck_myersonFunction4cFunc\n#' @author Johannes Anwander\n#' @param L (graph.data.frame) represents network, S expresses the coalition and v the coalition function\n#' @param used within myerson the myerson function: $v^\\{ L \\}(S)=\\\\Sum{ K\\\\in S/L \\}\\{ \\}\\{ v(K) \\}$\n#' @return returns the value of the myerson function\n#' @examples\n#' dummyVfunc=function(S,...){\n#'  length(S);\n#'}\n#' edgesList=cbind(c(1,3,4),c(2,4,5))\n#' G=graph.data.frame(edgesList)\n#' plot(G)\n#' S=c(2,1)\n#' (myersonFunction(G,S,v=dummyVfunc))\n\n\nmyersonFunction4cFunc=function(v, G, S, ...){\n  #apply names to vertices to keep track (in components)\n  V(G)$name <- seq(vcount(G))\n\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_myersonFunction4cFunc(paramCheckResult, v, G, S)\n\n  coalitionValue=0;\n  subGraph=induced_subgraph(G,S)\n  #Defines new function funV according to the definition made in param v\n  funV=match.fun(v)\n\n  #components of network with nodes only of S  get determined\n  comps=decompose(subGraph)\n\n  listComps=list()\n  compsResult=list()\n  #create sum of values by function being applied to all components\n  for(i in 1:no.clusters(subGraph)){\n    S=as.numeric(V(comps[[i]])$name)\n    compsResult[[i]]= funV(S, ...)\n    coalitionValue=coalitionValue+compsResult[[i]]\n    listComps[[i]]=V(comps[[i]])$name\n  }\n\n  #returns result of myerson coalition function\n  #1-2-3-4-5\n  return (list(components=listComps, components_result=compsResult, coalition_result=coalitionValue));\n}\n\ninitialParamCheck_myersonFunction4cFunc=function(paramCheckResult, v, G, S){\n  stopOnInvalidCoalitionFunctionV(paramCheckResult, v)\n  stopOnInvalidNetworkG(paramCheckResult, G)\n  stopOnInvalidCoalitionS(paramCheckResult, S)\n}\n\n##Second section: END\n\n##Third section: START\n#  Version: 1.1\n#  Datum: 10.01.2015\n#' @name myersonFunction4Vector\n#' @title myerson function for a given graph and game vector\n#' @description Returns calculated value from myerson function\n#' @aliases myersonFunction4Vector\n#' @export myersonFunction4Vector\n#' @export initialParamCheck_myersonFunction4Vector\n#' @import igraph\n#' @author Alexandra Tiukkel\n#' @param A  is a numeric vector of dimension 1x((2^n)-1), n = number of players\n#' @param G  is a graph with edges and nodes (=players) for a cooperate game\n#' @param S  is numeric vector with players for which payoff should be returned\n#' @return calculated myerson value\n#' @examples\n#' #maschlergame\n#' A=c(0,0,0,60,60,60,72)\n#' edgesList=c(1,2, 2,3)\n#' G<-graph(n = 3, edges = edgesList, directed = FALSE)\n#' S=c(1,2)\n#'\n#' myersonFunction4Vector(A, G, S)\n\nmyersonFunction4Vector<-function(A, G, S){\n  #get number of players\n  numberOfPlayers=log2(length(A)+1)\n  # validate parameter\n  paramCheckResult <- getEmptyParamCheckResult()\n  initialParamCheck_myersonFunction4Vector(paramCheckResult, A, G, S, numberOfPlayers)\n  #copy graph\n  g<-induced.subgraph(G, vids = V(G))\n  index<-c()\n  result<-c()\n  listComps<-list()\n  componentsResult<-list()\n  \n  #apply names to vertices to keep track (in components)\n  V(g)$name <- seq(vcount(g))\n  #fetch subgraph for coalition S\n  subGraph<-induced.subgraph(graph = g,vids = S)\n  #fetch all components from subgraph\n  components <- decompose.graph(subGraph)\n  #initialize run-variables for all components in S\n  i<-1\n  end<-length(components)\n  result<-0\n  while(i<=end){\n    #save components in a list\n    listComps[[i]]=V(components[[i]])$name\n    #calculate index for game vector (payoff of coalition)\n    index<-indexCoalition(n = numberOfPlayers, S = V(components[[i]])$name)\n    #save components payoff\n    componentsResult[[i]] = A[index]\n    #add component payoff to coalition payoff\n    result<-result+A[index]\n    i<-i+1\n  }\n  \n  return(list(components=listComps, components_result=componentsResult, coalition_result=result))\n}\n\ninitialParamCheck_myersonFunction4Vector=function(paramCheckResult, A, G, S, numberOfPlayers){\n  stopOnInvalidGameVectorA(paramCheckResult, A)\n  stopOnInvalidNetworkG(paramCheckResult, G)\n  stopOnInvalidCoalitionS(paramCheckResult, S, n = numberOfPlayers)\n  stopOnDifferentPlayersInGameANetworkG(paramCheckResult, A, G)\n}\n##Third section: END\n",
    "created" : 1536699630414.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1697552157",
    "id" : "39D6E66E",
    "lastKnownWriteTime" : 1484588641,
    "last_content_update" : 1484588641,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CommunicationGames/R/myersonFunction.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 131,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}