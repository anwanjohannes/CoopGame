{
    "collab_server" : "",
    "contents" : "#' @title PayoffSpace\n#' @description A class for calculations in payoff space\n#' @include SetSolutionConcept.R\n#' @slot VRepMatrix A matrix of vertices of a set solution concept\n#' @exportClass PayoffSpace\n\nsetClass(\n  \"PayoffSpace\",\n  slots = c(VRepMatrix=\"matrix\")\n)\n\n#' @title Constructor for AllocationPropertyPayoffSpace\n#' @noRd\n#' @description Constructor for AllocationPropertyPayoffSpace\n#' @template author/JA\n#' @name PayoffSpace\n#' #@export\nPayoffSpace<-function(VRepMatrix=NULL){\n  retAP=methods::new(\"PayoffSpace\",VRepMatrix=VRepMatrix)\n  return(retAP)\n}\n\nsetMethod(\n  f=\"initialize\",\n  signature = \"PayoffSpace\",\n  definition =  function(.Object, ...,VRepMatrix) {\n    .Object@VRepMatrix=VRepMatrix\n    .Object<-methods::callNextMethod(.Object, ...)\n    methods::validObject(.Object)\n    return(.Object)\n  }\n)\n\n\n\n#' @title Method isElementOfPayoffSpace\n#' @description This method checks if one allocation is element of payoff-space.\n#' @rdname isElementOfPayoffSpace-methods\n#' @name isElementOfPayoffSpace\n#' @docType methods\n#' @template author/JA\n#' @template param/Object\n#' @template param/x\n#' @exportMethod isElementOfPayoffSpace\n\nsetGeneric(\n  \"isElementOfPayoffSpace\",\n  function(.Object,x=\"Allocation\"){\n    standardGeneric(\"isElementOfPayoffSpace\")\n  }\n)\n\n\n#' @rdname isElementOfPayoffSpace-methods\n#' @aliases isElementOfPayoffSpace,PayoffSpace-method\nsetMethod(\n  \"isElementOfPayoffSpace\",\n  signature=\"PayoffSpace\",\n  definition=function(.Object,x){\n    return(isElementOfConvexSet(.Object@VRepMatrix,x))\n  }\n)\n\n#' @title isElementOfConvexSet\n#' @description check if a point is included in a convex set\n#' @name isElementOfConvexSet\n#' @template author/FM\n#' @template author/JA\n#' @template author/NC\n#' @template author/JS\n#' @template param/VRepMatrix\n#' @template param/x\n#' @return If the point is included in a convex set return \\code{TRUE}, else return \\code{FALSE}\n#' @export\nisElementOfConvexSet <- function(VRepMatrix,x){\n  pointRepMatrix = VRepMatrix\n  # get number of rows of the above matrix ...\n  numberOfPlayers=length(x)\n  boolRetVal=FALSE\n  numberOfVertices = nrow(pointRepMatrix)\n  \n  if(numberOfVertices!=0){\n  \n    if(numberOfPlayers == ncol(pointRepMatrix))\n    {\n      pointRepMatrix = rbind(pointRepMatrix,x)\n      \n      vRepresentation = makeV(points = pointRepMatrix)\n      \n      if(nrow(vRepresentation)>=2){\n        vRepresentation = redundant(vRepresentation)\n        newpos = vRepresentation$new.position\n        redundancyIndices = vRepresentation$redundant\n        if (length(redundancyIndices)==0)\n        {\n          boolRetVal = FALSE\n        }\n        else if (length(redundancyIndices)>=2)\n        {\n          boolRetVal = FALSE\n        }\n        else if (length(redundancyIndices)==1)\n        {\n          if (redundancyIndices[1]==numberOfVertices+1)\n          {\n            boolRetVal = TRUE\n          }\n          else\n          {\n            equality = all.equal(pointRepMatrix[redundancyIndices[1],], pointRepMatrix[numberOfVertices+1,])\n            if(equality[1] == TRUE)\n            {\n              boolRetVal=TRUE\n            }\n            else\n            {\n              boolRetVal = FALSE\n            }\n          }\n        }\n      }\n    }\n  }else{\n    print(\"Payoff space is empty.\")\n  }\n  return(boolRetVal)\n}\n\n\n",
    "created" : 1534251366549.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "483854748",
    "id" : "8B779879",
    "lastKnownWriteTime" : 1537819503,
    "last_content_update" : 1537819503,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/PayoffSpace.R",
    "project_path" : "R/PayoffSpace.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 57,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}