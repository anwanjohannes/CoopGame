{
    "collab_server" : "",
    "contents" : "#' @name publicHelpValue\n#' @title publicHelpValue\n#' @description Calculates the (normalized) Public Help Value for a specified nonnegative TU game.\n#' @aliases publicHelpValue publicHelpThetaValue publicHelpValueTheta\n#' @export publicHelpValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @return Public Help Value for specified nonnegative TU game \n#' @examples \n#' A=c(0,0,0,0.7,11,0,15)\n#' publicHelpValue(A) \n#' #[1] 0.3903509 0.2295322 0.3801170\n#' \npublicHelpValue<-function(A)\n{\n  retVal=NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any (normalized) public help value.\")\n  }\n  else\n  {\n    phv=PublicHelpValueConcept(A)\n    phvcs=calculatePointSolution(phv)\n    phvcs=phvcs/sum(phvcs)\n    retVal = phvcs\n  }\n  return(retVal)\n}\n\n#' @name absolutePublicHelpValue\n#' @title absolutePublicHelpValue\n#' @description Calculates the absolute Public Help Value for a specified nonnegative TU game.\n#' Note that in general the absolute Public Help Value is not an efficient vector, \n#' i.e. the sum of its entries is not always 1.\n#' Hence no drawing routine for the absolute Public Help Value is provided.\n#' @aliases absolutePublicHelpValue absolutePublicHelpThetaValue absolutePublicHelpValueTheta\n#' @export absolutePublicHelpValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @return Absolute Public Help Value for specified simple game \n#' @examples \n#' A=c(0,0,0,0.7,11,0,15)\n#' absolutePublicHelpValue(A) \n#' #[1] 26.7 15.7 26.0\n#' \nabsolutePublicHelpValue<-function(A)\n{\n  retVal = NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any public help value.\")\n  }\n  else\n  {\n    phv=PublicHelpValueConcept(A)\n    phvcs=calculatePointSolution(phv)\n    retVal=phvcs\n  }\n  return(retVal)\n}\n\n\n\nlogicPublicHelpValue=function(A){\n  retVal=NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any Public Help Value.\")\n  }\n  else\n  {\n    n=getNumberOfPlayers(A)\n    bm=createBitMatrix(n,A)\n    #the gaining coalitions\n    gcs=bm[bm[,\"cVal\"]>0,,drop=FALSE]\n    phv=sapply(c(1:n),function(i){sum(gcs[gcs[,i]==1,\"cVal\"])})\n    retVal = phv\n  }\n  return(retVal)\n}\n\n#' @title PublicHelpValueConcept\n#' @noRd\n#' @description PublicHelpValueConcept\n#' @include PointSolutionConcept.R\n# @exportClass PublicHelpValueConcept\n\nsetClass(\n  \"PublicHelpValueConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @rdname calculatePointSolution-methods\n#' @aliases calculatePointSolution,PublicHelpValueConcept-method\nsetMethod(\n  \"calculatePointSolution\",\n  signature=\"PublicHelpValueConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicPublicHelpValue(A))\n  }\n)\n\n#' @title Constructor for PublicHelpValueConcept\n#' @noRd\n#' @template author/JS\n#' @name PublicHelpValueConcept\n#' #@export\nPublicHelpValueConcept<-function(A){\n  retPublicHelpValue=methods::new(\"PublicHelpValueConcept\",A)\n  return(retPublicHelpValue)\n}\n\n\n\n#' @name drawPublicHelpValue\n#' @title drawPublicHelpValue for 3 or 4 players\n#' @description drawPublicHelpValue draws the (normalized) Public Help Value for 3 or 4 players.\n#' @aliases drawPublicHelpValue\n#' @export drawPublicHelpValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @return Draws (normalized) Public Help value for given game vector with 3 or 4 players\n#' @examples\n#' A=c(0,0,0,1,1,0,1)\n#' drawPublicHelpValue(A) \ndrawPublicHelpValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Normalized Public Help Value\"){\n  A=GameVector(A)\n  sm=publicHelpValue(A);\n  visualize(A, pointsToDraw=sm, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1536419533184.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2712967461",
    "id" : "99CFD595",
    "lastKnownWriteTime" : 1536091312,
    "last_content_update" : 1536091312,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/PublicHelpValueConcept.R",
    "project_path" : "R/PublicHelpValueConcept.R",
    "properties" : {
    },
    "relative_order" : 106,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}