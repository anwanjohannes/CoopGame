{
    "collab_server" : "",
    "contents" : "#' @name isConvexGame\n#' @title isConvexGame - check if TU game is convex.\n#' @description isConvexGame checks if a TU game is convex.\n#'  A TU game is convex if and only if each player's marginal \n#' contribution to any coalition is monotone nondecreasing \n#' with respect to set-theoretic inclusion.\n#' @aliases isConvexGame\n#' @export isConvexGame\n#' @template author/JA\n#' @template author/JS\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 10\n#' @template cites/PETERS_2015\n#' @templateVar PETERS_2015_P p. 329\n#' @template cites/MASCHLER_ET_SOLAN_ET_ZAMIR_2013\n#' @templateVar MASCHLER_ET_SOLAN_ET_ZAMIR_2013_P p. 717 ff.\n#' @template cites/OSBORNE_ET_RUBINSTEIN_1994\n#' @templateVar OSBORNE_ET_RUBINSTEIN_1994_P p. 259 f.\n#' @inheritParams CoopGameBaseParams\n#' @return \\code{TRUE} if the game is convex, else \\code{FALSE}\n#' @examples\n#' #Example of a convex game\n#' library(CoopGame) \n#' A=c(0,0,0,1,2,1,4)\n#' isConvexGame(A)\n#'\n#' #Example of a nonconvex game\n#' library(CoopGame) \n#' A=c(1:7)\n#' isConvexGame(A)\n#' \nisConvexGame<-function(A){\n  isC=GamePropertyConvexity(A)\n  return(determineProperty(isC))\n}\n\nlogicIsConvexGame=function(A){\n  result=list(isConvexGame=TRUE, setsCVal=NULL, sets=NULL)\n  n=getNumberOfPlayers(A)\n  bm=createBitMatrix(n)\n\n\n  for(i in 1:length(A)){\n    S=getPlayersFromBMRow(bm[i,])\n    for(j in (1):length(A)){\n      T=getPlayersFromBMRow(bm[j,])\n      vS=A[indexCoalition(n,S)]\n      vT=A[indexCoalition(n,T)]\n      vSplusvT=vS+vT\n      vSunionT=A[indexCoalition(n,union(S,T))]\n      SintersectT=intersect(S,T)\n      if(length(SintersectT)!=0){\n        vSintersectT=A[indexCoalition(n, SintersectT)]\n      }else{\n        vSintersectT=0\n      }\n\n      if(!((vSunionT+vSintersectT)>=vSplusvT)){\n        result=FALSE\n        return(result$isConvexGame)\n      }\n    }\n  }\n  return(result$isConvexGame)\n}\n\n#' @title GamePropertyConvexity\n#' @noRd\n#' @include GameProperty.R\n#' #@exportClass GamePropertyConvexity\n\nsetClass(\n  \"GamePropertyConvexity\",\n  contains = \"GameProperty\"\n)\n\n#' @title Constructor for GamePropertyConvexity\n#' @noRd\n#' @template author/JA\n#' @name GamePropertyConvexity\n#' #@export\nGamePropertyConvexity<-function(A){\n  retGamePropertyConvexity=methods::new(\"GamePropertyConvexity\",A)\n  return(retGamePropertyConvexity)\n}\n\n#' @rdname determineProperty-methods\n#' @aliases determineProperty,GamePropertyConvexity-method\nsetMethod(\n  \"determineProperty\",\n  signature=\"GamePropertyConvexity\",\n  definition=function(.Object){\n    A<-.Object@A\n    result=logicIsConvexGame(A)\n    return(result)\n  }\n)\n\n\n\n",
    "created" : 1534322522175.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "721055737",
    "id" : "FE7A2DD4",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/GamePropertyConvexity.R",
    "project_path" : "R/GamePropertyConvexity.R",
    "properties" : {
    },
    "relative_order" : 80,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}