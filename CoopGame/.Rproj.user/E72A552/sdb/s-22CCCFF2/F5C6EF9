{
    "collab_server" : "",
    "contents" : "#' @name getCriticalCoalitionsOfPlayer\n#' @title getCriticalCoalitionsOfPlayer\n#' @description The function getCriticalCoalitionsOfPlayer identifies all coalitions for one player\n#' in which that player is critical.\n#' These coalitions are characterized by the circumstance that without this player the other players\n#' generate no value (then also called a losing coalition) - therefore this player is also described as a critical player.\n#' @aliases getCriticalCoalitionsOfPlayer\n#' @export getCriticalCoalitionsOfPlayer\n#' @template author/JA\n#' @template author/JS\n#' @param player represents the observed player\n#' @template cites/DEEGAN_ET_PACKEL_1978\n#' @templateVar DEEGAN_ET_PACKEL_1978_P pp. 151-161\n#' @template param/A \n#' @return A data frame containing all minimal winning coalitions for one special player\n#' @examples \n#' library(CoopGame)\n#' A=c(0,1,0,1,0,1,1)\n#' \n#' #Get coalitions where player 2 is critical:\n#' getCriticalCoalitionsOfPlayer(2,A)\n#' #Output are all coalitions where player 2 is involved.\n#' #Observe that player 2 is dictator in this game.\n#'#\n#'#     V1 V2 V3 cVal bmRow\n#'#  2  0  1  0    1     2\n#'#  4  1  1  0    1     4\n#'#  6  0  1  1    1     6\n#'#  7  1  1  1    1     7\n#'\ngetCriticalCoalitionsOfPlayer<-function(player,A){\n  paramCheckResult=getEmptyParamCheckResult()\n  stopOnInvalidGameVectorA(paramCheckResult,A)\n  stopOnInvalidNumber(paramCheckResult, player)\n  getCoalitionsWherePlayerCritical(player,A)\n}\n\ngetCoalitionsWherePlayerCritical=function(player,A){\n  bmTemp = NULL\n  if(!isSimpleGame(A)){\n    print(\"Game is not simple therefore no minimum winning coalitions can be retrieved.\")\n  }\n  else\n  {\n    n=as.numeric(getNumberOfPlayers(A))\n    bitMatrix = as.data.frame(createBitMatrix(n,A))\n    \n    #rowsToBeRemoved is intended for containing all coalitions where  player is not critical\n    #and which finally get removed before returning a matrix with additional column for referencing according entries in the bit matrix\n    rowsToBeRemoved=c()\n    ci=c(rep(0,n))\n    bm=as.data.frame(bitMatrix)\n    #Get coalitions where player is involved\n    bmTemp=bm[bm[,player]==1,,drop=FALSE]\n    #Ignore these coalitions where coalition value is 0\n    bmTemp=bmTemp[bmTemp[,n+1]!=0,,drop=FALSE]\n    \n    if(nrow(bmTemp)!=0){\n      #add extra column for reference to corresponding bitMatrix row\n      bmTemp=cbind(bmTemp,bmRow=0)\n      \n      for(j in 1:nrow(bmTemp)){\n        bmTempRow=bmTemp[j,]\n        #Get involved players: players u {player}\n        players=getPlayersFromBMRow(bmTempRow)\n        #Remove player from players: players / {player}\n        players=setdiff(players,player)\n        \n        #check if players / {player} is empty\n        if(length(players)==0){\n          #if players without player is empty check if coalition value for only player as coalition's member is equal or smaller than 0\n          #in case condition applies mark for removal and else keep row\n          if(bm[player,\"cVal\"]<=0){\n            rowsToBeRemoved=c(rowsToBeRemoved,j) #mark j for removal\n          }else{\n            ci[player]=ci[player]+bmTempRow[\"cVal\"] # keep row\n            bmTemp[j,\"bmRow\"]=indexCoalition(n,S=player)\n          }\n        }else{\n          ix=indexCoalition(n,S=players) #identify index for corresponding coalition to bmTempRow without player i\n          if(bm[ix,\"cVal\"]==0){\n            ci[player]=ci[player]+bmTempRow[\"cVal\"] # keep row\n            #Write reference for row in bit matrix to bmRow\n            bmTemp[j,\"bmRow\"]=indexCoalition(n,S=c(players,player))\n          }else{\n            rowsToBeRemoved=c(rowsToBeRemoved,j) #mark j for removal\n          }\n        }\n      }\n      if(!is.null(rowsToBeRemoved)){\n        bmTemp=rbind(bmTemp)[-rowsToBeRemoved, , drop = FALSE] # remove rows\n      }\n    }else{\n      bmTemp=NULL\n    }\n  } \n  return(bmTemp)\n}\n\n\n\n",
    "created" : 1536695740683.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "813584294",
    "id" : "F5C6EF9",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/getCriticalCoalitionsOfPlayer.R",
    "project_path" : "R/getCriticalCoalitionsOfPlayer.R",
    "properties" : {
    },
    "relative_order" : 123,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}