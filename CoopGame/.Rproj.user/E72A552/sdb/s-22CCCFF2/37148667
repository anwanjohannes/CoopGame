{
    "collab_server" : "",
    "contents" : "---\ntitle: \"The Abstract Calculation Algorithm of Nucleolus Derivates\"\nauthor: \"Johannes Anwander\"\ndate: \"28 Januar 2018\"\noutput: pdf_document\n---\n\n#### The Abstract Calculation Algorithm of Nucleolus Derivates\n\nThe general solution procedure can be described as follows:\n\n**1st step: initial initialization of the linear program**\n\nIn the first step, the initialization of the linear program is performed in the `initialize` method in the object creation of a child object of nucleolus base.\nIn addition to the assignment of the game vector to the corresponding slot and the creation of an object of the type `LPCoopGameUtils`, both the coefficient matrix  and the border types and border values of the individual restrictions and the decision variables are included initialized to the corresponding vector for the target function coefficients.\nA final call to the `updateLPCoopGameUtils` ensures that the previous GLPK LP solver is initialized according to the data specified in the `LPCoopGameUtils` class.\nFor the developer, there is given the possibility  for necessary adjustments with respect to the complete coefficient matrix to override the method `initLPMatrix`. If the derivative to be implemented only differs in the initial allocation of the structure variable to be minimized, it is sufficient to reimplement the `determineExcessCoefficients`.\nFor deviating initial assignments of the border types and limit values of the individual restrictions as well as the decision variables and destination function coefficients, it is necessary to redefine the methods `initLPRows` or `initLPBndsObjCoefs`.\n\n**2nd step: Sequence of linear programs to determine the unique solution**\n\nThe determination of the unambiguous solution is made after the establishment of the initial linear program in a series of linear programs, controlled by the method `calculateNucleolus`.\nInitially, the `checkGamePreconditions` method checks whether the defined game satisfies the essential property requirement for a clear solution.\nIn this case, in a loop with at most N iterations (in this case the number of restrictions, corresponds to the number of game vector entries in the case of the nucleolus), the following sub-steps are repeatedly run through.\n\n**Partial steps:**\n\na) Solving the current linear program\n\nb) Check for premature abort\n\nc) Updating the Linear Program\n\nd) checking for regular abort,\nhas the respective optimum been found for all restrictions?\n* If YES: Cancel\n* If NO: go back to substep a)\n\nWhile stepping through substeps a to d, either the `checkAbort` method  caused a premature abort, where the method stops with an error message, or the specific point-valued solution is returned afterwards.\nFor the developer, there is also the possibility to intervene in step 2 and to consider specialities of the respective derivative.\nOn the one hand, the developer can define different termination criteria by overriding `checkAbort`, on the other hand, he can also influence the update of the linear program by the method `updateNucleolusBase`.\nThe `updateNucleolusBase` method, in turn, includes calls to methods such as `updateLPMatrix`, `updateLPRows`, and `updateLPBndsObjCoefs`, which can be overwitten as needed. For `updateLPMatrix` there is hardly any need to overwrite it. By default, it only sets the entries of the last column for the structure variable to be minimized from the objective function in the coefficient matrix to 0. This behavior was the same as in all previous implementations.\nOn the other hand, differences in the derivatives are clearly evident with respect to the updating of the border types as well as the limits of the individual restrictions. This was taken into account by reimplementing the `updateLPRows` for large and small deviations of the `getLPRowsBoundsFunc` method.\nThe `getLPRowsBoundsFunc` method is called to determine the respective threshold value - for the restriction where the optimal value was found.\nFor the sake of completeness as well as better separation and to be prepared for any differences, the `updateLPBndsObjCoefs` method is also listed. Although this method bears no logic, it should provide the possibility for adjustment if the barrier values and types as well as the coefficients for the objective function are updated.\nThe following section deals with the respective implementations.",
    "created" : 1537293085077.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2277062756",
    "id" : "37148667",
    "lastKnownWriteTime" : 1537853556,
    "last_content_update" : 1537853556671,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/vignettes/chapters/07/05/03/02/#The_Abstract_Calculation_Algorithm.Rmd",
    "project_path" : "vignettes/chapters/07/05/03/02/#The_Abstract_Calculation_Algorithm.Rmd",
    "properties" : {
    },
    "relative_order" : 135,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}