{
    "collab_server" : "",
    "contents" : "#Date: 20151229\n#File description of myersonValue.R:\n  #File contains functions for calculating the myerson values\n#First section of myersonValue.R contains controller function myersonValue which calls either of myersonValue4vector or myersonValue4cFunc\n  #-myersonValue -> either calls myersonValue4Vector or myersonValue4cFunc\n  #-initialParamCheck_myersonValue -> checks parameters for myersonValue\n#Second section of myersonValue.R contains function myersonValue4cFunc and corresponding parameter check function:\n  #-myersonValue4cFunc.R -> coalition function as input\n  #-initialParamCheck_myersonValue4cFunc -> checks parameters of myersonValue4cFunc.R\n#Third section of myersonValue.R contains function myersonValue4Vector.\n  #-myersonValue4Vector.R\n\n##First section: START\n\n#  Version 1.0\n#  Date: 20151111\n#' @name myersonValue\n#' @title Calculates value for myerson function according to assigned coalition function and a coalition  $\\psubset S$\n#' @description Calculations myerson function vector for given graph by either calling myersonFunction4Vector (when game vector A is specified) or myersonValue4cFunc (coalition function is specified).\n#' @aliases myersonValue\n#' @export myersonValue\n#' @import CoopGame\n#' @author Johannes Anwander\n#' @param L (graph.data.frame) represents network, S expresses the coalition and v the coalition function\n#' used within myerson the myerson function: $v^{ L }(S)=\\Sum{ K\\in S/L }{ }{ v(K) }$\n#' @return returns the value of the myerson function\n#' @examples\n#' dummyVfunc=function(S,...){\n#'  length(S);\n#'}\n#' edgesList=cbind(c(1,3,4),c(2,4,5))\n#' G=graph.data.frame(edgesList)\n#' plot(G)\n#' S=c(\"2\",\"1\")\n#' myersonFunction(G,S,dummyVfunc)\n\n\nmyersonValue=function(A=NULL,v=NULL, G, cFuncV2=FALSE,...){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_myersonValue(paramCheckResult, A, v, G)\n\n  if(!is.null(v)&&(cFuncV2==TRUE)){\n    myersonValue4cFuncV2(v, G, ...)\n  }else if(!is.null(v)){\n    myersonValue4cFunc(v, G,...)\n  }else if(!is.null(A)){\n    myersonValue4Vector(A, G, ...)\n  }\n}\n\n#  Version 1.0\n#  Date: 20151227\n#' @name initialParamCheck_myersonValue\n#' @title initialParamCheck_myersonValue - parameter check for myersonValue\n#' @description initialParamCheck_myersonValue validates parameters passed to myersonValue\n#' @aliases initialParamCheck_myersonValue\n#' @export initialParamCheck_myersonValue\n#' @author Johannes Anwander\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param A represents number of players involved in whole game.\n#' @param v represents coalition function.\n#' @param G represents network.\n#' @examples\n#'   paramCheckResult=getEmptyParamCheckResult()\n#'   initialParamCheck_myersonValue(paramCheckResult,A=c(1:7),v=NULL,G=graph(c(1,2,2,3)))\n\ninitialParamCheck_myersonValue=function(paramCheckResult, A, v , G){\n  #Check for A and v whether both are either NULL or both specified\n  stopOnInvalidDefinitionAorV(paramCheckResult, A, v)\n  #In Case A is not NULL check if A is invalid\n  if(!is.null(A)){\n    stopOnInvalidGameVectorA(paramCheckResult, A)\n    stopOnDifferentPlayersInGameANetworkG(paramCheckResult, A, G)\n  }\n  #In Case v is not NULL check if v is invalid\n  if(!is.null(v)){\n    stopOnInvalidCoalitionFunctionV(paramCheckResult, v)\n  }\n  stopOnInvalidNetworkG(paramCheckResult, G)\n}\n\n##First section: END\n\n##Second section: START\n\n#  Version 1.0\n#  Date: 20151124\n#' @name myersonValue4cFunc\n#' @title myersonValue4cFunc\n#' @description myersonValue4cFunc\n#' @aliases myersonValue4cFunc\n#' @export myersonValue4cFunc\n#' @author Johannes Anwander\n#' @param v represents coalition function\n#' @param G represents network.\n#' @param ... represents further optional arguments passed to coalition function\n#' @return myerson value\n#' @examples\n#'\n\nmyersonValue4cFunc=function(v, G,...){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_myersonValue4cFunc(paramCheckResult, v, G)\n  n=length(V(G))\n  A=generateGameVector(v,n,... )\n  return (myersonValue4Vector(A,G))\n}\n\n#  Version 1.0\n#  Date: 20151227\n#' @name initialParamCheck_myersonValue4cFunc\n#' @title initialParamCheck_myersonValue4cFunc - parameter check for myersonValue4cFunc\n#' @description initialParamCheck_myersonValue4cFunc validates parameters passed to myersonValue4cFunc\n#' @aliases initialParamCheck_myersonValue4cFunc\n#' @export initialParamCheck_myersonValue4cFunc\n#' @import CoopGame\n#' @author Johannes Anwander\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param v represents coalition function.\n#' @param G represents network.\n#' @examples\n#'   paramCheckResult=getEmptyParamCheckResult()\n#'   initialParamCheck_myersonValue4cFunc(paramCheckResult,v=cFuncMaschler,G=graph(c(1,2,2,3)))\n\n\ninitialParamCheck_myersonValue4cFunc=function(paramCheckResult, v, G){\n  stopOnInvalidCoalitionFunctionV(paramCheckResult, v)\n  stopOnInvalidNetworkG(paramCheckResult, G)\n}\n\n##Second section: END\n\n##Third section: START\n\n#  Version: 1.0\n#  Datum: 15.11.2015\n#' @name myersonValue4Vector\n#' @title myerson value for given graph and game vector\n#' @description Calculations myerson function vector for given graph\n#' @aliases myersonValue4Vector\n#' @export myersonValue4Vector\n#' @export initialParamCheck_myersonValue4Vector\n#' @import CoopGame\n#' @author Alexandra Tiukkel\n#' @param A  is a numeric vector of dimension 1x((2^n)-1), n = number of players\n#' @param G  is a graph with edges and nodes (=players) for a cooperate game\n#' @param numberOfPlayers is the number of players in the cooperate game\n#' @return calculated myerson value\n#' @examples\n#' #maschlergame\n#' A=c(0,0,0,60,60,60,72)\n#' edgesList=c(1,2, 2,3)\n#' G<-graph(n = 3, edges = edgesList, directed = FALSE)\n#'\n#' myersonValue4Vector(A, G)\n\nmyersonValue4Vector <- function(A, G) {\n  #check parameters\n  paramCheckResult <- getEmptyParamCheckResult()\n  initialParamCheck_myersonValue4Vector(paramCheckResult, A, G)\n\n  numberOfPlayers=length(V(G))\n  #plot graph\n  plot(G, layout=layout.fruchterman.reingold)\n  #initialize return value\n  shapleyValue = c()\n\n  #first: build myerson function vector from original vector\n  M=generateMyersonVector4Graph(A, G)\n  #calculate shapley value\n  shapleyValue = shapleyValue(M)\n\n  return(shapleyValue)\n}\n\ninitialParamCheck_myersonValue4Vector=function(paramCheckResult, A, G){\n  stopOnInvalidGameVectorA(paramCheckResult, A)\n  stopOnInvalidNetworkG(paramCheckResult, G)\n  stopOnDifferentPlayersInGameANetworkG(paramCheckResult, A, G);\n}\n\n##Third section: END\n\n",
    "created" : 1536699781156.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "156266103",
    "id" : "C5482052",
    "lastKnownWriteTime" : 1495215066,
    "last_content_update" : 1495215066,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CommunicationGames/R/myersonValue.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 132,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}