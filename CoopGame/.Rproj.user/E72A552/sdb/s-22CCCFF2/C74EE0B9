{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to Cooperative Games\"\nauthor: \"Jochen Staudacher\"\ndate: \"15 September 2018\"\noutput: pdf_document\n---\n\n# Introduction to Cooperative Games\n\nThese `first` sentences will go away in the actual \npublication of the vignette. FROM HERE:\nThe field of cooperative game theory is really exciting.\n\nThe field of cooperative game theory is exciting.\n\nThe package CoopGame focusses on a cost-savings approach to\ncooperative games. Let us check that references work correctly:\nBooks by [@BranzeiBook], [@PetersBook], [@PelegSudhoelter], [@DriessenBook],\n[@MaschlerSolanZamir], [@ChakravartyMitraSarkar], [@GillesBook], \n[@NeumannMorgenstern], [@SlikkerNouweland], \n[@OsborneRubinsteinBook],\n[@NarahariBook], [@JacksonBook] and [@StraffinBook]. \nSo much for the books.\n\nSome journal papers: [@LittlechildVaidya] and [@GatelyPaper] \nand [@DeeganPackel] and [@DeeganPackel] and [@HollerPackel] \nas well as [@Sudhoelter1996], [@Sudhoelter1997], \n[@Young1985], [@YoungOkadaHashimoto], [@Tarashnina2011],\n[@vanDammeAumann],\n[@AumannMaschler1985],\n[@Aumann2002], [@Peleg1996], [@Peleg1997],[@AumannMaschlerNTU],\n[@CommonMistakesNucleolus], [@aumann1961core], [@aumann2010some], [@BertiniStach2015], [@rae1969decision], [@konig1998inclusiveness], [@Holler1982], \n[@nevison1978naive], [@deKeijzer2008survey],\n[@barua2012measuring], [@holler1995public],\n[@tijs1982CoreCover], [@gerard1987remarks], \n[@milnor1953reasonable], [@schmeidler1969nucleolus], \n[@peleg2002game], [@AnwanderMaster].\n\nCheck our own paper: [@StaudacherAnwander]\n\nSome proceedings: [@AumannMyerson] and [@BertiniGambarelliStach] \nand [@Stach2016]\nand [@Tijs1981] and [@Weber1988] and [@coleman1971control]\nand [@GilliesThesis]\n\nSome incollections: [@nevison1979structural]\n\nCost games papers: [@Otten], [@YoungCostAllocation],\n[@ParrachinoZaraPatrone], [@TijsDriessen], [@StraffinHeaney].\n\nA paper with some general thoughts [@aumann2004all].\n\nSome stuff CoopGame can not handle: Bargaining sets [@aumann1964bargaining], methods for kernel [@aumann1965method], \ngeneral market games [@aumann1964markets]\n\nCheck semiconvexity [@driessen1985tau].\n\nTwo original papers by Shapley: [@shapley1953value],\n[@shapley1954method] and also [@bondareva1963some],\n[@shapley1967balanced] plus [@ONeill1982problem].\n\nQuote some packages: [@geometry] and [@rgl], [@glpkAPI], [@rcdd]\nOur competitor [@cano2017enjoying].\n\nConvex analysis: [@cddFukuda], [@rockafellar2015convex],\n[@ziegler2012lectures].\n\nTO HERE EVERYTHING WILL BE DELETED LATERON.\n\nToday, the term \ngame theory is mostly interpreted as interactive decision theory,\ni.e. game theorists wish to study how agents take strategic \ndecisions interactively. Since the publication of the seminal \nbook \"Theory of Games and Economic Behavior\" by \nJohn von Neumann and Oskar Morgenstern  [@NeumannMorgenstern] \nin 1944, modern game theory developed into two main branches. \nThese two branches are most frequently referred to as \nnoncooperative game theory and cooperative game theory, \nrespectively. In our understanding of the field we side with \nthe views expressed by Robert Aumann in his \nfamous interview [@vanDammeAumann] with Eric van Damme that \na better name for noncooperative game theory \nwould be \"strategically oriented game theory\" whereas \ncooperative game might be characterized more precisely \nas \"coalitional game theory\" or \"outcome oriented game theory\".\n\n<!-- Borrow introductory thought from P&S -->\n\nSo, to quote Robert Aumann (see [@vanDammeAumann], p. 195) again \n```\n... It is not only strategic interaction.\n```\nIn this spirit our R-package CoopGame is devoted to the study of coalitional games \nwith transferable utility. \n\n## What this package provides and what it does not provide\n\nWe are studying a transferable utility game (TU game) $v$ in \ncharacteristic function form consisting of the \nplayer set $N =\\{ 1, \\dots , n \\}$ and the characteristic\nfunction $v: 2^{N} \\to \\mathbb{R}$ with $v (\\emptyset) = 0$.\nWe specify such a TU game with $n$ players as a (game) vector \nof length $2^n - 1$.\n\n### Specifying a TU game\n\nLet us look at an introductory example of a three-player \nTU game. Let $N= \\{ 1, 2, 3 \\}$ and \n$v: \\mathcal{P}(N) \\to \\mathbb{R}$ \nbe specified as   \n$$ \n\\begin{aligned}\nv(\\emptyset) & =  0, \\\\  \nv(\\{ 1 \\}) & =  0, \\\\\nv(\\{ 2 \\}) & =  0, \\\\ \nv(\\{ 3 \\}) & =  0, \\\\\nv(\\{ 1,2 \\}) & =  100, \\\\ \nv(\\{ 1,3 \\}) & =  115, \\\\ \nv(\\{ 2,3 \\}) & =  125, \\\\\nv(\\{ 1,2,3 \\}) & =  220. \n\\end{aligned}\n$$\nWe may interpret the values of the individual coalitions \nin various ways, e.g. as the worth of a coalition or the \ncost savings of a coalition. In our above example the singleton \ncoalitions have worth zero whereas the grand coalition \n$N= \\{ 1, 2, 3 \\}$ makes a total of $220$ (monetary units). \nIn brief, the \nbasic question in coalitional games with transferable utitly \nis how we can share the worth of $220$ among our three players.\nIn R we can simply specify the above game as a vector $v$ of \nlenght $7$, i.e.\n```{r, collapse=TRUE}\n(v <- c(0,0,0,100,115,125,220))\n```\n\nInternally, we will turn our vector $v$ into an instance \nof our class GameVector \n```{r, collapse=TRUE}\nlibrary(CoopGame)\n(v <- GameVector(c(0,0,0,100,115,125,220)))\n```\nWithin this vignette, we are using the shorthand notations \n$$ v_{i} = v(\\{ i \\}) \\quad \\textrm{for} \\quad i=1, \\dots , n, $$\nfor the singleton coalitions.\n\n### A popular example: The Maschler game\n\nThe Maschler game is nice\n\n### Functionality and structure of the package CoopGame\n\nOur package CoopGame provides functions for \n\n* generating TU games with special structure (see chapter 2 \nof this vignette), like \ne.g. unanimity games, cost games and bankruptcy games \n* checking game properties (see chapter 3 of this vignette), \nlike e.g. superadditivity, convexity and balancedness\n* computing a number of set-valued solution concepts for \nTU games (see chapter 4 \nof this vignette), including the core and various core catchers\n* computing a large array of point-valued solution concepts \nfor TU games (see chapter 5 \nof this vignette), \nincluding the Shapley value, the nucleolus as well as various nucleolus derivatives\n* drawing both set- and point-valued solution concepts \nfor the 3- and 4-player cases (see chapter 6 of this vignette)\n* some general functionality around TU games \n(see section 1.3 of this vignette), like e.g. computing the unanimity coefficients for a given game vector\n\n### Models and questions beyond the scope of CoopGame\n\nCoalitional games can be turned into more realistic \nmodels if, in addition one allows for partitions of the player \nset or specifying an undirected graph connecting the players. \nThe latter case is frequently referred to as a communication \ngame (see e.g. [@SlikkerNouweland]). The authors are currently \ndeveloping additional R packages for both games with partitions \nof the player set as well as communication games. These \nadditional software packages will make use of CoopGame, \nbut CoopGame itself will allow for neither partitions or \ncommunication structures. \nAlso, NTU games, i.e. cooperative games with non-transferable \nutility [@AumannMaschlerNTU], are beyond the scope of \nthis R package.\n\n### This is not a book on cooperative game and these are not lecture notes \n\nThis is only a vignette!\n\nWe refer to book by Peleg and Sudh frequently.\n\n## Some general functionality around cooperative games \n\nIn this section we will introduce some useful functionality \naround cooperative games which we will later use when we \ndiscuss games with special structure, game properties as well as \nset-valued and point-valued solution concepts for cooperative \ngames.\n\n### Zero-normalized and zero-one-normalized games\n\nWe call a cooperative game $v$ **zero-normalized** if \n$$ v_{i} = 0 \\quad \\textrm{for} \\quad i=1, \\dots , n, $$\ni.e. the values of all singleton coalitions are zero \n(see e.g. [@PelegSudhoelter], p. 11).\n\nWe can easily zero-normalize a given game vector $v$ into a \ncorresponding zero-normalized game vector $w$ via \n$$ w (S) = v(S) - \\sum_{i \\in S} v_{i} $$\nfor every coalition $S \\in \\mathcal{P}(N)$ (see e.g. [@BranzeiBook], p. 9).\nIn CoopGame we provide a corresponding function **getZeroNormalizedGameVector**:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nv <- c(30,40,50,90,100,110,180)\n(w <- getZeroNormalizedGameVector(v))\n```\n\nWe call a cooperative game $v$ **zero-one-normalized** if \nit is zero-normalized and for the grand coalition $N$ there \nholds $v(N) = 1$. \nWe can easily zero-one-normalize a given game vector $v$ by \ndividing the zero-normalized game vector $w$ by the value \nof the grand coalition $v(N)$.\nIn CoopGame we provide a corresponding function **getZeroOneNormalizedGameVector**:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nv <- c(30,40,50,90,100,110,180)\n(w01 <- getZeroOneNormalizedGameVector(v))\n```\n\nFor a detailed discussion on the importance of zero-one-normalized \ngames and strategic equivalence we refer the reader to \nthe book by Maschler, Solan and Zamir [@MaschlerSolanZamir], p. 670.\n\n### Why bit matrices are helpful in cooperative game theory\n\nWe introduce the concept of a bit matrix as it is extremely \nuseful for working with cooperative games.\n\n### Marginal contributions\n\nLet our TU game be specified by its characteristic function $v$.\nThen for every player $j \\in N$ and for every coalition \n$S \\in \\mathcal{P}(N)$ with $j \\in S$ we can define the \nso-called **marginal contribution** of player $j$ to coalition $S$ \nas\n$$ v(S) - v(S \\backslash \\{ j \\}), $$\nsee e.g. [@BranzeiBook], pp. 6, or [@PetersBook], pp. 156. \nFor many point- and set-valued solution concepts we need to \nknow the marginal contributions of every player for every \npermutation of the set of players.\nOur function **getMarginalContributions** provides the user \nwith a list of all combinations, i.e. permutations of \nthe players, used and \na corresponding matrix of marginal contributions:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nv <- c(3,4,5,9,10,11,18)\n(MC <- getMarginalContributions(v))\n# Look at all the permutations computed\nMC$combinations\n# Look at the matrix of marginal values \n# corresponding to these permutations\nMC$marginal_values\n```\nIt appears worthwhile to interpret the second line of \nthe marginal values we just computed \n```{r, collapse=TRUE}\nMC$marginal_values[2,]\n```\nalong the lines of the book by Hans Peters [@PetersBook], pp. 156.\nThe above results corresponds to the permutation $(1,3,2)$. \n\n- Player $1$ enters first and contributes $3$. \n- Player $3$ enters second and contributes $11-3=8$. \n- Player $2$ enters last and contributes $18-11=7$. \n\n### The dual game \nLet our TU game be specified by its characteristic function $v$.\nThen we can specify the so-called **dual game** $v^{*}$ \ncorresponding to $v$ via \n$$ v^{*} (S) = v(N) - v(N \\backslash S) $$\nfor every coalition $S \\in \\mathcal{P}(N)$ (see \ne.g. [@PelegSudhoelter], p. 125, or [@BranzeiBook], p.7, \nfor more details. \nOur package CoopGame provides a function **getDualGameVector**:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nv <- c(3,4,5,9,10,11,18)\n# Compute dual game vector\n(vStar <- getDualGameVector(v))\n```\n\n### The utopia payoff vector \nIn cooperative game theory the so-called \n**utopia payoff** of player $j$ is defined as \n$$ M_{j} = v(N) - v(N \\backslash \\{ j \\}) \\quad \\textrm{for} \\quad j=1, \\dots , n,$$\ni.e. the utopia payoff $M_{j}$ is the \nmarginal contribution of player $i$ to the grand \ncoalition $N$ (see e.g. [@BranzeiBook], p. 20). \nOur package CoopGame provides a function \n**getUtopiaPayoff** for computing a vector of \nutopia payoffs for every player:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nv <- c(3,4,5,9,10,11,18)\n# Compute utopia payoff vector for specified game v\n(M <- getUtopiaPayoff(v))\n```\nIt is clear that player $j$ can not ask for more \nthan $M_{j}$ in the grand coalition.\nThe utopia payoff vector \nwill lateron play a role in defining game properties \nas well as point- and set-valued solution concepts. \n\n### The minimal rights vector \nThe so-called remainder $R(S, j)$\nof player $j$ in coalition $S \\in \\mathcal{P(N)}$ is \nthe amount which remains for player $j$ if the \ncoalition $S$ forms and the rest of the players in \ncoalition $S$ all obtain their \nindividual utopia payoffs, i.e.\n$$ R(S,j) = v(S) - \\sum_{k \\in S, k \\neq j} M_{k}. $$ \nWe can define a vector of **minimal rights** with components \n$$ m_{j} = \\max_{S: j \\in S} R(S,j),  \\quad \\textrm{for} \n\\quad j=1, \\dots , n,$$\nsince player $j$ has a justification to demand at \nleast $m_{j}$ in the grand coalition, \nsee e.g. the book by Branzei et al. [@BranzeiBook], p. 20.  \nOur package CoopGame provides a function \n**getMinimalRights** for computing a vector of \nminimal rights for every player:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nv <- c(2,3,4,8,9,10,13)\n# Compute utopia payoff vector for specified game v\n(M <- getUtopiaPayoff(v))\n# Compute minimal rights vector for specified game v\n(m <- getMinimalRights(v))\n```\n\n### The excess coefficients\n\nThe excess $e(S,x)$ of a coalition $S$ with respect to a vector \n$x$ measures the gain or loss of the members of $S$ in case they \ndecide to abandon the grand coalition $N$ in favour of their \nown coalition $S$, see e.g. [@DriessenBook], p. 12:\n\n$$ e(S,x) = v(S) - \\sum_{j \\in S} x_{j} = v(S) - x(S)$$, \nwhere we use the \nshorthand notation $x(S) =  \\sum_{j \\in S} x_{j}$.\n\nThe package CoopGame provides a function \n**getExcessCoefficients** for computing a vector of \nexcess coefficients for every coalition:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nA <-c(3,4,5,9,10,11,18)\nx <-c(5,6,7)\n# Compute vector of excess coefficients for specified game v\n(ec <- getExcessCoefficients(A,x))\n```\nNote that the last component of a vector of excess coefficients \nis always $0$ as long as $x$ is efficient, i.e. \n$\\sum_{j \\in S} x_{j} = x(N)$.\n\nThe concept of excesses is important is various \nsolution concepts, like e.g. the \nnucleolus [@schmeidler1969nucleolus]. \nComputing a vector of excesses comes in handy for checking \nthe correctness of nucleolus or prenucleolus computations, see [@CommonMistakesNucleolus].\n\n### The gap function\nThe gap function is the additive inverse of the vector of \nexcesses with respect to the utopia vector.\nThe package CoopGame provides a function \n**getGapFunctionCoefficients** for computing the vector of \ngap function coefficients for every coalition:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nA <-c(3,4,5,9,10,11,18)\n# Compute vector of gap function coefficients for specified game v\n(gap <- getGapFunctionCoefficients(A))\n```\n\n### The per capita excess coefficients\nPer per capita excess coefficients replace excess coefficients \nin the computation of the per capita nucleolus [@Young1985].\nThe function \n**getPerCapitaExcessCoefficients** computes a vector of \nper capita excess coefficients for every coalition \nand a vector $x$, \ni.e. the excess coefficients are divided by the number \nof players in each coalition:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nA <-c(3,4,5,9,10,11,18)\nx <-c(5,6,7)\n# Compute vector of per capita excess coefficients for specified game v\n(ecpc <- getPerCapitaExcessCoefficients(A,x))\n```\n\nComputing a vector of per capita excess coefficients \ncomes in handy for checking \nthe correctness of computations\nof the per capita nucleolus, see [@CommonMistakesNucleolus].\n\n### Propensities to disrupt\nFor a cooperative game $v$ and a payoff vector $x$ with $\\sum_{j=1}^{n} x_{j} = v(N)$\nplayer $i$'s propensity to disrupt (see e.g. [@LittlechildVaidya] is defined as  \n$$\nd(i,x) = \\frac{\\sum_{j=1,j \\neq i}^{n} x_{j} - v(N \\backslash \\{ i \\})}{x_{i} - v_{i}}\n$$\nThe above expression quantifies the disruption caused \nif player $i$ breaks away from the grand coalition.\nWithin this expression the \ndenominator stands for the loss incurred by \nplayer $i$ for breaking away from the grand coalition, \nwhereas the numerator stands for the joint loss of the \nrest of the players due to the breakup caused by player $i$.\nThis concept is important in solution concepts like the \nGately point (see [@GatelyPaper],\n[@LittlechildVaidya], [@StaudacherAnwander]) and \nthe disruption nucleolus [@LittlechildVaidya]. \n\nThe function \n**getVectorOfPropensitiesToDisrupt** computes a vector of \npropensities to disrupt for every coalition \nand a vector $x$:\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nA <-c(3,4,5,9,10,11,18)\nx <-c(5,6,7)\n# Compute vector of propensities to disrupt for specified game v\n(propVec <- getVectorOfPropensitiesToDisrupt(A,x))\n```\nNote that the last component of a vector of propensities \nto disrupt \nis always set to $0$.\nComputing a vector of coefficients \nof propensities to disrupt \ncomes in handy for checking \nthe correctness of computations\nof the disruption nucleolus, see [@CommonMistakesNucleolus].\n\n### Minimum Winning coalitions and real gaining coalitions\nIn a simple game $v$ we call a player $j$ critical for \na coalition $S$ if the departure of player $j$ turns \n$S$ from a winning coalition into a losing coalition, \ni.e. $v(S)=1$ and $v(S \\backslash j)=0$.\nA minimum winning coalition in a simple game is a coalition \nwhere every member of the coalition is critical, see e.g. \n[@DeeganPackel] or [@Holler1982].\nThe function **getMinimumWinningCoalitions** \nidentifies all minimal winning coalitions\nin a simple game $v$ and returns a corresponding \ndata frame. The function\n**getCriticalCoalitionsOfPlayer** \nidentifies all coalitions for which a given player \nis critical.\n```{r, collapse=TRUE}\nlibrary(CoopGame)\n# Define a simple game\nA <-c(0,0,0,1,1,0,1)\n# Find the minimum winning coalitions\ngetMinimumWinningCoalitions(A)\n# Find the coalitions where player 2 is critical\ngetCriticalCoalitionsOfPlayer(2,A)\n```\nThe concept of minimum winning coalitions \ncan be generalized to general cooperative \ngames $v$ via the concept of real gaining \ncoalitions (see e.g. [@holler1995public], [@BertiniStach2015]) \nvia our function **getRealGainingCoalitions**.\n$S$ is called\na real gaining coalition (RGC) iff\nfor any true subset $T \\subset S$ there holds $v(S)-v(T) > 0$.\n```{r, collapse=TRUE}\nlibrary(CoopGame)\nA <-c(0,0,0,0.8,0.9,0,0.9)\n# Find the real gaining coalitions\ngetRealGainingCoalitions(A)\n```\n\n### The unanimity coefficients\nThe unanimity coefficients represent a \ncooperative game in an alternative basis, \nthe so-called unanimity basis. \nThey were introduced in the seminal paper \nby Shapley [@shapley1953value] \nand are also called Harsanyi dividends (\nsee also the books \n[@PelegSudhoelter], p. 152 f., or [@GillesBook], \np. 15 f.). \n\nOur package provides a function **getUnanimityCoefficients**.\n\n```{r, collapse=TRUE}\nlibrary(CoopGame)\n# The Maschler game\nA <-c(0,0,0,60,60,60,72)\n# Find the unanimity coefficients for the Maschler game\n(unCoeff <- getUnanimityCoefficients(A))\n```\n\n### The k-cover\n\nIn [@DriessenBook], p. 173, Driessen defines an associated cover \n$v_{k}$ that majorizes the original game $v$ for a given integer $k$.\n$$\nv_{k} = \\left\\{\n\\begin{array}{rl}\nv & \\text{if } \\vert S \\vert < k,\\\\\nv(N) - \\sum_{j \\in N \\backslash S} x_{j} & \\text{else,}\n\\end{array} \\right. \n$$\nwith $x$ denoting the utopia payoff. \nIn case the gap function $g$ of original game $v$ satisfies \n$$0 \\leq g(N) \\leq g(S)$$\nfor all coalitions $S \\subseteq N$ with $k$ or more elements,\nthen $v_{k}$ is called \nthe k-cover of the game $v$. In CoopGame we provide a function \n**getkCover** computing $v_{k}$ according to the above formula \nregardless whether $v$ satisfies the above condition or not.\nStill, we wish to stress that this concept is most sensible \nfor 1-convex games from our point of view.\n\n```{r, collapse=TRUE}\nlibrary(CoopGame)\n# Example from book by T. Driessen, p. 75\nA=c(0,0,0,9,9,15,18)\n# Compute 1-cover of this 1-convex game\n(A1 <- getkCover(A,k=1))\n```\n\n\n## Cooperative game theory in the R Ecosystem\n\nMention two existing R packages on cooperative game theory.\n\nWhy did we find it sensible to develop CoopGame.\n\nMention restriction to number of players.\n\nNot more than $20$ players allowed!\n\nA minimum of two players is needed!!\n\nMention that we do not deal with the null game!!\n\nUser might be asked whether she wants to continue ...",
    "created" : 1530277341967.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "348966327",
    "id" : "C74EE0B9",
    "lastKnownWriteTime" : 1537469873,
    "last_content_update" : 1537469873692,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/vignettes/chapters/01/#IntroToCooperativeGames.Rmd",
    "project_path" : "vignettes/chapters/01/#IntroToCooperativeGames.Rmd",
    "properties" : {
    },
    "relative_order" : 27,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}