{
    "collab_server" : "",
    "contents" : "#' @name cFuncCostSharingValue\n#' @title cFuncCostSharingValue\n#' @description \\strong{Coalition value for a cost sharing game:} \\cr\n#' For further information see \\link{cFuncCostSharing} \n#' @aliases cFuncCostSharingValue\n#' @export cFuncCostSharingValue\n#' @template author/JA\n#' @template author/JS\n#' @template param/S\n#' @template param/Costs\n#' @return The return is a numeric carrying the win of coalition S compared to taking part in single coalitions\n#' @examples\n#' #Example on 3 students sharing appartment:\n#' #-------------------------------\n#' #| costs     |  A  |  B  |  C  |\n#' #- -----------------------------\n#' #|single     | 300 | 270 | 280 |\n#' #|appartment |     |     |     |\n#' #-------------------------------\n#' #\n#' #Appartment for 2 persons => costs: 410\n#' #Appartment for 3 persons => costs: 550\n#' \n#' #Savings when A and B share appartment\n#' cFuncCostSharingValue(S=c(1,2),Costs=c(300,270,280,410,410,410,550))\n#'#Output: 160\n#'\ncFuncCostSharingValue<-function(S,Costs){\n  paramCheckResult=getEmptyParamCheckResult()\n  stopOnInvalidCoalitionS(paramCheckResult,S, n=getNumberOfPlayers(Costs))\n  logicCFuncCostSharingValue(S,Costs)\n}\n\n\n#' @name cFuncCostSharingVector\n#' @title cFuncCostSharingVector\n#' @description \\strong{Coalition vector for a cost sharing game:} \\cr\n#' For further information see \\link{cFuncCostSharing} \n#' @aliases cFuncCostSharingVector\n#' @export cFuncCostSharingVector\n#' @template author/JA\n#' @template author/JS\n#' @template param/n\n#' @template param/Costs\n#' @return The return is a numeric vector carrying the wins of each coalition S compared to taking part in single coalitions\n#' @examples\n#' #Example on 3 students sharing appartment:\n#' #-------------------------------\n#' #| costs     |  A  |  B  |  C  |\n#' #- -----------------------------\n#' #|single     | 300 | 270 | 280 |\n#' #|appartment |     |     |     |\n#' #-------------------------------\n#' #\n#' #Appartment for 2 persons => costs: 410\n#' #Appartment for 3 persons => costs: 550\n#' \n#' #Savings for all combinations sharing appartment\n#' (A=cFuncCostSharingVector(n=3, Costs=c(300,270,280,410,410,410,550)))\n#'#Output: 0   0   0 160 170 140 300\ncFuncCostSharingVector<-function(n,Costs){\n  gameVector <- cFuncCostSharing(n,Costs)@A\n  return(gameVector)\n}\n\n\nlogicCFuncCostSharingValue=function(S,Costs){\n  # C same structure as game vector A therefore number of player can be determined by same structure\n  numberOfPlayers=getNumberOfPlayers(A=Costs)\n  \n  #Saves costs for all players out of set S under the single coalition assumption  \n  costsOfSingleCoaltions=0\n  \n  #Saves costs for coalition S\n  costsOfCoaltionS=0\n  \n  #win of coalition S\n  winOfCoalitionS=0\n  \n  #Determines possible savings/losses by taking part in coalition S for all players of S\n  indexOfS=indexCoalition(n = numberOfPlayers, S)\n  costsOfSingleCoaltions=sum(Costs[as.numeric(S)])\n  costsOfCoaltionS=Costs[indexOfS]\n  winOfCoalitionS=costsOfSingleCoaltions-costsOfCoaltionS\n  \n  return(winOfCoalitionS)\n}\n\n\n#' @title cFuncCostSharing - class for cost sharing coalition game\n#' @description Class for cost sharing coalition function,\n#' inherits methods and slots from class \\linkS4class{CoopGameCFunc}.\n#' @include CoopGameCFunc.R\n#' @exportClass cFuncCostSharing\n#' @template slot/Costs\n\nsetClass(\n  \"cFuncCostSharing\",\n  representation(Costs=\"numeric\"),\n  contains = \"CoopGameCFunc\"\n)\n\nsetMethod(\n  f=\"initialize\",\n  signature = \"cFuncCostSharing\",\n  definition=function(.Object,...,Costs){\n    .Object@Costs=Costs\n    .Object<-methods::callNextMethod(.Object, ...)\n    return(.Object)\n  }\n)\n\n#' @title Constructor for cFuncCostSharing\n#' @description \\strong{Constructor for a cost sharing game:} \\cr\n#' The user may specify the cost function of a cost allocation\n#' problem. A corresponding savings game will be calculated.\n#' The savings game specified by the game vector \\code{A} \n#' will work like an ordinary TU game.\n#' @template author/JA\n#' @template author/JS\n#' @template param/n\n#' @template param/Costs\n#' @return An S4 object representing the specified cost game\n#' @name cFuncCostSharing\n#' @export\n#' @section Related Functions: \n#' \\link{cFuncCostSharingValue}, \\link{cFuncCostSharingVector}\n#' @examples \n#' #Example on 3 students sharing appartment:\n#' #-------------------------------\n#' #| costs     |  A  |  B  |  C  |\n#' #- -----------------------------\n#' #|single     | 300 | 270 | 280 |\n#' #|appartment |     |     |     |\n#' #-------------------------------\n#' #\n#' #Appartment for 2 persons => costs: 410\n#' #Appartment for 3 persons => costs: 550\n#' \n#' #Savings for all combinations sharing appartment\n#' (v <- cFuncCostSharing(n=3, Costs=c(300,270,280,410,410,410,550)))\n#'#An object of class \"cFuncCostSharing\"\n#'#Output:\n#'#Slot \"Costs\":\n#'#[1] 300 270 280 410 410 410 550\n#'#\n#'#Slot \"A\":\n#'#An object of class \"GameVector\"\n#'#[1]   0   0   0 160 170 140 300\n#'#\n#'#Slot \"n\":\n#'#[1] 3\n#'\ncFuncCostSharing<-function(n,Costs){\n  retCFuncCostSharing=methods::new(\"cFuncCostSharing\",n=n,Costs=Costs)\n  return(retCFuncCostSharing)\n}\n\n#' @rdname getCoalitionValue-methods\n#' @aliases getCoalitionValue,cFuncCostSharing-method\nsetMethod(\n  \"getCoalitionValue\",\n  signature=\"cFuncCostSharing\",\n  definition=function(.Object,S,...){\n    return(logicCFuncCostSharingValue(S,Costs=.Object@Costs))\n  }\n)\n\n\n",
    "created" : 1536399698475.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1826200768",
    "id" : "8AF6DFB2",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/cFuncCostSharing.R",
    "project_path" : "R/cFuncCostSharing.R",
    "properties" : {
    },
    "relative_order" : 91,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}