{
    "collab_server" : "",
    "contents" : "#' @name publicHelpChiValue\n#' @title publicHelpChiValue\n#' @description Calculates the (normalized) Public Help Chi Value for a nonnegative TU game.\n#' @aliases publicHelpChiValue publicHelpChiValue publicHelpChiValueChi\n#' @export publicHelpChiValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @return Public Help Value for specified nonnegative TU game \n#' @examples \n#' A=c(0,0,0,2,2,0,2)\n#' publicHelpChiValue(A) \n#' #[1] 0.9166667 0.5416667 0.5416667\npublicHelpChiValue<-function(A)\n{\n  retVal = NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any (normalized) public help chi value.\")\n  }\n  else\n  {\n    phvchi=PublicHelpChiValueConcept(A)\n    n = as.numeric(getNumberOfPlayers(A))\n    N = length(A)\n    phvchics=calculatePointSolution(phvchi)\n    phvres = numeric(n)\n    phvres[1:n]=(phvchics[1:n]/phvchics[n+1])*A[N]\n    retVal = phvres\n  }\n  return(retVal)\n}\n\n#' @name absolutePublicHelpChiValue\n#' @title absolutePublicHelpChiValue\n#' @description Calculates the absolute Public Help Chi Value for a specified nonnegative TU game.\n#' Note that in general the absolute Public Help Chi Value is not an \n#' efficient vector, i.e. the sum of its entries is not always 1. Hence no \n#' drawing routine for the absolute Public Help Chi Value is provided.\n#' @aliases absolutePublicHelpChiValue absolutePublicHelpValueChi\n#' @export absolutePublicHelpChiValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @return Absolute Public Help Value for specified simple game \n#' @examples \n#' A=c(0,0,0,2,2,0,2)\n#' absolutePublicHelpChiValue(A) \n#' #[1] 1.2222222 0.7222222 0.7222222\n#' \nabsolutePublicHelpChiValue<-function(A)\n{\n  retVal = NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any public help chi value.\")\n  }\n  else\n  {\n    phv=PublicHelpChiValueConcept(A)\n    phvcs=calculatePointSolution(phv)\n    n = as.numeric(getNumberOfPlayers(A))\n    retVal = phvcs[1:n]\n  }\n  return(retVal)\n}\n\n\n\nlogicPublicHelpChiValue=function(A){\n  retVal = NULL\n  if(!isNonnegativeGame(A)){\n    print(\"Game is not nonnegative. Therefore we do not compute any Public Help Value.\")\n  }\n  else\n  {\n    n=getNumberOfPlayers(A)\n    bm=createBitMatrix(n,A)\n    retVal = numeric(n+1)\n    #the gaining coalitions\n    gcs=bm[bm[,\"cVal\"]>0,,drop=FALSE]\n    tempVar1 <- numeric(n)\n    tempVar2 <- 0\n    sum <- 0\n    for (i in 1:nrow(gcs))\n    {\n      playersInCoalition = getPlayersFromBMRow(bmRow=gcs[i,])\n      noPlayersInCoalition = length(playersInCoalition)\n      value = gcs[[i,\"cVal\"]]\n      for (j in 1:noPlayersInCoalition)\n      {\n        tempVar1[playersInCoalition[j]] = tempVar1[playersInCoalition[j]] + value/(noPlayersInCoalition^2)\n      }\n      tempVar2 = tempVar2 + value/noPlayersInCoalition\n    }\n    retVal[1:n]=tempVar1\n    retVal[n+1]=tempVar2\n  }\n  return(retVal)\n}\n\n#' @title PublicHelpChiValueConcept\n#' @noRd\n#' @description PublicHelpChiValueConcept\n#' @include PointSolutionConcept.R\n# @exportClass PublicHelpChiValueConcept\n\nsetClass(\n  \"PublicHelpChiValueConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @rdname calculatePointSolution-methods\n#' @aliases calculatePointSolution,PublicHelpChiValueConcept-method\nsetMethod(\n  \"calculatePointSolution\",\n  signature=\"PublicHelpChiValueConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicPublicHelpChiValue(A))\n  }\n)\n\n#' @title Constructor for PublicHelpChiValueConcept\n#' @noRd\n#' @template author/JS\n#' @name PublicHelpChiValueConcept\n#' #@export\nPublicHelpChiValueConcept<-function(A){\n  retPublicHelpChiValue=methods::new(\"PublicHelpChiValueConcept\",A)\n  return(retPublicHelpChiValue)\n}\n\n\n\n#' @name drawPublicHelpChiValue\n#' @title drawPublicHelpChiValue for 3 or 4 players\n#' @description drawPublicHelpChiValue draws the (normalized) Public Help Value for 3 or 4 players.\n#' @aliases drawPublicHelpChiValue\n#' @export drawPublicHelpChiValue\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @return Draws (normalized) Public Help Chi value for given game vector with 3 or 4 players\n#' @examples\n#' A=c(0,0,0,1,1,0,1)\n#' drawPublicHelpChiValue(A) \ndrawPublicHelpChiValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Normalized Public Help Chi Value\"){\n  A=GameVector(A)\n  sm=publicHelpChiValue(A);\n  visualize(A, pointsToDraw=sm, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1536695295151.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3801345466",
    "id" : "AE35852E",
    "lastKnownWriteTime" : 1536091312,
    "last_content_update" : 1536091312,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/PublicHelpChiValueConcept.R",
    "project_path" : "R/PublicHelpChiValueConcept.R",
    "properties" : {
    },
    "relative_order" : 120,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}