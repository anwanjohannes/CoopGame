{
    "collab_server" : "",
    "contents" : "#' @name coreCoverVertices\n#' @title coreCoverVertices\n#' @description Calculates the core cover for given game vector A.\n#' @aliases coreCoverVertices\n#' @import rcdd\n#' @importFrom grDevices chull\n#' @export coreCoverVertices\n#' @template author/JS\n#' @template cites/TIJS_LIPPERTS_1982\n#' @templateVar TIJS_LIPPERTS_1982_P pp. 27--37\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 21 ff.\n#' @inheritParams CoopGameBaseParams\n#' @return rows of the matrix are the vertices of the core cover\n#' @examples\n#' library(CoopGame)\n#' A <- c(0,0,0,3,3,3,6)\n#' coreCoverVertices(A)\n#' #       [,1] [,2] [,3]\n#' # [1,]    3    0    3\n#' # [2,]    0    3    3\n#' # [3,]    3    3    0\ncoreCoverVertices<-function(A){\n  wv=CoreCoverConcept(A)\n  payoffSpace=calculateSetSolution(wv)\n  return(payoffSpace@VRepMatrix)\n}\n\n\nlogicCoreCoverVertices <- function(A){ \n  numberOfPlayers = getNumberOfPlayers(A)\n    if(isEssentialGame(A) == TRUE){\n      M <- getUtopiaPayoff(A)\n      m <- getMinimalRights(A)\n      matrixA1_help1 = diag(rep(-1,numberOfPlayers))\n      matrixA1_help2 = diag(rep(1,numberOfPlayers))\n      matrixA1 <- rbind(matrixA1_help1, matrixA1_help2)\n      matrixA2 = matrix(rep(-1,numberOfPlayers),nrow = 1)\n      vectorB1 <- c(-m,M)\n      vectorB2 = -A[length(A)]\n      \n      # Utilize the R-Package rcdd\n      hRepresentation = makeH(matrixA1,vectorB1,matrixA2,vectorB2)\n      vRepresentation = scdd(hRepresentation)\n      \n      #Transform the V-Representation into a matrix\n      VectorCounter = length(vRepresentation[[1]]) / (numberOfPlayers + 2)\n      OutcomeVector = vRepresentation[[1]][(VectorCounter * 2 + 1):(length(vRepresentation[[1]]))]\n      ResultMatrix = matrix(OutcomeVector, VectorCounter, numberOfPlayers)   \n      \n      if(numberOfPlayers == 3)\n      {\n        sequencevector = grDevices::chull(ResultMatrix)\n        OutcomeMatrix = ResultMatrix[sequencevector,,drop=FALSE]\n      }\n      else\n      {\n        OutcomeMatrix = ResultMatrix\n      }\n    }\n    else\n    {\n      print(\"The core cover is empty\")\n      OutcomeMatrix = matrix(ncol = numberOfPlayers,nrow = 0)\n    }\n  return(OutcomeMatrix)\n}\n\n#' @title CoreCoverConcept - class for core cover concept\n#' @noRd\n#' @include SetSolutionConcept.R\n#' #@exportClass CoreCoverConcept\n\nsetClass(\n  \"CoreCoverConcept\",\n  contains = \"SetSolutionConcept\"\n)\n\n#' @title Constructor for CoreCoverConcept\n#' @noRd\n#' @template author/JA\n#' @name CoreCoverConcept\n#' @include PayoffSpace.R\n#' #@export\nCoreCoverConcept<-function(A){\n  retCoreCoverConcept=methods::new(\"CoreCoverConcept\",A)\n  return(retCoreCoverConcept)\n}\n\n#' @rdname getSetSolutionVertices-methods\n#' @aliases getSetSolutionVertices,CoreCoverConcept-method\nsetMethod(\n  \"getSetSolutionVertices\",\n  signature=\"CoreCoverConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    VRep=(logicCoreCoverVertices(A))\n    return(VRep)\n  }\n)\n\n\n#' @name belongsToCoreCover\n#' @title belongsToCoreCover for every number of players\n#' @description Checks, if the point is in the core cover\n#' @aliases belongsToCoreCover\n#' @import geometry\n#' @import rcdd\n#' @export belongsToCoreCover\n#' @template author/JA\n#' @template cites/TIJS_LIPPERTS_1982\n#' @templateVar TIJS_LIPPERTS_1982_P pp. 27--37\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 21 ff.\n#' @template param/x\n#' @inheritParams CoopGameBaseParams\n#' @return \\code{TRUE} if point belongs to core cover, \\code{FALSE} otherwise\n#' @examples\n#' library(CoopGame)\n#' A <- c(0,0,0,3,3,3,6)\n#' belongsToCoreCover(x=c(2,2,2),A)\n#' #[1] TRUE\n#' belongsToCoreCover(x=c(1,2,4),A)\n#' #[1] FALSE\n\nbelongsToCoreCover<-function(x,A){\n  ccv=coreCoverVertices(A) \n  ps=PayoffSpace(VRepMatrix=ccv)\n  return(isElementOfPayoffSpace(ps,x=x))\n}\n\n#' @name drawCoreCover\n#' @title drawCoreCover for n players\n#' @description drawCoreCover draws the Core Cover for 3 or 4 players.\n#' @aliases drawCoreCover\n#' @export drawCoreCover\n#' @import rgl\n#' @template author/JA\n#' @template cites/TIJS_LIPPERTS_1982\n#' @templateVar TIJS_LIPPERTS_1982_P pp. 27--37\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 21 ff.\n#' @inheritParams  CoopGameBaseParams\n#' @inheritParams visualize\n#' @examples\n#' library(CoopGame)\n#' A <- c(0,0,0,3,3,3,6)\n#' drawCoreCover(A)\ndrawCoreCover<-function(A,holdOn=FALSE, colour = NA , label=FALSE, name = \"Core Cover\"){\n  A=GameVector(A)\n  co=coreCoverVertices(A);\n  visualize(A, pointsToDraw=co, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1534322345999.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3183090210",
    "id" : "B5AD272D",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/CoreCoverConcept.R",
    "project_path" : "R/CoreCoverConcept.R",
    "properties" : {
    },
    "relative_order" : 77,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}