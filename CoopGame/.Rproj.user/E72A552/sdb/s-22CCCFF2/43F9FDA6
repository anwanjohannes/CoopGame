{
    "collab_server" : "",
    "contents" : "#' @name isMonotonicGame\n#' @title isMonotonicGame\n#' @description Checks if a TU game for n players is monotonic. \\cr\n#' For a monotonic game a coalition \\code{S} can never obtain \n#' a larger value than another coalition  \\code{T} if \\code{S}\n#' is contained in \\code{T}.\n#' @export isMonotonicGame\n#' @template author/JA\n#' @template author/JS\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 12\n#' @template cites/NARAHARI_2015\n#' @templateVar NARAHARI_2015_P p. 408 \n#' @inheritParams CoopGameBaseParams\n#' @return \\code{TRUE} if the game is monotonic, else \\code{FALSE}\n#' @examples\n#' #Example of a non-monotonic game\n#' library(CoopGame)\n#' A=c(4,2,5,2,3,6,10)\n#' isMonotonicGame(A)\n#' \n#' #Example of a monotonic game\n#' library(CoopGame)\n#' A=c(2,5,7,10, 9, 13,20)\n#' isMonotonicGame(A)\n#'\nisMonotonicGame<-function(A){\n  isMG=GamePropertyMonotonicity(A)\n  return(determineProperty(isMG))\n}\n\nlogicIsMonotonicGame<-function(A){\n   boolRetVal=TRUE\n   n=getNumberOfPlayers(A)\n   N=length(A)\n   bm=as.data.frame(createBitMatrix(n,A))\n   players=1:n\n   for(i in N:indexLower(n,2)){\n     involvedPlayers=getPlayersFromBMRow(bm[i,])\n     uninvolvedPlayers=players[-involvedPlayers]\n     corrCVals=getCorrespondingCVals(bm[1:(i-1),],uninvolvedPlayers)\n     allSmallerOrEqual=all(corrCVals<=bm[i,\"cVal\"])\n     if(!allSmallerOrEqual){\n       boolRetVal=FALSE\n       break\n     }\n   }\n   return(boolRetVal)\n}\n\n#Identifies all coalition values where (by uninvolvedPlayers) specified players\n#are not participating\ngetCorrespondingCVals<-function(bmDataFrame,uninvolvedPlayers){\n  exp=paste0(\"(\",paste(c(\"0\",colnames(bmDataFrame)[c(uninvolvedPlayers,FALSE)],\"0\"),collapse = \"|\"),\")\")\n  entries=subset(bmDataFrame[,],!(eval(parse(text=exp))==1),\"cVal\")\n  return(entries)\n}\n\n#' @title GamePropertyMonotonicity\n#' @noRd\n#' @include GameProperty.R\n#' #@exportClass GamePropertyMonotonicity\n\nsetClass(\n  \"GamePropertyMonotonicity\",\n  contains = \"GameProperty\"\n)\n\n#' @title Constructor for GamePropertyMonotonicity\n#' @noRd\n#' @template author/JA\n#' @name GamePropertyMonotonicity\n#' #@export\nGamePropertyMonotonicity<-function(A){\n  retGamePropertyMonotonicity=methods::new(\"GamePropertyMonotonicity\",A)\n  return(retGamePropertyMonotonicity)\n}\n\n#' @rdname determineProperty-methods\n#' @aliases determineProperty,GamePropertyMonotonicity-method\nsetMethod(\n  \"determineProperty\",\n  signature=\"GamePropertyMonotonicity\",\n  definition=function(.Object){\n    A<-.Object@A\n    result=logicIsMonotonicGame(A)\n    return(result)\n  }\n)\n",
    "created" : 1536404936714.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4190162415",
    "id" : "43F9FDA6",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/GamePropertyMonotonicity.R",
    "project_path" : "R/GamePropertyMonotonicity.R",
    "properties" : {
    },
    "relative_order" : 100,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}