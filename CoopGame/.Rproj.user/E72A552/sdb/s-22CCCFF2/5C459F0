{
    "collab_server" : "",
    "contents" : "#' @name cFuncBankruptcyValue\n#' @title cFuncBankruptcyValue\n#' @description \\strong{Coalition value for a specified Bankruptcy game:} \\cr\n#' For further information see \\link{cFuncBankruptcy}\n#' @export cFuncBankruptcyValue\n#' @template author/JS\n#' @template cites/AUMANN_ET_MASCHLER_1985\n#' @templateVar AUMANN_ET_MASCHLER_1985_P pp. 195 -- 213\n#' @template cites/AUMANN_2002\n#' @template param/S\n#' @template param/d\n#' @template param/E\n#' @return A positive value if the sum of the claims outside of coalition 'S' is less than \\code{E}\n#' else \\code{0}\n#' @examples\n#' cFuncBankruptcyValue(S=c(1,2),d=c(1,2,3),E=4)\n#' #Output\n#' #[1] 1\n\ncFuncBankruptcyValue<-function(S,d,E){\n  paramCheckResult=getEmptyParamCheckResult()\n  stopOnInvalidCoalitionS(paramCheckResult,S, n=length(d))\n  stopOnInvalidClaimsVector(paramCheckResult,n=length(d),d)\n  logicCFuncBankruptcyValue(S,d,E)\n}\n\n\nlogicCFuncBankruptcyValue=function(S, d, E) {\n\n  result = 0\n  sumOtherClaims <- 0\n  players <- 1:length(d)\n  uninvolvedPlayers=players[-S]\n\n  for(p in uninvolvedPlayers){\n    sumOtherClaims = sumOtherClaims + d[p]\n  }\n\n  if (sumOtherClaims >= E) {\n    result = 0\n  } else {\n    result = E - sumOtherClaims\n  }\n  return(result)\n}\n\n\n#' @name cFuncBankruptcyVector\n#' @title cFuncBankruptcyVector\n#' @description \\strong{Game vector for a specified Bankruptcy game:} \\cr\n#' For further information see \\link{cFuncBankruptcy}\n#' @export cFuncBankruptcyVector\n#' @template author/JS\n#' @template cites/AUMANN_ET_MASCHLER_1985\n#' @templateVar AUMANN_ET_MASCHLER_1985_P pp. 195 -- 213\n#' @template cites/AUMANN_2002\n#' @template param/n\n#' @template param/d\n#' @template param/E\n#' @return Game Vector where each element contains a positive value if the sum of the claims outside of coalition 'S' is less than \\code{E}\n#' else \\code{0}\n#' @examples\n#' library(CoopGame)\n#' cFuncBankruptcyVector(n=3,d=c(1,2,3),E=4)\n#' #Output\n#' #An object of class \"GameVector\"\n#' #[1] 0 0 1 1 2 3 4\n#' \ncFuncBankruptcyVector<-function(n,d,E){\n  gameVector <- cFuncBankruptcy(n,d,E)@A\n  return(gameVector)\n}\n\n\n#' @title cFuncBankruptcy - Class of Bankruptcy coalition function\n#' @description Class for Bankruptcy coalition function, \n#' inherits methods and slots from class \\linkS4class{CoopGameCFunc}.\n#' @include CoopGameCFunc.R\n#' @exportClass cFuncBankruptcy\n#' @template slot/d\n#' @template slot/E\n  setClass(\n    \"cFuncBankruptcy\",\n    representation(d=\"numeric\",E=\"numeric\"),\n    contains = \"CoopGameCFunc\",\n    validity = function(object){\n      paramCheckResult=getEmptyParamCheckResult()\n      stopOnInvalidEstate(paramCheckResult,object@E)\n      stopOnInvalidWeightVector(paramCheckResult,object@n,object@d)    }\n  )\n  \n  setMethod(\n    f=\"initialize\",\n    signature = \"cFuncBankruptcy\",\n    definition=function(.Object,...,d,E){\n      .Object@d<-d\n      .Object@E<-E\n      .Object<-methods::callNextMethod(.Object, ...)\n      methods::validObject(.Object)\n      return(.Object)\n    }\n  )\n  \n#' @title Constructor of cFuncBankruptcy\n#' @description \\strong{Constructor for a specified Bankruptcy game:}\\cr\n#' @template author/JS\n#' @name cFuncBankruptcy\n#' @template param/n\n#' @template param/d\n#' @template param/E\n#' @return An S4 object representing the specified Bankruptcy game\n#' @export\n#' @section Related Functions: \n#' \\link{cFuncBankruptcyValue}, \\link{cFuncBankruptcyVector}\n#' @examples \n#' cFuncBankruptcy(n=3,d=c(1,2,3),E=4)\n#' #Output\n#' #An object of class \"cFuncBankruptcy\"\n#' #Slot \"d\":\n#' #  [1] 1 2 3\n#' #\n#' #Slot \"E\":\n#' #  [1] 4\n#' #\n#' #Slot \"A\":\n#' #  An object of class \"GameVector\"\n#' #[1] 0 0 1 1 2 3 4\n#' #\n#' #Slot \"n\":\n#' #  [1] 3\n\n  cFuncBankruptcy<-function(n,d,E){\n    retCFuncBankruptcy=methods::new(\"cFuncBankruptcy\",n=n,d=d,E=E)\n    return(retCFuncBankruptcy)\n  }\n  \n#' @rdname getCoalitionValue-methods\n#' @aliases getCoalitionValue,cFuncBankruptcy-method\nsetMethod(\n  \"getCoalitionValue\",\n  signature=\"cFuncBankruptcy\",\n  definition=function(.Object,S,...){\n    return(logicCFuncBankruptcyValue(S,d=.Object@d,E=.Object@E))\n  }\n)\n  \n  \n  \n\n",
    "created" : 1534322012801.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3598774055",
    "id" : "5C459F0",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/cFuncBankruptcy.R",
    "project_path" : "R/cFuncBankruptcy.R",
    "properties" : {
    },
    "relative_order" : 73,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}