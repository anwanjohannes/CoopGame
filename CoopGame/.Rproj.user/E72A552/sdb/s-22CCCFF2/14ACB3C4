{
    "collab_server" : "",
    "contents" : "#' @name cFuncGloveValue\n#' @title cFuncGloveValue\n#' @description \\strong{Coalition value for the glove game: }\\cr\n#' For further information see \\link{cFuncGlove}\n#' @aliases cFuncGloveValue\n#' @export cFuncGloveValue\n#' @template author/AT\n#' @template author/JA\n#' @template author/JS\n#' @template cites/PETERS_2015\n#' @templateVar PETERS_2015_P p. 155 ff.\n#' @template param/S\n#' @template param/L\n#' @template param/R\n#' @return Number of matched pairs of gloves for given coalition \\code{S}\n#' @examples\n#' library(CoopGame)\n#' cFuncGloveValue(S=c(1,2), L=c(1,2), R=c(3)) \n#' #[1] 0\n#' \ncFuncGloveValue<-function(S,L,R){\n  paramCheckResult=getEmptyParamCheckResult()\n  stopOnInvalidCoalitionS(paramCheckResult,S, n=length(union(L,R)))\n  stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L=L,R=R,N=union(L,R))\n  logicCFuncGloveValue(S,L,R)\n}\n\n#' @name cFuncGloveVector\n#' @title cFuncGloveVector\n#' @description \\strong{Game vector for the glove game: }\\cr\n#' For further information see \\link{cFuncGlove}\n#' @aliases cFuncGloveVector\n#' @export cFuncGloveVector\n#' @template author/JA\n#' @template author/JS\n#' @template cites/PETERS_2015\n#' @templateVar PETERS_2015_P p. 155 ff. \n#' @template param/n\n#' @template param/L\n#' @template param/R\n#' @return The return is a numeric vector of the specified glove game \n#' @examples \n#' #Example with three players, players 1 and 2 hold \n#' #a left-hand glove, player 3 holds a right-hand glove\n#' library(CoopGame)\n#' (A <- cFuncGloveVector(3, L=c(1,2), R=c(3)))\n#' #An object of class \"GameVector\"\n#' #[1]  0 0 0 0 1 1 1\n#'\ncFuncGloveVector<-function(n,L,R){\n  gameVector <- cFuncGlove(n,L,R)@A\n  return(gameVector)\n}\n\n\nlogicCFuncGloveValue<-function(S, L, R){\n  retVal <-0\n\n  #initialize grand coalition N\n  numberOfPlayers <-length(L)+length(R)\n  N<-as.numeric(1:numberOfPlayers)\n  \n  compareVector<-c()\n  #left side\n  compareVector[1]<-length(intersect(S, L))\n  #right side\n  compareVector[2]<-length(intersect(S, R))\n  #return min value of intersected sets' length\n  retVal<-min(compareVector, na.rm = TRUE)\n\n  return (retVal)\n}\n\n#' @title cFuncGlove - class of Glove game\n#' @description Class for glove coalition function, \n#' inherits methods and slots from class \\linkS4class{CoopGameCFunc}.\n#' @include CoopGameCFunc.R\n#' @exportClass cFuncGlove\n#' @template slot/L\n#' @template slot/R\nsetClass(\n  \"cFuncGlove\",\n  representation(L=\"numeric\",R=\"numeric\"),\n  contains = \"CoopGameCFunc\",\n  validity = function(object){\n    paramCheckResult=getEmptyParamCheckResult()\n    stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L=object@L,R=object@R,N=union(object@L,object@R))\n  }\n)\n\nsetMethod(\n  f=\"initialize\",\n  signature = \"cFuncGlove\",\n  definition=function(.Object,...,L=L,R=R){\n    .Object@L<-L\n    .Object@R<-R\n    .Object<-methods::callNextMethod(.Object, ...)\n    return(.Object)\n  }\n)\n\n#' @title Constructor of cFuncGlove\n#' @description \\strong{Constructor for a glove game:} \\cr\n#' We have a set of players \\code{L} with left-hand gloves and \n#' a set of players \\code{R} with right-hand gloves\n#' The worth of a coalition \\code{S} equals the number of \n#' pairs of gloves the members of \\code{S} can make.\n#' @template author/JA\n#' @template author/JS\n#' @template cites/PETERS_2015\n#' @templateVar PETERS_2015_P p. 155 ff.\n#' @template param/n\n#' @template param/L\n#' @template param/R\n#' @name cFuncGlove\n#' @export\n#' @section Related Functions: \n#' \\link{cFuncGloveValue}, \\link{cFuncGloveVector}\n#' @examples \n#' #Example with three players, players 1 and 2 hold \n#' #a left-hand glove, player 3 holds a right-hand glove\n#' library(CoopGame)\n#' (v<-cFuncGlove(n=3,L=c(1,2), R=c(3)))\n#' #An object of class \"cFuncGlove\"\n#' #Slot \"L\":\n#' #[1] 1 2\n#' #\n#' #Slot \"R\":\n#' #[1] 3\n#' #\n#' #Slot \"A\":\n#' #An object of class \"GameVector\"\n#' #[1] 0 0 0 0 1 1 1\n#' #\n#' #Slot \"n\":\n#' # [1] 3\n#' \ncFuncGlove<-function(n,L,R){\n  retCGlove=methods::new(\"cFuncGlove\",n=n,L=L,R=R)\n  return(retCGlove)\n}\n\n\n#' @rdname getCoalitionValue-methods\n#' @aliases getCoalitionValue,cFuncGlove-method\nsetMethod(\n  \"getCoalitionValue\",\n  signature=\"cFuncGlove\",\n  definition=function(.Object,S,...){\n    return(logicCFuncGloveValue(S,L=.Object@L,R=.Object@R))\n  }\n)\n\n\n",
    "created" : 1536399783066.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3715352076",
    "id" : "14ACB3C4",
    "lastKnownWriteTime" : 1537387818,
    "last_content_update" : 1537387818,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/cFuncGlove.R",
    "project_path" : "R/cFuncGlove.R",
    "properties" : {
    },
    "relative_order" : 94,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}