{
    "collab_server" : "",
    "contents" : "#' @name isBalancedGame\n#' @title isBalancedGame for n Players\n#' @description Checks if a game is balanced. \\cr\n#'              A game is balanced if the core is a nonempty set. \\cr \n#'              This routine uses the 'dual' characterization \n#'              of balancedness via the Bondareva-Shapley theorem \n#'              and minimal balanced collections.\n#' @aliases isBalancedGame\n#' @export isBalancedGame\n#' @template author/JA\n#' @template author/JS\n#' @import glpkAPI\n#' @template cites/BONDAREVA_1963\n#' @templateVar BONDAREVA_1963_P pp. 119--139\n#' @template cites/SHAPLEY_1967\n#' @templateVar SHAPLEY_1967_P pp. 453--460\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 27 ff.\n#' @template cites/MASCHLER_ET_SOLAN_ET_ZAMIR_2013\n#' @templateVar MASCHLER_ET_SOLAN_ET_ZAMIR_2013_P p. 691 ff.\n#' @template cites/SLIKKER_ET_NOUWELAND_2001\n#' @templateVar SLIKKER_ET_NOUWELAND_2001_P p. 6 ff.\n#' @template cites/OSBORNE_ET_RUBINSTEIN_1994\n#' @templateVar OSBORNE_ET_RUBINSTEIN_1994_P p. 262 ff.\n#' @inheritParams CoopGameBaseParams\n#' @return \\code{TRUE} if the game is balanced, else \\code{FALSE}\n#' @examples\n#' #Example of an unbalanced game with 3 players\n#' library(CoopGame)\n#' A=c(1,1,1,2,3,4,3)\n#' isBalancedGame(A)\n#' \n#' #Example of a balanced game with 3 players\n#' library(CoopGame)\n#' A=c(0,0,0,40,50,20,100)\n#' isBalancedGame(A)\n#' \n#' #Example of an unbalanced game with 4 players\n#' library(CoopGame)\n#' A=c(0,0,0,0,1,0,0,0,0,3,3,3,3,3,4)\n#' isBalancedGame(A)\n#' \n#' #Example of a balanced game with 4 players\n#' library(CoopGame)\n#' A= c(0,0,0,0,1,0,0,0,0,2,2,2,2,2,4)\n#' isBalancedGame(A)\n#' \nisBalancedGame<-function(A){\n  isE=GamePropertyBalancedness(A)\n  return(determineProperty(isE))\n}\n\nlogicIsBalancedGame<-function(A, enableTermOutLP=FALSE){\n  \n  #Return value \n  retVal=NULL\n  \n  # determine if terminal output should be enabled or disabled\n  termOutGLPK(ifelse(enableTermOutLP, GLP_ON, GLP_OFF))\n  \n  n=getNumberOfPlayers(A)\n  bm=createBitMatrix(n,A)\n  \n  #number of all coalitions apart from null coalition\n  N=length(A)\n  \n  #initialisation of linear maximisation problem\n  prob=initProbGLPK()\n  setObjDirGLPK(prob,GLP_MAX);\n  setProbNameGLPK(prob,\"Balanced\");\n  \n  #Add variables, bounds and optimisation function\n  addColsGLPK(prob,N);\n  setColsNamesGLPK(prob,c(1:N),sapply(c(1:N),function(i){paste0(\"a\",i)}))\n  setColsBndsGLPK(prob,c(1:N),rep(0,N),rep(0,N),rep(GLP_LO,N))\n  setObjCoefsGLPK(prob,c(1:N),as.vector(bm[,\"cVal\"]))\n \n  #Add player \n  \n  addRowsGLPK(prob,n+1)\n  setRowsNamesGLPK(prob,c(1:n),sapply(c(1:n),function(i){paste0(\"a\",i)}))\n  setRowsBndsGLPK(prob,c(1:n),rep(1.0,n),rep(1.0,n),rep(GLP_FX,n))\n  \n  #Add constraints to linear problem\n  LPM<-t(bm[,1:n])\n  ia=c(rep(1:(n),each=N))\n  ja=c(rep(1:N,(n)))\n  loadMatrixGLPK(prob,(n)*N,ia,ja,as.vector(t(LPM)))\n  \n  solveSimplexGLPK(prob)\n  objVal <- getObjValGLPK(prob)\n  \n\n  if (objVal == A[length(A)]) {\n    retVal=TRUE\n  }else if(objVal>A[length(A)]){\n    retVal=FALSE\n  }\n  delProbGLPK(prob)\n  return(retVal)\n}\n\n#' @title GamePropertyBalancedness\n#' @noRd\n#' @include GameProperty.R\n#' #@exportClass GamePropertyBalancedness\n\nsetClass(\n  \"GamePropertyBalancedness\",\n  contains = \"GameProperty\"\n)\n\n#' @title Constructor for GamePropertyBalancedness\n#' @noRd\n#' @template author/JA\n#' @template author/JS\n#' @name GamePropertyBalancedness\n#' #@export\nGamePropertyBalancedness<-function(A){\n  retGamePropertyBalancedness=methods::new(\"GamePropertyBalancedness\",A)\n  return(retGamePropertyBalancedness)\n}\n\n#' @rdname determineProperty-methods\n#' @aliases determineProperty,GamePropertyBalancedness-method\nsetMethod(\n  \"determineProperty\",\n  signature=\"GamePropertyBalancedness\",\n  definition=function(.Object){\n    A<-.Object@A\n    result=logicIsBalancedGame(A)\n    return(result)\n  }\n)\n\n\n\n",
    "created" : 1536695902472.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2253179652",
    "id" : "5922CF95",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/GamePropertyBalancedness.R",
    "project_path" : "R/GamePropertyBalancedness.R",
    "properties" : {
    },
    "relative_order" : 127,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}