{
    "collab_server" : "",
    "contents" : "#' @name getMinimalRights\n#' @title getMinimalRights\n#' @description Calculates the minimal rights vector. \\cr\n#' What is the maximum player i would get (over all coalitions) if all the other players were to get their marginal contributions? \\cr\n#' Marginal contribution of player i in grand coalition: \\deqn{M_{i} = v(N) - v(N \\ {i})}\n#' Minimum right of player i: \\deqn{m_{i} = \\max { v(S) - \\sum M_{j} } }\n#' @aliases getMinimalRights\n#' @export getMinimalRights\n#' @template author/JA\n#' @template author/MM\n#' @template author/JS\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 20\n#' @template param/A\n#' @return Vector of minimal right payoffs for each player\n#' @examples\n#' library(CoopGame)\n#' A <- c(0,0,0,60,60,60,72)\n#' getMinimalRights(A)\n#' #[1] 48 48 48\n#'\n#' library(CoopGame)\n#' B <- c(2,4,5,18,14,9,24) \n#' getMinimalRights(B)\n#' #[1] 8 4 5\n#' \ngetMinimalRights<-function(A){\n  n=getNumberOfPlayers(A)\n  N=length(A)\n  bm=createBitMatrix(n,A)\n  M=getUtopiaPayoff(A)\n  \n  m=sapply(1:n, function(i){\n    bmIndices=which(bm[,i]==1,1)\n    max(\n      apply(\n        bm[bmIndices,,drop=FALSE],\n        1,\n        function(bmRow){\n          jPlayers=getPlayersFromBMRow(bmRow)\n          jPlayers=jPlayers[jPlayers!=i]\n          bmRow[\"cVal\"]-sum(M[jPlayers])\n        }\n      )\n    )\n  })\n  return(m)\n}",
    "created" : 1525209212007.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "56362668",
    "id" : "33B9DBBC",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/getMinimalRights.R",
    "project_path" : "R/getMinimalRights.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 20,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}