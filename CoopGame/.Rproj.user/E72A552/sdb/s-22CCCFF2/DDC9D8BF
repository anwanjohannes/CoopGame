{
    "collab_server" : "",
    "contents" : "#' @name tauValue\n#' @title tauValue\n#' @description Calculates the tau value for specified game.\n#' @aliases tauValue, tijsValue\n#' @export tauValue\n#' @template author/JA\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 31\n#' @template cites/TIJS_1981\n#' @inheritParams CoopGameBaseParams\n#' @return It calculates the tau value for a game specified by a game vector A.\n#' @examples\n#' #Example for tau value\n#' A=c(0,0,0,2,2,3,5)\n#' tauValue(A) \n#' #1.250   1.875   1.875\n#' \ntauValue<-function(A){\n  tv=TauConcept(A)\n  return(calculatePointSolution(tv))\n}\n\nlogicTauValue<-function(A){\n  retVal=NULL\n  n=getNumberOfPlayers(A)\n  N=length(A)\n  \n  if(!isQuasiBalancedGame(A)){\n    print(\"Game is not quasi balanced therefore no tau value can be retrieved.\")\n  }else{\n    mc=matrix(nrow=2,ncol=n)\n    rownames(mc)<-c(\"M\",\"m\")\n    mc[\"M\",]<-getUtopiaPayoff(A=A)\n    mc[\"m\",]<-getMinimalRights(A=A)\n    \n    if(identical(mc[\"M\",],mc[\"m\",])){\n      retVal=mc[\"M\",]\n    }else{\n      diffM_m=mc[\"M\",]-mc[\"m\",]\n      tDiagMatrix=diag(1,nrow=n,ncol = n)\n      coeffMat=cbind(tDiagMatrix,diffM_m)\n      coeffMat=rbind(coeffMat,c(rep(1,n),0))\n      tauResult=solve(coeffMat,c(mc[\"M\",],A[N]))\n      retVal = unname(tauResult[1:n])\n    }\n  }\n  return(retVal)\n}\n\n\nremainder<-function(A){\n  n=getNumberOfPlayers(A)\n  N=length(A)\n  bm=createBitMatrix(n=n,A)\n  mc=getUtopiaPayoff(A = A)\n  bm[,1:n]=bm[,1:n]*mc\n  remainder=matrix(\n    unlist(\n      apply(bm,1,\n            FUN = function(x,N,n){\n              return(sapply(1:(n),function(ix){x[\"cVal\"]-sum(x[-c(ix,(n+1))])}))\n            },\n            N=N,\n            n=n\n      )\n    ),\n    ncol=(n),\n    byrow=TRUE\n  )\n  return(remainder)\n}\n\n\n\n\n#' @title TauConcept - S4 class for tau concept\n#' @name TauConceptClass\n#' @noRd\n#' @description S4 class containing logic for solving tau concept\n#' @include PointSolutionConcept.R\n#' #@exportClass TauConcept\n\nsetClass(\n  \"TauConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @title Constructor for TauConcept\n#' @noRd\n#' @template author/JA\n#' @name TauConcept\n#' @inheritParams CoopGameBaseParams\n#'# @export\nTauConcept<-function(A){\n  retTauConcept=methods::new(\"TauConcept\",A)\n  return(retTauConcept)\n}\n#' @rdname calculatePointSolution-methods\n#' @aliases calculatePointSolution,TauConcept-method\nsetMethod(\n  \"calculatePointSolution\",\n  signature=\"TauConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicTauValue(A))\n  }\n)\n\n#' @name drawTauValue\n#' @title drawTauValue for 3 or 4 players\n#' @family TauConcept\n#' @family PointSolutionConcept\n#' @description drawTauValue draws the Tau Value for 3 or 4 players.\n#' @aliases drawTauValue, drawTijsValue\n#' @export drawTauValue\n#' @template author/JA\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 31\n#' @template cites/TIJS_1981\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @examples\n#' A=c(0,0,5,4,8,9,12)\n#' drawTauValue(A,colour=\"green\")\ndrawTauValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Tau value\"){\n  A=GameVector(A)\n  pcn=tauValue(A);\n  visualize(A, pointsToDraw=pcn, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1525208747172.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3074758235",
    "id" : "DDC9D8BF",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/TauConcept.R",
    "project_path" : "R/TauConcept.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}