{
    "collab_server" : "",
    "contents" : "#' @title GameVector -  class for game vector\n#' @description Class for game vector. Constructor is provided by function \\link{GameVector}.\n#' @exportClass GameVector\nsetClass(\n  \"GameVector\",\n  contains = \"numeric\",\n  validity = function(object){\n     paramCheckResult=getEmptyParamCheckResult()\n     stopOnInvalidGameVectorA(paramCheckResult,A=(object@.Data))\n  }\n)\n\nsetMethod(\n  f=\"initialize\",\n  signature = \"GameVector\",\n  definition =  function(.Object, A) {\n    paramCheckResult=getEmptyParamCheckResult()\n    if(!is.null(A)){\n      stopOnInvalidGameVectorA(paramCheckResult,A=A)\n    .Object@.Data=A\n    }\n    methods::validObject(.Object)\n    return(.Object)\n  }\n)\n\n#' @title Constructor for GameVector\n#' @description Constructor for instance of \\linkS4class{GameVector}.\n#' @template author/JA\n#' @name GameVector\n#' @template param/A\n#' @export GameVector\n#' @examples \n#' library(CoopGame)\n#' GameVector(c(0,0,0,2,5,7,10))\n#' #An object of class \"GameVector\"\n#' #[1]  0  0  0  2  5  7 10\nGameVector<-function(A){\n  retAP=methods::new(\"GameVector\",A)\n  return(retAP)\n}\n\n#' @title Method getZeroOneNormalizedGame\n#' @description This method retrieves the zero-one-normalized game.\n#' @rdname getZeroOneNormalizedGame-methods\n#' @name getZeroOneNormalizedGame\n#' @docType methods\n#' @template author/JA\n#' @template param/Object\n# @exportMethod getZeroOneNormalizedGame\nsetGeneric(\"getZeroOneNormalizedGame\",function(.Object){standardGeneric(\"getZeroOneNormalizedGame\")})\n\n#' @rdname getZeroOneNormalizedGame-methods\n#' @aliases getZeroOneNormalizedGame,GameVector-method\nsetMethod(\n  \"getZeroOneNormalizedGame\",\n  signature = \"GameVector\",\n  definition = function(.Object){\n    retVal=NULL\n    AzeroNorm<-getZeroNormalizedGame(.Object)\n    V_N=AzeroNorm[length(AzeroNorm)]\n    if(V_N==0){\n      print(\"Zero-one-normalized game can not be retrieved since value of grand coalition of zero-normalized game is 0.\")\n    }else{\n      retVal=AzeroNorm/V_N\n    }\n    return(retVal)\n  }\n)\n\n\n#' @name getZeroOneNormalizedGameVector\n#' @title getZeroOneNormalizedGameVector for TU game with n players\n#' @description Computes the zero-one-normalized game for a given game specified by a game vector A.\n#' @aliases getZeroOneNormalizedGameVector\n#' @export getZeroOneNormalizedGameVector\n#' @template author/JA\n#' @template cites/GILLES_2015\n#' @templateVar GILLES_2015_P p. 18\n#' @template cites/MASCHLER_ET_SOLAN_ET_ZAMIR_2013\n#' @templateVar MASCHLER_ET_SOLAN_ET_ZAMIR_2013_P p. 670\n#' @inheritParams CoopGameBaseParams\n#' @return Numeric vector of length (2^n)-1 representing the zero-one-normalized game.\n#' @examples\n#' library(CoopGame)\n#' A<-c(1:7)\n#' #[1] 1 2 3 4 5 6 7\n#' getZeroOneNormalizedGameVector(A)\n#' #[1] 0 0 0 1 1 1 1\ngetZeroOneNormalizedGameVector<-function(A){\n  gv<-GameVector(A);\n  zeroOneNormalizedGame<-getZeroOneNormalizedGame(gv)\n  return(zeroOneNormalizedGame)\n}\n\n#' @title Method getZeroNormalizedGame\n#' @description This method retrieves the zero-normalized game.\n#' @rdname getZeroNormalizedGame-methods\n#' @name getZeroNormalizedGame\n#' @docType methods\n#' @template author/JA\n#' @template param/Object\n# @exportMethod getZeroNormalizedGame\nsetGeneric(\"getZeroNormalizedGame\",function(.Object){standardGeneric(\"getZeroNormalizedGame\")})\n\n#' @rdname getZeroNormalizedGame-methods\n#' @aliases getZeroNormalizedGame,GameVector-method\nsetMethod(\n  \"getZeroNormalizedGame\",\n  signature = \"GameVector\",\n  definition = function(.Object){\n    A<-.Object@.Data\n    N=length(A)\n    n=getNumberOfPlayers(A)\n    AzeroNorm=sapply(c(1:N),function(ix){\n      involvedPlayers=getPlayersFromIndex(n,ix)\n      A[ix]-sum(A[involvedPlayers])\n    })\n    return(AzeroNorm)\n  }\n)\n\n#' @name getZeroNormalizedGameVector\n#' @title getZeroNormalizedGameVector for TU game with n players\n#' @description Computes the zero-normalized game for a given game specified by a game vector A.\n#' @aliases getZeroNormalizedGameVector\n#' @export getZeroNormalizedGameVector\n#' @template author/JA\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 9\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 11\n#' @inheritParams CoopGameBaseParams\n#' @return Numeric vector of length (2^n)-1 representing the zero-normalized game.\n#' @examples\n#' library(CoopGame)\n#' A<-c(1:7)\n#' #[1] 1 2 3 4 5 6 7\n#' getZeroNormalizedGameVector(A)\n#' #[1] 0 0 0 1 1 1 1\n#' \ngetZeroNormalizedGameVector<-function(A){\n  gv<-GameVector(A);\n  zeroNormalizedGame<-getZeroNormalizedGame(gv)\n  return(zeroNormalizedGame)\n}\n\n#' @title Method getDualGame\n#' @description This method retrieves the dual game.\n#' @rdname getDualGame-methods\n#' @name getDualGame\n#' @docType methods\n#' @template author/JA\n#' @template param/Object\n# @exportMethod getDualGame\nsetGeneric(\"getDualGame\",function(.Object){standardGeneric(\"getDualGame\")})\n\n#' @rdname getDualGame-methods\n#' @aliases getDualGame,GameVector-method\nsetMethod(\n  \"getDualGame\",\n  signature = \"GameVector\",\n  definition = function(.Object){\n    A<-.Object@.Data\n    N=length(A)\n    return(c(A[N]-rev(A[-N]),A[N]))\n  }\n)\n\n#' @name getDualGameVector\n#' @title getDualGameVector for TU game with n players\n#' @description Computes the dual game for a given TU game specified by a game vector A.\n#' @aliases getDualGameVector\n#' @export getDualGameVector\n#' @template author/JA\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 125\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 7\n#' @template cites/MASCHLER_ET_SOLAN_ET_ZAMIR_2013\n#' @templateVar MASCHLER_ET_SOLAN_ET_ZAMIR_2013_P p. 737\n#' @inheritParams CoopGameBaseParams\n#' @return Numeric vector of length (2^n)-1 representing the dual game.\n#' @examples\n#' library(CoopGame)\n#' A<-cFuncUnanimityVector(4,c(1,2))\n#' #[1] 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1\n#' getDualGameVector(A)\n#' #[1] 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1\n#'\ngetDualGameVector<-function(A){\n  gv<-GameVector(A);\n  dualGame<-getDualGame(gv)\n  return(dualGame)\n}\n\n\n\n#' @name generateGameVector\n#' @title generating game vector\n#' @description Generates game vector for given number of players and a given game function\n#' @aliases generateGameVector\n#' @include bitMatrix.R\n#' @export generateGameVector\n#' @template author/AT\n#' @template param/v\n#' @template param/n\n#' @template param/others\n#' @return generated numeric game vector with 2^n-1 elements (n=number of players)\n#' @examples\n#' library(CoopGame)\n#' generateGameVector(v = cFuncUnanimity, n = 3, T=c(1,2))\n#' #An object of class \"GameVector\"\n#' #[1] 0 0 0 1 0 0 1\n#' \ngenerateGameVector<-function(v,n,...){\n  paramCheckResult=getEmptyParamCheckResult()\n  stopOnInvalidCoalitionFunctionV(paramCheckResult,v)\n  stopOnInvalidNumberOfPlayers(paramCheckResult,n)\n  #stop on v no function\n  cFunc=v(n=n,...)\n  #stop oncFunc no Coalition class\n  gameVector=cFunc@A\n  return(gameVector)\n}\n\n#' @name getNumberOfPlayers\n#' @title getNumberOfPlayers\n#' @description Gets the number of players from a game vector A\n#' @aliases getNumberOfPlayers\n#' @export getNumberOfPlayers\n#' @template author/MM\n#' @param A  is a numeric vector of dimension 1x((2^n) - 1)\n#' @return number of players\n#' @examples\n#' library(CoopGame)\n#' A=c(0,0,0,60,60,60,72)\n#' getNumberOfPlayers(A)\n#' #[1] 3\ngetNumberOfPlayers <- function(A) {\n  A<-GameVector(A)\n  n <- log2(length(A) + 1)\n  numberOfPlayers<-NumberOfPlayers(n)\n  return(numberOfPlayers)\n}\n",
    "created" : 1534253073846.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3307796655",
    "id" : "BE7E6061",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/GameVector.R",
    "project_path" : "R/GameVector.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 62,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}