{
    "collab_server" : "",
    "contents" : "#' @name IndexCalculations_CoopGame\n#' @family IndexCalculations_CoopGame\n#' @title Index Calculation Functions\n#' @description Index Calculation Functions aim to offer\n#' global functions which allow the user to determine\n#' the corresponding index of a row in a bit matrix or a game vector \n#' with respect to specified coalition properties.\n#' But also the aim is to offer functions which help to \n#' identify properties of a coalition \n#' referenced by an index.\n#' @section Index search functions:\n#' \n#' \\tabular{lll}{\n#'    \\strong{Function Name}                        \\tab \\strong{Short Description}                                                  \\cr\n#'    \\code{\\link{indexCoalition}}                  \\tab  Finds out index to specified coalition S                                   \\cr\n#'    \\code{\\link{indexCoalitionByBitVector}}       \\tab  Finds out index to specified coalition S when S is specified as bit vector \\cr\n#'  }\n#'  \n#' @section Search helper functions:\n#'  \n#' \\tabular{lll}{\n#'    \\strong{Function Name}                        \\tab \\strong{Short Description}                                                                                         \\cr\n#'    \\code{\\link{getPlayersFromIndex}}             \\tab Identifes by specified index the players involved in the corresponding coalition                                  \\cr\n#    \\code{\\link{calcDistance}}                    \\tab Identifies distance between to indices when n choose b players left to set and difference of players is specified  \\cr\n#    \\code{\\link{getStartPosition}}                \\tab Identifies index for coalition where either 'player' is specified as first player involved and n choose b players are involved in complete coalition.\\cr\n#    \\code{\\link{indexLower}}                      \\tab Identifies index of lower bound for first occurrence of n choose b players involved\\cr\n#    \\code{\\link{indexUpper}}                      \\tab Identifies index of upper bound for last occurrence of n choose b players involved\\cr\n#'  }\nNULL\n\n\n#' @name indexCoalition\n#' @title indexCoalition for calculating coalition's index\n#' @family IndexCalculations_CoopGame\n#' @description indexCoalition calculates the index a certain coalition S\n#'  has either in a bit matrix or in a game vector where n players are involved in the game\n#' @aliases indexCoalition\n#' @export indexCoalition\n#' @template author/JA\n#' @template author/JS\n#' @param n represents number of the game's players\n#' @param S is a vector containing a subset of game's players and represents\n#'        the coalition for which the corresponding index is searched\n#' @return ix_c as the returned index value\n#' @examples\n#' library(CoopGame)\n#' A=cFuncQuotaVector(n=3,w=c(1,2,3),q=5)\n#' bm=createBitMatrix(3,A)\n#' ix_c=indexCoalition(3,S=c(1,3)) #delivers ix_c=5\n#' bm\n#'#Output (with added comment in line):\n#'#           cVal\n#'#[1,] 1 0 0    0\n#'#[2,] 0 1 0    0\n#'#[3,] 0 0 1    0\n#'#[4,] 1 1 0    0\n#'#[5,] 1 0 1    0 <=\n#'#[6,] 0 1 1    1\n#'#[7,] 1 1 1    1\n#'\nindexCoalition=function(n,S){\n  S=as.numeric(S) #Marked as to be removed when all changes applied\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_indexCoalition(paramCheckResult,n,S)\n  #index referencing coalition in corresponding bit matrix for n players\n  ix_c=NULL\n  b=length(S)\n  S=sort(S)\n  if(b==1){\n    #index for row in bit matrix for coalition is equal to number of player\n    #if there is only one player involved\n    ix_c=S[1]\n  }else{\n    #Calculate index in bit matrix for n choose b where bit for player S[1] is first set bit\n    ix_c=getStartPosition(firstPlayer = S[1],n,b)\n\n    #Loop variable for current pair of players\n    i_tmp=1\n    #Loop over all pairs of players\n    for(i in S[1:(length(S)-1)]){\n      #compare the difference of two neighbouring players\n      dif=S[i_tmp+1]-S[i_tmp]\n      #Get distance of two neighbours (in rows) and add the result\n      #to index referencing the coalition in the bit matrix\n      ix_c=ix_c+calcDistance(dif,n-i,b-i_tmp)\n      i_tmp=i_tmp+1\n    }\n  }\n  return (ix_c)\n}\n\n#' @name initialParamCheck_indexCoalition\n#' @noRd\n#' @title initialParamCheck_indexCoalition - parameter check for indexCoalition\n#' @family IndexCalculations_CoopGame\n#' @description initialParamCheck_indexCoalition validates parameters passed to indexCoalition\n#' @aliases initialParamCheck_indexCoalition\n#' #@export initialParamCheck_indexCoalition\n#' @template author/JA\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param n represents number of players involved in whole game.\n#' @param S represents coalition as subset of N.\n#' @examples\n#'   paramCheckResult=getEmptyParamCheckResult()\n#'   initialParamCheck_indexCoalition(paramCheckResult,n,S)\ninitialParamCheck_indexCoalition=function(paramCheckResult,n,S){\n  stopOnInvalidCoalitionS(paramCheckResult,S,n=n)\n}\n\n#' @name indexCoalitionByBitVector\n#' @title indexCoalitionByBitVector for calculating coalition's index\n#' @family IndexCalculations_CoopGame\n#' @description indexCoalitionByBitVector calculates the index a \n#' certain coalition S has either in a bit matrix or in a game \n#' vector where n players are involved in the game\n#' @aliases indexCoalitionByBitVector\n#' @export indexCoalitionByBitVector\n#' @template author/JA\n#' @template author/JS\n#' @template param/n\n#' @param bitVector is a vector containing a subset of players \n#'        (number of bit set depicts involved players) and represents\n#'        the coalition for which the corresponding index is searched\n#' @return ix_c as the returned index value\n#' @examples \n#' library(CoopGame)\n#' # The coalition formed by players 1 and 3 has index 6 \n#' # in a 4-player TU game \n#' myBitVector <- c(1,0,1,0)\n#' indexCoalitionByBitVector(4,myBitVector)\n#' #[1] 6\n#\nindexCoalitionByBitVector=function(n,bitVector){\n  S=which(bitVector&1)\n  return(indexCoalition(n,S))\n}\n#\n## First section: END\n\n## Second section: START\n\n\n#' @name getPlayersFromIndex\n#' @title getPlayersFromIndex for calculating coalition's index\n#' @description getPlayersFromIndex calculates the index of a certain coalition S\n#' in a bit matrix or in a game vector with n players involved in the game\n#' @aliases getPlayersFromIndex\n#' @importFrom utils combn\n#' @family IndexCalculations_CoopGame\n#' @export getPlayersFromIndex\n#' @template author/JA\n#' @param bitIndex is row index of \\linkS4class{BitMatrix} where involved players should get identified.\n#' @template param/n\n#' @return ix_c as the returned index value\n#' @examples\n#' #Finds out players of a row specified by 'bitIndex' in a bit matrix for 'n' players\n#' #Corresponding bit matrix for 3 players with marked row (4th column represents coalition value)\n#' #             cVal\n#' # [1,] 1 0 0    1\n#' # [2,] 0 1 0    2\n#' # [3,] 0 0 1    3\n#' # [4,] 1 1 0    4\n#' # [5,] 1 0 1    5\n#' # [6,] 0 1 1    6 <=\n#' # [7,] 1 1 1    7\n#' #Here: For bitIndex 6 the involved players should be determined (player 2 and 3)\n#' library(CoopGame)\n#' getPlayersFromIndex(n=3,6)\n#' #Result: [1] 2 3\n#' \ngetPlayersFromIndex=function(n, bitIndex){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_getPlayersFromIndex(paramCheckResult, n, bitIndex)\n\n  ix_lb=NULL\n  ix_ub=NULL\n  dif=NULL\n  players=NULL\n\n  #Find out how many players b are involved within the bit matrix' row specified\n  #by bitIndex\n  for(b in 1:n){\n    #Determine lower and upper bound of range within b players are involved\n    ix_lb=indexLower(n,b)\n    ix_ub=indexUpper(n,b)\n    #if bitIndex is within in range the correct number of players was identified\n    #and loop gets quited\n    if(ix_lb<=bitIndex & bitIndex<=ix_ub){\n      #dif saves value for difference between bitIndex and index in bit matrix\n      #where first occurence of a coalition with b choose players arises\n      dif=bitIndex-ix_lb\n      break\n    }\n  }\n  players=t(utils::combn(c(1:n),m=b))[1+dif,]\n  return(players)\n}\n\n#' @name initialParamCheck_getPlayersFromIndex - parameter check for getPlayersFromIndex\n#' @noRd\n#' @title initialParamCheck_getPlayersFromIndex\n#' @family IndexCalculations_CoopGame\n#' @description initialParamCheck_getPlayersFromIndex validates parameters passed to getPlayersFromIndex\n#' @aliases initialParamCheck_getPlayersFromIndex\n#' #@export initialParamCheck_getPlayersFromIndex\n#' @template author/JA\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param param n represents number of the game's players\n#' @param param bitIndex represents the index referencing the corresponding row in the bit matrix for which involved players gets identified.\n\n\ninitialParamCheck_getPlayersFromIndex=function(paramCheckResult, n, bitIndex){\n  stopOnInvalidNumberOfPlayers(paramCheckResult,n)\n  stopOnInvalidIndex(paramCheckResult,index = bitIndex, n=n)\n}\n\n## Second section: END\n\n\n## Third section: START\n## From here onwards no functionality is used or exported\n#' @name calcDistance\n#' @noRd \n#' @title calcDistance - get distance between 2 players\n#' @description calcDistance calculates distance in a bit matrix for n players beetween 2 defined players (in rows) when .\n#' @aliases calcDistance\n#' @family IndexCalculations_CoopGame\n#' #@export calcDistance\n#' @template author/JA\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param n represents here number of players left to set.\n#' @param b represents number of players which get set.\n#' @examples\n#' #Example: Bit matrix for 3 players (4th column represents coalition value)\n#' #look for start Position for firstPlayer=1, n=3 and b=2\n#' #getStartPosition(firstPlayer=1, n=3, b=2) delivers 4 as index\n#' #Now check rows it takes that bit for next player 3 is set\n#' #- here n is 2 (two players left '2' and '3') and b is 1 (1 bit left to set)\n#' calcDistance(dif=(3-1),2,1)\n#' #Now add 4 (old index) to 1 and get 5 as index where bit for player 1 and 3 is set\n#' #       [,1] [,2] [,3] [,4]\n#' # [1,]    1    0    0    0\n#' # [2,]    0    1    0    0\n#' # [3,]    0    0    1    0\n#' # [4,]    1    1    0    0\n#' # [5,]    1    0    1    0 <=\n#' # [6,]    0    1    1    0\n#' # [7,]    1    1    1    0\n#' # [8,]    0    0    0    0\ncalcDistance=function(dif,n,b){\n  ix=0\n  if(dif>1){\n    for(j in 1:(dif-1)){\n      n_tmp=n-j+1\n      b_tmp=b\n      ix=ix+(choose(n_tmp,b_tmp)*(b_tmp/n_tmp))\n    }\n  }\n  return(ix)\n}\n\n#' @name getStartPosition\n#' @noRd\n#' @title getStartPosition - get index where n choose b players are involved\n#' @description getStartPosition calculates index for row in a bit matrix for n players with n choose b players involved\n#' and firstPlayer is the player where bit is set for the first time\n#' @aliases getStartPosition\n#' @family IndexCalculations_CoopGame\n#' #@export getStartPosition\n#' @template author/JA\n#' @param firstPlayer represents object where errCode and errMessage are assigned to after validation.\n#' @param n represents number of players involved in whole game.\n#' @param b represents coalition as subset of N.\n#' @examples\n#' # Bit matrix for 3 players (4th column represents coalition value)\n#' # look for start Position for firstPlayer=2, n=3 and b=2\n#' #=> searched index is 6:\n#' getStartPosition(firstPlayer=2,n=3,b=2)\n#' # Result:> [1] 6\n#' # Corresponding bit matrix\n#'\n#'#       [,1] [,2] [,3] [,4]\n#'# [1,]    1    0    0    0\n#'# [2,]    0    1    0    0\n#'# [3,]    0    0    1    0\n#'# [4,]    1    1    0    0\n#'# [5,]    1    0    1    0\n#'# [6,]    0    1    1    0 <=\n#'# [7,]    1    1    1    0\n#'# [8,]    0    0    0    0\n\ngetStartPosition=function(firstPlayer,n,b){\n  ix_s=0\n  ix_l=indexLower(n,b)\n  dif=firstPlayer[1]\n  ix_s=calcDistance(dif,n,b)\n  return (ix_s+ix_l)\n}\n\n\n\n\n\n\n#' @name indexLower\n#' @noRd\n#' @title indexLower - calculates index for lower bound where n choose b players are involved\n#' @description indexLower calculates in a bit matrix for n players the the first row where n choose b are involved in the game.\n#' @aliases indexLower\n#' @family IndexCalculations_CoopGame\n#' #@export indexLower\n#' @template author/JA\n#' @param param n represents number of the game's players\n#' @param param b represents number of players involved.\n#' @examples\n#' #Generate bit matrix for n=3 players\n#' createBitMatrix(n=3,A=c(1:7))\n#' #Correponding bit matrix\n#' #           cVal\n#' #[1,] 1 0 0    1\n#' #[2,] 0 1 0    2\n#' #[3,] 0 0 1    3\n#' #[4,] 1 1 0    4 <= Searched row\n#' #[5,] 1 0 1    5\n#' #[6,] 0 1 1    6\n#' #[7,] 1 1 1    7\n#' #Get index of row where 3 choose 2 players are involved\n#' indexLower(n=3,b=2)\n#' #Result: [1] 4\n\nindexLower=function(n,b){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_indexLower(paramCheckResult, n,b)\n  ix=0\n  for (i in 1:b) {\n    ix=ix+choose(n,i-1)\n  }\n  return(ix)\n}\n\n#' @name initialParamCheck_indexLower\n#' @noRd\n#' @title initialParamCheck_indexLower - parameter check for  indexLower\n#' @description initialParamCheck_indexLower validates parameters passed to indexLower\n#' @aliases initialParamCheck_indexLower\n#' @family IndexCalculations_CoopGame\n#' #@export initialParamCheck_indexLower\n#' @template author/JA\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param param n represents number of the game's players\n#' @param param b represents number of players involved.\n#' @examples\n#' #Valid parameters:\n#' paramCheckResult=getEmptyParamCheckResult()\n#' initialParamCheck_indexLower(paramCheckResult,n=3,b=2)\n#' #Invalid parameters (as n<b):\n#' paramCheckResult=getEmptyParamCheckResult()\n#' initialParamCheck_indexLower(paramCheckResult,n=2,b=3)\n\ninitialParamCheck_indexLower=function(paramCheckResult, n, b){\n  stopOnInvalidNChooseB(paramCheckResult,n,b)\n}\n\n\n#' @name indexUpper\n#' @noRd\n#' @title indexUpper - calculates index for upper bound where n choose b players are involved\n#' @description indexLower calculates in a bit matrix for n players index referencing the the last row where n choose b are involved in the game.\n#' @aliases indexUpper\n#' @family IndexCalculations_CoopGame\n#' #@export indexUpper\n#' @template author/JA\n#' @param param n represents number of the game's players\n#' @param param b represents number of players involved.\n#' @examples\n#' #Generate bit matrix for n=3 players\n#' createBitMatrix(n=3,A=c(1:7))\n#' #Correponding bit matrix\n#' #           cVal\n#' #[1,] 1 0 0    1\n#' #[2,] 0 1 0    2\n#' #[3,] 0 0 1    3\n#' #[4,] 1 1 0    4\n#' #[5,] 1 0 1    5\n#' #[6,] 0 1 1    6 <= Searched row\n#' #[7,] 1 1 1    7\n#' #Get index of last row where 3 choose 2 players are involved\n#' indexUpper(n=3,b=2)\n#' #Result: [1] 6\n\nindexUpper=function(n,b){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_indexUpper(paramCheckResult,n,b)\n  index=0\n  for (i in 1:b) {\n    index=index+choose(n,i)\n  }\n  return (index)\n}\n\n#' @name initialParamCheck_indexUpper\n#' @noRd\n#' @title initialParamCheck_indexUpper - parameter check for indexUpper\n#' @description initialParamCheck_indexUpper validates parameters passed to indexUpper\n#' @aliases initialParamCheck_indexUpper\n#' @family IndexCalculations_CoopGame\n#' #@export initialParamCheck_indexUpper\n#' @template author/JA\n#' @param paramCheckResult represents object where errCode and errMessage are assigned to after validation.\n#' @param param n represents number of the game's players\n#' @param param b represents number of players involved.\n#' @examples\n#' #Valid parameters:\n#' paramCheckResult=getEmptyParamCheckResult()\n#' initialParamCheck_indexUpper(paramCheckResult,n=3,b=2)\n#' #Invalid parameters (as n<b):\n#' paramCheckResult=getEmptyParamCheckResult()\n#' initialParamCheck_indexUpper(paramCheckResult,n=2,b=3)\n\ninitialParamCheck_indexUpper=function(paramCheckResult, n, b){\n  stopOnInvalidNChooseB(paramCheckResult,n,b)\n}\n## Third section: END\n\n\n\n\n",
    "created" : 1536695079525.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2398264460",
    "id" : "3C83A7F7",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/indexCalculations.R",
    "project_path" : "R/indexCalculations.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 118,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}