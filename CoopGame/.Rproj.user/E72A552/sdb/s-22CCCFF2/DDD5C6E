{
    "collab_server" : "",
    "contents" : "#' @name isAdditiveGame\n#' @title isAdditiveGame\n#' @description Checks if a TU game for n players is additive. \\cr\n#' In an additive game for any two disjoint coalitions \n#' \\code{S} and \\code{T} the value of the union of \n#' \\code{S} and \\code{T} equals the sum of the values  \n#' of \\code{S} and \\code{T}. In other words, additive games \n#' are constant-sum and the imputation set of an \n#' additive game consists of exactly one point.\n#'\n#' @aliases isAdditiveGame\n#' @export isAdditiveGame\n#' @template author/AT\n#' @template author/JS\n#' @template cites/PELEG_ET_SUDHOELTER_2007\n#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 11\n#' @template cites/PETERS_2015\n#' @templateVar PETERS_2015_P p. 292\n#' @template cites/MASCHLER_ET_SOLAN_ET_ZAMIR_2013\n#' @templateVar MASCHLER_ET_SOLAN_ET_ZAMIR_2013_P p. 792\n#' @template cites/OSBORNE_ET_RUBINSTEIN_1994\n#' @templateVar OSBORNE_ET_RUBINSTEIN_1994_P p. 261 \n#' @inheritParams CoopGameBaseParams\n#' @return \\code{TRUE} if the game is additive, else \\code{FALSE}\n#' @examples\n#' \n#' #The following game is not additive\n#' library(CoopGame)\n#' A=c(0,0,0,40,50,20,100)\n#' isAdditiveGame(A) \n#' \n#' #The following game is additive\n#' library(CoopGame)\n#' A=c(1,1,1,1, 2,2,2,2,2,2, 3,3,3,3, 4)\n#' isAdditiveGame(A)\n#'\nisAdditiveGame<-function(A){\n  isA=GamePropertyAdditivity(A)\n  return(determineProperty(isA))\n}\n\nlogicIsAdditiveGame<-function(A){\n  # validate parameter\n  #get number of players\n  numberOfPlayers=getNumberOfPlayers(A)\n\n  #result value\n  result<-TRUE\n\n  #create bitmatrix (for each possible coalition of players)\n  bitMatrix=createBitMatrix(n = numberOfPlayers, A)\n\n  #start checking at a set of two\n  i<-numberOfPlayers+1\n  end<-nrow(bitMatrix)\n\n  bounds<-factorial(numberOfPlayers)/(factorial(1:(numberOfPlayers-1))*factorial((numberOfPlayers-1):1))\n\n  while(i<=end){\n\n    #number of players in the set which is checked\n    numberOfCurrSet<-sum(bitMatrix[i,1:numberOfPlayers])\n    #upper bound for combinations which has to be checked\n    currCheckComb<-sum(bounds[1:(numberOfCurrSet-1)])\n    #lower bound for combinations to check for current set\n    if(numberOfCurrSet/2==1){\n      lowerBound = 0\n    }else{\n      lowerBound<-sum(bounds[1:(ceiling(numberOfCurrSet/2)-1)])\n    }\n\n    #payoff for the current set of players\n    payOffUnion = bitMatrix[[i,\"cVal\"]]\n\n    while(currCheckComb > lowerBound){\n\n      hitSetCount<-sum(bitMatrix[i,1:numberOfPlayers]&bitMatrix[currCheckComb,1:numberOfPlayers])\n      hitSetCountSubset<-sum(bitMatrix[currCheckComb,1:numberOfPlayers])\n      #check only those combinations which hit the current combi at least for the half\n      #of the set which is checked\n      if(hitSetCount>=numberOfCurrSet/2 && hitSetCount==hitSetCountSubset){\n\n        #go through combinations for the current set to check if it's additive\n        payOffS = bitMatrix[[currCheckComb,\"cVal\"]]\n        payOffT = A[indexCoalition(numberOfPlayers, setdiff(which(bitMatrix[i,1:numberOfPlayers]&1), which(bitMatrix[currCheckComb,1:numberOfPlayers]&1)))]\n        result = (payOffUnion == payOffS + payOffT)\n        if(!result){\n          return(result)\n        }\n      }\n\n      currCheckComb<-currCheckComb-1\n    }\n\n    i<-i+1\n  }\n\n  return(result)\n}\n\n#' @title GamePropertyAdditivity\n#' @noRd\n#' @include GameProperty.R\n#' #@exportClass GamePropertyAdditivity\n\nsetClass(\n  \"GamePropertyAdditivity\",\n  contains = \"GameProperty\"\n)\n\n#' @title Constructor for GamePropertyAdditivity\n#' @noRd\n#' @template author/JA\n#' @name GamePropertyAdditivity\n#' #@export\nGamePropertyAdditivity<-function(A){\n  retGamePropertyAdditivity=methods::new(\"GamePropertyAdditivity\",A)\n  return(retGamePropertyAdditivity)\n}\n\n#' @rdname determineProperty-methods\n#' @aliases determineProperty,GamePropertyAdditivity-method\nsetMethod(\n  \"determineProperty\",\n  signature=\"GamePropertyAdditivity\",\n  definition=function(.Object){\n    A<-.Object@A\n    result=logicIsAdditiveGame(A)\n    return(result)\n  }\n)\n\n\n\n",
    "created" : 1534234308075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1336610568",
    "id" : "DDD5C6E",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/GamePropertyAdditivity.R",
    "project_path" : "R/GamePropertyAdditivity.R",
    "properties" : {
    },
    "relative_order" : 33,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}