{
    "collab_server" : "",
    "contents" : "---\ntitle: \"The Class **cFuncGlove** as an example\"\nauthor: \"Johannes Anwander\"\ndate: \"31 MÃ¤rz 2018\"\noutput: pdf_document\n---\n### The Class cFuncGlove as an example\nThe class **cFuncGlove** gets defined as sibling of **CoopGameCFunc** and with two additional slots **L** and **R** where **L** carries the information about the players possessing one left and **R** one right glove.\n```{r, eval = FALSE}\nsetClass(\n  \"**cFuncGlove**\",\n  representation(L=\"numeric\",R=\"numeric\"),\n  contains = \"CoopGameCFunc\",\n  validity = function(object){\n    paramCheckResult=getEmptyParamCheckResult()\n    stopOnInvalidLeftRightCFuncGlove(\n      paramCheckResult,\n      L=object@L,\n      R=object@R,\n      N=union(object@L,object@R)\n    )\n  }\n)\n```\n\nThe method **inialize** sets the slot for **L** and **R** then calls the initialization method of its parent class.  \n```{r, eval = FALSE}\nsetMethod(\n  f=\"initialize\",\n  signature = \"**cFuncGlove**\",\n  definition=function(.Object,...,L=L,R=R){\n    .Object@L<-L\n    .Object@R<-R\n    .Object<-methods::callNextMethod(.Object, ...)\n    return(.Object)\n  }\n)\n```\nMoreover the class **cFuncGlove** needs to implement the method **getCoalitionValue**.\n```{r, eval = FALSE}\nsetMethod(\n  \"getCoalitionValue\",\n  signature=\"**cFuncGlove**\",\n  definition=function(.Object,S,...){\n    return(logicCFuncGloveValue(S,L=.Object@L,R=.Object@R))\n  }\n)\n```\nThe function **logicCFuncGloveValue**, which is called in the method **getCoalitionValue** bears the logic for the glove game.\nFor a coalition **S** as well as a set of players having left and a set having right gloves it determines the number of matched pairs.\n```{r, eval = FALSE}\nlogicCFuncGloveValue<-function(S, L, R){\n  retVal <-0\n\n  #initialize grand coalition N\n  numberOfPlayers <-length(L)+length(R)\n  N<-as.numeric(1:numberOfPlayers)\n  \n  compareVector<-c()\n  #left side\n  compareVector[1]<-length(intersect(S, L))\n  #right side\n  compareVector[2]<-length(intersect(S, R))\n  #return min value of intersected sets' length\n  retVal<-min(compareVector, na.rm = TRUE)\n\n  return (retVal)\n}\n```\nFurthermore wrapper functions are provided to the user for retrieving an instance of **cFuncGlove** by the homonymous function, the vector by **cFuncGloveVector** and its value by **cFuncGloveValue**.\n",
    "created" : 1534238834756.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1976610559",
    "id" : "B6BDF4F5",
    "lastKnownWriteTime" : 1538064321,
    "last_content_update" : 1538064321876,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/vignettes/chapters/07/02/01/#The_Class_cFuncGlove_as_an_example.Rmd",
    "project_path" : "vignettes/chapters/07/02/01/#The_Class_cFuncGlove_as_an_example.Rmd",
    "properties" : {
    },
    "relative_order" : 49,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}