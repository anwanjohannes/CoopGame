{
    "collab_server" : "",
    "contents" : "#' @name centroidReasonableSet\n#' @title centroidReasonableSet\n#' @description Calculates the centroid of the reasonable set for specified game.\n#' @aliases centroidReasonableSet\n#' @export centroidReasonableSet\n#' @template author/JS\n#' @template cites/MILNOR_1953\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 21\n#' @template cites/CHAKRAVARTY_ET_AL_2015\n#' @templateVar CHAKRAVARTY_ET_AL_2015_P p. 43 ff.\n#' @inheritParams CoopGameBaseParams\n#' @return Calculates the centroid of the reasonable set for a game specified by a game vector A.\n#' @examples\n#' #Example for centroid of the reasonable set\n#' A=c(0,0,0,2,2,3,5)\n#' centroidReasonableSet(A) \n#' #[1] 1 2 2\n#' \ncentroidReasonableSet<-function(A){\n  tv=CentroidReasonableSetConcept(A)\n  return(calculatePointSolution(tv))\n}\n\nlogicCentroidReasonableSet<-function(A){\n  retVal=NULL\n  n=getNumberOfPlayers(A)\n  N=length(A)\n  setVertices=reasonableSetVertices(A)\n  \n  if(!isEssentialGame(A) || (nrow(setVertices) == 0) ){\n    print(\"Reasonable set is empty and so no centroid of the reasonable set can be retrieved\")\n  }else{\n    setVertices=reasonableSetVertices(A)\n    centroid=colSums(setVertices)/nrow(setVertices)\n    retVal = centroid\n  }\n  return(retVal)\n}\n\n\n#' @title CentroidReasonableSetConcept - S4 class for centroid reasonable set concept\n#' @name CentroidReasonableSetConceptClass\n#' @noRd\n#' @description S4 class containing logic for solving centroid reasonable set concept\n#' @include PointSolutionConcept.R\n#' #@exportClass CentroidReasonableSetConcept\n\nsetClass(\n  \"CentroidReasonableSetConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @title Constructor for CentroidReasonableSetConcept\n#' @noRd\n#' @template author/JS\n#' @name CentroidReasonableSetConcept\n#' @inheritParams CoopGameBaseParams\n#'# @export\nCentroidReasonableSetConcept<-function(A){\n  retCentroidReasonableSetConcept=methods::new(\"CentroidReasonableSetConcept\",A)\n  return(retCentroidReasonableSetConcept)\n}\n#' @rdname calculatePointSolution-methods\n#' @aliases calculatePointSolution,CentroidReasonableSetConcept-method\nsetMethod(\n  \"calculatePointSolution\",\n  signature=\"CentroidReasonableSetConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicCentroidReasonableSet(A))\n  }\n)\n\n#' @name drawCentroidReasonableSet\n#' @title drawCentroidReasonableSet for 3 or 4 players\n#' @family CentroidReasonableSetConcept\n#' @family PointSolutionConcept\n#' @description drawCentroidReasonableSet draws the centroid of the reasonable set for 3 or 4 players.\n#' @aliases drawCentroidReasonableSet\n#' @export drawCentroidReasonableSet\n#' @template author/JS\n#' @template cites/MILNOR_1953\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 21\n#' @template cites/CHAKRAVARTY_ET_AL_2015\n#' @templateVar CHAKRAVARTY_ET_AL_2015_P p. 43 ff.\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @examples\n#' A=c(0,0,5,4,8,9,12)\n#' drawCentroidReasonableSet(A,colour=\"green\")\ndrawCentroidReasonableSet<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"centroid of reasonable set\"){\n  A=GameVector(A)\n  pcn=centroidReasonableSet(A);\n  visualize(A, pointsToDraw=pcn, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1534321905699.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "374005250",
    "id" : "1C87C308",
    "lastKnownWriteTime" : 1534321922,
    "last_content_update" : 1534321922068,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/CentroidReasonableSetConcept.R",
    "project_path" : "R/CentroidReasonableSetConcept.R",
    "properties" : {
    },
    "relative_order" : 71,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}