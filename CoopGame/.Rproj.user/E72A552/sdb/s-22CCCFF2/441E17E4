{
    "collab_server" : "",
    "contents" : "#Date: 20151227\n#File description of test_indexCalculations_13.R:\n#File aims at offering tests for functions which allows to determine the corresponding index of row in bit matrix or game vector in respect of specified coalition properties.\n#First Section (tests for index search functions and specific parameter check function)\n#-indexCoalition (Check 13.1 and 13.2)\n#-indexCoalitionByBitVector (Check 13.3)\n#Second section (tests for reverse search functions):\n#-getPlayersFromIndex\n#Third section of IndexCalculations.R contains search helper functions:\n#-calcDistance (Check 13.5)\n#-getStartPosition (Check 13.6)\n#-indexLower (Check 13.7)\n#-indexUpper (Check 13.8)\n\nboolSkip=T\n\n#with TEST_ITERATIONS is specified how often random test cases should be performed\nTEST_ITERATIONS=20\n\n#with MAX_NUMBER_OF_PLAYERS the maximal number of involved players is specified\nMAX_NUMBER_OF_PLAYERS=10\n\n#First Section: START\n\ntest_that(\"Check 13.1 - indexCoalition test for identifying position of coalition in a bit matrix bm with a random number of players n\" ,{\n  #For used game vector the aimed coalition value is equal to position (for better testing and number is random)\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n\n\n  for(i in 1:TEST_ITERATIONS){\n    #Select on random number of players n who are involved in the game\n    numberOfPlayers=sample(2:MAX_NUMBER_OF_PLAYERS,1)\n\n    #Select randomly subset of all players n for coalition S (number as well as selection of player is casual)\n    S=sort(sample(1:numberOfPlayers,sample(1:numberOfPlayers,1),replace = FALSE))\n\n    #create bit matrix\n    bm=createBitMatrix(numberOfPlayers)\n\n    #Calculate index for coalition in bit matrix\n    indexC=indexCoalition(numberOfPlayers, S)\n\n    #Get for indexC involved player from bit matrix\n    identifiedPlayers=sort(getPlayersFromBMRow(bmRow = bm[indexC,]))\n\n    #Compare if players extracted (identifiedPlayers) from bit matrix on indexC is same to original set of players S\n    expect_equal(S, identifiedPlayers)\n  }\n})\n\ntest_that(\"Check 13.2 - indexCoalition test for identifying position of coalition for all possibilities when maximal number of players is MAX_NUMBER_OF_PLAYERS\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n\n  for(n in 2:MAX_NUMBER_OF_PLAYERS){\n    #Get all possible coalitions in binary (member: 1 -> involved; 0 -> not involved)\n    coalitions=createBitMatrix(n)\n    for(i in 1:nrow(coalitions)){\n      #Get vector S with involved players\n      S=unname(which(coalitions[i,1:n]&1))\n\n      #Calculate index for coalition in bit matrix\n      indexC=indexCoalition(n, S)\n\n      #Get involved player from bit matrix for indexC\n      identifiedPlayers=sort(getPlayersFromBMRow(bmRow = coalitions[indexC,]))\n\n      #Compare if players extracted (identifiedPlayers) from bit matrix on indexC is same to original set of players S\n      expect_equal(S, identifiedPlayers)\n    }\n  }\n})\n\ntest_that(\"Check 13.3 - indexCoalitionByBitVector test for identifying position of coalition in a bit matrix bm for all possibilities when maximal number of players is MAX_NUMBER_OF_PLAYERS\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n\n  for(n in 2:MAX_NUMBER_OF_PLAYERS){\n    #Get all possible coalitions in binary (member: 1 -> involved; 0 -> not involved)\n    coalitions=createBitMatrix(n)\n    for(i in 1:nrow(coalitions)){\n      #Get bit vector with involved players\n      bitVector=unname(coalitions[i,1:n])\n\n      #Calculate index for coalition in bit matrix\n      indexC=indexCoalitionByBitVector(n, bitVector)\n\n      expect_equal(indexC, i)\n    }\n  }\n\n})\n\n#First Section: END\n\n#Second Section: START\n\n\ntest_that(\"Check 13.4 - getPlayersFromIndex test: Checks all possibilities when maximal number of players is MAX_NUMBER_OF_PLAYERS\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n\n  for(n in 2:MAX_NUMBER_OF_PLAYERS){\n    #Get all possible coalitions in binary (member: 1 -> involved; 0 -> not involved)\n    coalitions=createBitMatrix(n)\n    for(i in 1:nrow(coalitions)){\n      #Get bit vector with involved players from bit matrix to compare\n      expectedS=unname(which(coalitions[i,1:n]&1))\n\n      #Use function for detecting involved players\n      detectedS=getPlayersFromIndex(n,i)\n\n      expect_equal(expectedS, detectedS)\n    }\n  }\n\n\n\n})\n\n#Second Section: END\n\n#Third section: START\ntest_that(\"Check 13.5 - calcDistance test: Checks various exemplary test cases\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n\n  #  createBitMatrix(n=6)[22:41,]\n  # Output (bit matrix entries for n=6 players where number of involved players is 3):\n  #  [1,]  1 1 1 0 0 0    0 <=TC1\n  #  ...\n  #  [11,] 0 1 1 1 0 0    0 <=TC2\n  #  ...\n  #  [17,] 0 0 1 1 1 0    0 <=TC3\n\n  expect_equal(calcDistance(dif=1,n=6,b=3),0) #TC1\n  expect_equal(calcDistance(dif=2,n=6,b=3),10) #TC2\n  expect_equal(calcDistance(dif=3,n=6,b=3),16) #TC3\n})\n\n\n\ntest_that(\"Check 13.6 - getStartPosition test: Check for 3 and 4 players\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n# createBitMatrix(n=3)\n# Output:\n#               cVal\n#   [1,] 1 0 0    0 #TC1\n#   [2,] 0 1 0    0 #TC4\n#   [3,] 0 0 1    0 #TC6\n#   [4,] 1 1 0    0 #TC2\n#   [5,] 1 0 1    0\n#   [6,] 0 1 1    0 #TC5\n#   [7,] 1 1 1    0 #TC3\n  expect_equal(getStartPosition(1,n=3,b=1),1) #TC1\n  expect_equal(getStartPosition(1,n=3,b=2),4) #TC2\n  expect_equal(getStartPosition(1,n=3,b=3),7) #TC3\n  expect_equal(getStartPosition(2,n=3,b=1),2) #TC4\n  expect_equal(getStartPosition(2,n=3,b=2),6) #TC5\n  expect_equal(getStartPosition(3,n=3,b=1),3) #TC6\n\n# createBitMatrix(n=4)\n# Output:\n#                   cVal\n#   [1,]  1 0 0 0    0  #TC1\n#   [2,]  0 1 0 0    0  #TC5\n#   [3,]  0 0 1 0    0  #TC8\n#   [4,]  0 0 0 1    0  #TC10\n#   [5,]  1 1 0 0    0  #TC2\n#   [6,]  1 0 1 0    0\n#   [7,]  1 0 0 1    0\n#   [8,]  0 1 1 0    0  #TC6\n#   [9,]  0 1 0 1    0\n#   [10,] 0 0 1 1    0  #TC9\n#   [11,] 1 1 1 0    0  #TC3\n#   [12,] 1 1 0 1    0\n#   [13,] 1 0 1 1    0\n#   [14,] 0 1 1 1    0  #TC7\n#   [15,] 1 1 1 1    0  #TC4\n  #player 1\n  expect_equal(getStartPosition(1,n=4,b=1),1) #TC1\n  expect_equal(getStartPosition(1,n=4,b=2),5) #TC2\n  expect_equal(getStartPosition(1,n=4,b=3),11) #TC3\n  expect_equal(getStartPosition(1,n=4,b=4),15) #TC4\n  #player 2\n  expect_equal(getStartPosition(2,n=4,b=1),2) #TC5\n  expect_equal(getStartPosition(2,n=4,b=2),8) #TC6\n  expect_equal(getStartPosition(2,n=4,b=3),14) #TC7\n  #player 3\n  expect_equal(getStartPosition(3,n=4,b=1),3) #TC8\n  expect_equal(getStartPosition(3,n=4,b=2),10) #TC9\n  #player 4\n  expect_equal(getStartPosition(4,n=4,b=1),4) #TC10\n})\n\ntest_that(\"Check 13.7 - indexLower test: Check exemplary for 3, 4 and 5 players\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  #For 3 players\n  expect_equal(indexLower(n=3,b=1),1)\n  expect_equal(indexLower(n=3,b=2),4)\n  expect_equal(indexLower(n=3,b=3),7)\n\n  #For 4 players\n  expect_equal(indexLower(n=4,b=1),1)\n  expect_equal(indexLower(n=4,b=2),5)\n  expect_equal(indexLower(n=4,b=3),11)\n  expect_equal(indexLower(n=4,b=4),15)\n\n  #For 5 players\n  expect_equal(indexLower(n=5,b=1),1)\n  expect_equal(indexLower(n=5,b=2),6)\n  expect_equal(indexLower(n=5,b=3),16)\n  expect_equal(indexLower(n=5,b=4),26)\n  expect_equal(indexLower(n=5,b=5),31)\n\n})\n\ntest_that(\"Check 13.8 - indexUpper test: Check exemplary for 3, 4 and 5 players\" ,{\n\n  if(boolSkip){\n    skip(\"Test was skipped\")\n  }\n  #For 3 players\n  expect_equal(indexUpper(n=3,b=1),3)\n  expect_equal(indexUpper(n=3,b=2),6)\n  expect_equal(indexUpper(n=3,b=3),7)\n\n  #For 4 players\n  expect_equal(indexUpper(n=4,b=1),4)\n  expect_equal(indexUpper(n=4,b=2),10)\n  expect_equal(indexUpper(n=4,b=3),14)\n  expect_equal(indexUpper(n=4,b=4),15)\n\n  #For 5 players\n  expect_equal(indexUpper(n=5,b=1),5)\n  expect_equal(indexUpper(n=5,b=2),15)\n  expect_equal(indexUpper(n=5,b=3),25)\n  expect_equal(indexUpper(n=5,b=4),30)\n  expect_equal(indexUpper(n=5,b=5),31)\n\n})\n#Third section: END\n\n\n",
    "created" : 1537293811218.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2063365724",
    "id" : "441E17E4",
    "lastKnownWriteTime" : 1538064322,
    "last_content_update" : 1538064322071,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/tests/testthat/test_13_IndexCalculations.R",
    "project_path" : "tests/testthat/test_13_IndexCalculations.R",
    "properties" : {
    },
    "relative_order" : 138,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}