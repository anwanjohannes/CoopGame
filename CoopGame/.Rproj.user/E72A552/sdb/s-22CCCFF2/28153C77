{
    "collab_server" : "",
    "contents" : "#' @name getMarginalContributions\n#' @title matrix with marginal contributions\n#' @description Calculates the marginal contributions for all players and coalitions\n#' @aliases getMarginalContributions\n#' @export getMarginalContributions\n#' @importFrom gtools permutations\n#' @template author/AT\n#' @template cites/PETERS_2015\n#' @templateVar PETERS_2015_P p. 156 ff.\n#' @template cites/BRANZEI_ET_AL_2006\n#' @templateVar BRANZEI_ET_AL_2006_P p. 6 f.\n#' @template param/A\n#' @return a list with given game vector, a matrix of combinations\n#'          used and matrix with marginal contributions\n#' @examples\n#' #glove game with l={1}, r={2,3} with 3 players\n#' library(CoopGame)\n#' A=c(0,0,0,1,1,0,1)\n#'\n#' getMarginalContributions(A)\n\n\ngetMarginalContributions <- function(A) {\n  # validate parameter\n  paramCheckResult <- getEmptyParamCheckResult()\n  retVal<-0\n  numberOfPlayers=log2(length(A)+1)\n  \n  #initialize the result matrix\n  marginalValue=matrix()\n  #initialize matrix/array with all permutations for the order of the players\n  #p<-permn(numberOfPlayers)\n  p<-gtools::permutations(n = numberOfPlayers, r = numberOfPlayers)\n  #initialize matrix with marginal values for each order-permutation for each player\n  marginalValue = matrix(nrow = (nrow(p)), ncol = numberOfPlayers)\n\n  #initialize column and row variables for matrix of marginal contributions\n  i<-1\n  j<-1\n  #number of rows and number of permutations is n!+1\n  #numRows<-length(p)\n  numRows<-nrow(p)\n  while (i<=numRows) {\n    #size of each permutation is number of players\n    while(j<=numberOfPlayers){\n      #check if current player is first player in order\n      #if(j == p[[i]][1]){\n      if(j == p[i,1]){\n        marginalValue[i,j]<-A[j]\n      }else{\n        #get index position for current player in current permutation\n        #curPos<-which(p[[i]]==j)\n        curPos<-which(p[i,]==j)\n        #save vector with players including current player\n        #setWithCurPlayer <- p[[i]][1:curPos]\n        setWithCurPlayer <- p[i,1:curPos]\n        #save vector without current player\n        #setWithoutCurPlayer <- p[[i]][1:(curPos-1)]\n        setWithoutCurPlayer <- p[i,1:(curPos-1)]\n        #sort sets\n        setWithCurPlayer<-sort(setWithCurPlayer, decreasing = FALSE)\n        setWithoutCurPlayer<-sort(setWithoutCurPlayer, decreasing = FALSE)\n        #get index of current coalition of players in 'all combination'-list\n        indxWithCurPlayer<-indexCoalition(numberOfPlayers, setWithCurPlayer)\n        indxWithoutCurPlayer<-indexCoalition(numberOfPlayers, setWithoutCurPlayer)\n        #calculate marginalvalue for current player\n        marginalValue[i,j] <- A[indxWithCurPlayer]-A[indxWithoutCurPlayer]\n      }\n      j=j+1\n    }\n    j=1\n    i=i+1\n  }\n  retVal=list(A=A,combinations=p,marginal_values=marginalValue)\n  \n  return (retVal)\n}\n\n",
    "created" : 1525209220564.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2893079116",
    "id" : "28153C77",
    "lastKnownWriteTime" : 1537215659,
    "last_content_update" : 1537215659,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/getMarginalContributions.R",
    "project_path" : "R/getMarginalContributions.R",
    "properties" : {
    },
    "relative_order" : 21,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}