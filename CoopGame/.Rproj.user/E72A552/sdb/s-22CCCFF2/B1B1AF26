{
    "collab_server" : "",
    "contents" : "#' @name gatelyValue\n#' @title gatelyValue for calculating the Gately Point\n#' @description gatelyValue calculates the Gately Point for a  a certain game vector A\n#' @aliases gatelyValue\n#' @export gatelyValue\n#' @template author/JA\n#' @template cites/GATELY_1974\n#' @templateVar GATELY_1974_P pp. 195 -- 208\n#' @template cites/NARAHARI_2015\n#' @templateVar NARAHARI_2015_P  p. 455 f.\n#' @inheritParams CoopGameBaseParams\n#' @return gately value or NULL when not definite\n#' @examples\n#' A=c(0,0,0,4,0,3,6)\n#' gatelyValue(A)\n#'\n#' #Output (18/11,36/11,12/11):\n#' #1.636364 3.272727 1.090909\n#' \n#' #GATELY 1972\n#' A=c(0,0,0,1170,770,210,1530)\n#' gatelyValue(A)\n#' \n#' #Output:\n#' #827.7049 476.5574 225.7377 \n#' \ngatelyValue<-function(A){\n  bv=GatelyConcept(A)\n  return(calculatePointSolution(bv))\n}\n\n\nlogicGatelyValue<-function(A){\n  # J.Staudacher: This code needs changes ...\n  # assign number of coalitions\n  N <- length(A)\n\n  # assign number of players\n  n <- getNumberOfPlayers(A)\n  \n  gatelyValue <- NULL\n  \n  if(!isEssentialGame(A)){\n    print(\"Gately Value does not exist as imputation set is empty.\")\n  }else if(!((sum(A[1:n])<A[N]))){\n    print(\"Gately Value does not exist as A shows is no strict imputation set.\")\n  }else{\n    eptd=equalPropensityToDisrupt(A,k=1)\n    if(eptd==-1){\n      additionVectorComplements=sapply(\n                                  1:n,\n                                  function(ix){A[ix]+A[N-ix]}\n                                )\n      if(all(additionVectorComplements==A[N],TRUE)){\n        msg=\"Gately Value is not unique as equal with imputation set,\"\n        msg=paste(msg,\"therefore centroid of the imputation set\" )\n        msg=paste(msg,\"was defined as solution.\")\n        setVertices=imputationsetVertices(A)\n        centroid=colSums(setVertices)/n\n        gatelyValue=centroid\n        print(msg)\n      }else{\n        print(\"No solution existing\")\n      }\n    }else{\n      coeffMat<-createBitMatrix(n,A)[indexLower(n,n-1):(N-1),]\n      coeffMat[,1:n][coeffMat[,1:n]==0]=-eptd\n      coeffMat[,\"cVal\"]=rev(\n                          sapply(\n                            1:n,\n                            function(ix){\n                              coeffMat[((n+1)-ix),\"cVal\"]-eptd*A[ix]\n                            }\n                          )\n                        )\n      gatelyValue=tryCatch(\n        solve(coeffMat[,1:n],coeffMat[,\"cVal\"]),\n        error=function(x){NULL}\n      )\n      if(!isImputation(x=gatelyValue,A)){\n        gatelyValue=NULL\n        print(\"Calculated value is no imputation hence no Gately Value exists.\")\n      }\n    }\n    \n  }\n  names(gatelyValue)<-NULL\n  return(gatelyValue)\n}\n\n\n#' @name equalPropensityToDisrupt\n#' @title equalPropensityToDisrupt for calculating coalition's index\n#' @description equalPropensityToDisrupt calculates the equal propensity to disrupt for a specified number of players k  has either in a bit matrix or in a game vector where n players are involved in the game\n#' @aliases equalPropensityToDisrupt\n#' @export equalPropensityToDisrupt\n#' @template author/JA\n#' @template cites/LITTLECHILD_ET_VAIDYA_1976\n#' @templateVar LITTLECHILD_ET_VAIDYA_1976_P pp. 151 -- 161\n#' @template param/A\n#' @param k is the number of players which should be considered when calculating the equal propensity to disrupt\n#' @return the value for the equal propensity to disrupt\n#' @examples\n#' A=c(0,0,0,4,0,3,6)\n#' equalPropensityToDisrupt(A, k=1)\n#'\n#' #Output (5/6):\n#' #0.8333333\n\nequalPropensityToDisrupt<-function(A,k=1){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_equalPropensityToDisrupt(paramCheckResult,A)\n  \n  n=as.numeric(getNumberOfPlayers(A))\n  bm=createBitMatrix(n)\n\n  bm[,\"cVal\"]=apply(bm,1,sum)\n  pos_n_min_k=which(bm[,\"cVal\"]==(n-k))\n  pos_k=which(bm[,\"cVal\"]==(k))\n\n\n  vN=A[length(A)]\n\n  factorNumerator=factorial(n-1)/(factorial(k)*factorial(n-k-1))\n  sum_N_min_S=sum(A[pos_n_min_k])\n\n  factorDenominator=factorial(n-1)/(factorial(k-1)*factorial(n-k))\n  sum_S=sum(A[pos_k])\n\n  numerator=factorNumerator*vN - sum_N_min_S\n  denominator=factorDenominator*vN - sum_S\n\n  if(denominator==0){\n    dk=Inf\n  }else{\n    dk=numerator/denominator\n  }\n\n  return(dk)\n\n}\n\ninitialParamCheck_equalPropensityToDisrupt<-function(paramCheckResult,A){\n  stopOnInvalidGameVectorA(paramCheckResult,A)\n}\n\n\n#' @name propensityToDisrupt\n#' @title propensityToDisrupt for calculating the propensity of disrupt\n#' @description propensityToDisrupt for calculating the propensity of disrupt for game vector A, an allocation x and a specified coalition S'\n#' @aliases propensityToDisrupt\n#' @export propensityToDisrupt\n#' @template author/JA\n#' @template author/JS\n#' @template param/A\n#' @template param/x\n#' @template param/S\n#' @return propensity to disrupt as numerical value\n#' @examples\n#' A=c(0,0,0,4,0,3,6)\n#' x=c(2,3,1)\n#' propensityToDisrupt(A,x,S=c(1))\n#' #Output\n#' #0.5\n#' propensityToDisrupt(A,x,S=c(2))\n#' #Output\n#' #1\n#' propensityToDisrupt(A,x,S=c(3))\n#' #Output\n#' #1\n\npropensityToDisrupt<-function(A,x,S){\n  paramCheckResult=getEmptyParamCheckResult()\n  initialParamCheck_propensityToDisrupt(paramCheckResult,A, x, S)\n  retVal = 0\n  \n  n=as.numeric(getNumberOfPlayers(A))\n  N=2^n\n  # return 0 for grand coalition\n  if (length(S) < n)\n  {\n    N_min_S=c(1:n)[-S]\n  \n    nominator=(sum(x[N_min_S])-A[indexCoalition(n,N_min_S)])\n    denominator=(sum(x[S])-A[indexCoalition(n,S)])\n    di_x=nominator/denominator\n  \n    # if(is.nan(di_x)){\n    #   di_x=0\n    # }\n    retVal = di_x\n }\n return(retVal)\n}\n\ninitialParamCheck_propensityToDisrupt<-function(paramCheckResult,A,x,S){\n  stopOnInvalidGameVectorA(paramCheckResult,A)\n  stopOnInvalidCoalitionS(paramCheckResult, S)\n  stopOnInvalidAllocation(paramCheckResult, x)\n}\n\n#' @name getVectorOfPropensitiesToDisrupt\n#' @title getVectorOfPropensityToDisrupt for calculating the vector of propensities to disrupt'\n#' @description vector of propensities to disrupt for game vector A and an allocation x'\n#' @aliases getVectorOfPropensitiesToDisrupt\n#' @export getVectorOfPropensitiesToDisrupt\n#' @template author/JS\n#' @template param/A\n#' @template param/x\n#' @return a numerical vector of propensities to disrupt at allocation x\n#' @examples\n#' A=c(0,0,0,4,0,3,6)\n#' x=c(2,3,1)\n#' getVectorOfPropensitiesToDisrupt(A,x)\n#' #Output\n#' #[1] 0.5 1.0 1.0 1.0 1.0 2.0 0.0\n#'\n\ngetVectorOfPropensitiesToDisrupt<-function(A,x){\n  paramCheckResult=getEmptyParamCheckResult()\n  \n  n=getNumberOfPlayers(A);\n  propensitiesVector = numeric(length(A))\n  for (i in 1:length(A))\n  {\n    S = as.vector(getPlayersFromIndex(n,i))\n    propensitiesVector[i] = propensityToDisrupt(A,x,S)\n  }\n  # Note that vector of propensities to disrupt set to zero for grand coalition\n  \n  return(propensitiesVector)\n}\n\n\n#' @name getNondefiniteGameVector4GatelyValue\n#' @title getNondefiniteGameVector4GatelyValue for generating a game vector for a not definite solution according to the gately solution concept\n#' @description getNondefiniteGameVector4GatelyValue for generating a game vector for a not definite  solution according to the gately solution concept\n#' @aliases getNondefiniteGameVector4GatelyValue\n#' @export getNondefiniteGameVector4GatelyValue\n#' @template author/JA\n#' @param vN value of grand coalition\n#' @param vSCs is a vector containing the coalition values for the single coalitions\n#' @param w is a vector containing the coalition values for coalitions not considered when calculating the gately value\n#' @return An indefinite game for the solution gately concept considering the specified parameters and an equal propensity to disrupt of minus 1\n#' @examples\n#' A=getNondefiniteGameVector4GatelyValue(10,c(0,1,2,3),w=rep(99,6))\n#' equalPropensityToDisrupt(A) #-1\n\ngetNondefiniteGameVector4GatelyValue<-function(vN, vSCs, w=NULL){\n  n=length(vSCs)\n  N=(2^n)-1\n  \n  A=c()\n  A[1:n]=vSCs\n  \n  if(n>3){\n    lbNIC=n+1\n    ubNIC=indexUpper(n,2)\n    if((ubNIC-lbNIC+1)!=length(w)){\n      stop(\"Parameter w not valid\")\n    }\n    A[lbNIC:ubNIC]=w\n  }\n  \n  \n  lbCC=indexLower(n,(n-1))\n  ubCC=N-1\n  A[lbCC:ubCC]=vN-vSCs[n:1]\n  \n  \n  A[N]=vN\n  return(A)\n}\n\n#' @title GatelyConcept \n#' @noRd\n#' @include PointSolutionConcept.R\n#' #@exportClass GatelyConcept\n\nsetClass(\n  \"GatelyConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @title Constructor for GatelyConcept\n#' @noRd\n#' @template author/JA\n#' @name GatelyConcept\n#' #@export\nGatelyConcept<-function(A){\n  retGatelyConcept=methods::new(\"GatelyConcept\",A)\n  return(retGatelyConcept)\n}\n\n#' @rdname calculatePointSolution-methods\n#' @aliases calculatePointSolution,GatelyConcept-method\nsetMethod(\n  \"calculatePointSolution\",\n  signature=\"GatelyConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicGatelyValue(A))\n  }\n)\n\n#' @name drawGatelyValue\n#' @title drawGatelyValue for 3 or 4 players\n#' @description drawGatelyValue draws the Gately Value for 3 or 4 players.\n#' @aliases drawGatelyValue\n#' @export drawGatelyValue\n#' @template author/JA\n#' @template cites/GATELY_1974\n#' @templateVar GATELY_1974_P pp. 195 -- 208\n#' @template cites/NARAHARI_2015\n#' @templateVar NARAHARI_2015_P  p. 455 f.\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @examples\n#' #GATELY 1972\n#' A=c(0,0,0,1170,770,210,1530)\n#' drawGatelyValue(A)\ndrawGatelyValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Gately Value\"){\n  A=GameVector(A)\n  gatelyValue=gatelyValue(A);\n  visualize(A, pointsToDraw=gatelyValue, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n\n\n",
    "created" : 1534234330504.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3022281806",
    "id" : "B1B1AF26",
    "lastKnownWriteTime" : 1536400553,
    "last_content_update" : 1536400553,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/GatelyConcept.R",
    "project_path" : "R/GatelyConcept.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 34,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}