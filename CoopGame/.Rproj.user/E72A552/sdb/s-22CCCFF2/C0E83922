{
    "collab_server" : "",
    "contents" : "#' @name publicHelpChiIndex\n#' @title publicHelpChiIndex\n#' @description Calculates the Public Help Chi Index for a specified simple TU game.\n#' @aliases publicHelpChiIndex publicHelpIndexChi\n#' @export publicHelpChiIndex\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @template cites/STACH_2016\n#' @templateVar STACH_2016_P pp. 99 -- 110\n#' @inheritParams CoopGameBaseParams\n#' @return Public Help Chi Index for specified simple game \n#' @examples \n#' A=c(0,0,0,1,1,0,1)\n#' publicHelpChiIndex(A) #result: 0.4583333 0.2708333 0.2708333\npublicHelpChiIndex<-function(A){\n  phi=PublicHelpChiIndexConcept(A)\n  return(calculatePowerIndex(phi))\n}\n\n\n\nlogicPublicHelpChiIndex=function(A){\n  retVal = NULL\n  n=getNumberOfPlayers(A)\n  if(!isSimpleGame(A)){\n    print(\"Game is not simple. Therefore no Public Help Chi Index can be retrieved.\")\n  }\n  else\n  {\n    bm=createBitMatrix(n,A)\n    #the winning coalitions\n    wcs=bm[bm[,\"cVal\"]>0,,drop=FALSE]\n    # Loop over all winning coalitions\n    factor1 <- 0\n    tempVariable <- numeric(n)\n    for (i in 1:nrow(wcs))\n    {\n      playersInCoalition = getPlayersFromBMRow(bmRow=wcs[i,])\n      noPlayersInCoalition = length(playersInCoalition)\n      factor1 = factor1 + 1/noPlayersInCoalition\n      for (j in 1:noPlayersInCoalition)\n      {\n        tempVariable[playersInCoalition[j]] = tempVariable[playersInCoalition[j]] + 1/(noPlayersInCoalition^2)\n      }\n    }\n    phiChi=(1/factor1)*tempVariable\n    retVal = phiChi\n  }\n  return(retVal)\n}\n\n#' @title PublicHelpChiIndexConcept\n#' @noRd\n#' @description PublicHelpChiIndexConcept\n#' @include PointSolutionConcept.R\n# @exportClass PublicHelpChiIndexConcept\n\nsetClass(\n  \"PublicHelpChiIndexConcept\",\n  contains = \"PointSolutionConcept\"\n)\n\n#' @rdname calculatePowerIndex-methods\n#' @aliases calculatePowerIndex,PublicHelpChiIndexConcept-method\nsetMethod(\n  \"calculatePowerIndex\",\n  signature=\"PublicHelpChiIndexConcept\",\n  definition=function(.Object){\n    A<-.Object@A\n    return(logicPublicHelpChiIndex(A))\n  }\n)\n\n#' @title Constructor for PublicHelpChiIndexConcept\n#' @noRd\n#' @template author/JS\n#' @name PublicHelpChiIndexConcept\n#' #@export\nPublicHelpChiIndexConcept<-function(A){\n  retPublicHelpChiIndex=methods::new(\"PublicHelpChiIndexConcept\",A)\n  return(retPublicHelpChiIndex)\n}\n\n\n\n#' @name drawPublicHelpChiIndex\n#' @title drawPublicHelpChiIndex for 3 or 4 players\n#' @description drawPublicHelpChiIndex draws the public help chi index for 3 or 4 players.\n#' @aliases drawPublicHelpChiIndex\n#' @export drawPublicHelpChiIndex\n#' @template author/JS\n#' @template cites/BERTINI_ET_STACH_2015\n#' @templateVar BERTINI_ET_STACH_2015_P pp. 9 -- 25\n#' @template cites/STACH_2016\n#' @templateVar STACH_2016_P pp. 99 -- 110\n#' @inheritParams CoopGameBaseParams\n#' @inheritParams visualize\n#' @return Public Help Chi Index for given game vector with 3 or 4 players\n#' @examples\n#' A=c(0,0,0,1,1,0,1)\n#' drawPublicHelpChiIndex(A) \ndrawPublicHelpChiIndex<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = \"Public Help Chi Index\"){\n  A=GameVector(A)\n  sm=publicHelpChiIndex(A);\n  visualize(A, pointsToDraw=sm, holdOn=holdOn, colour = colour , label=label, name = name)\n}\n",
    "created" : 1534235061815.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1446280026",
    "id" : "C0E83922",
    "lastKnownWriteTime" : 1536091312,
    "last_content_update" : 1536091312,
    "path" : "C:/Users/Johannes/Dropbox/UNIVERSITAET/Master_Inf/MASTER_ARBEIT/SVN_REPO/CoopGame/R/PublicHelpChiIndexConcept.R",
    "project_path" : "R/PublicHelpChiIndexConcept.R",
    "properties" : {
    },
    "relative_order" : 41,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}