boolSkip=F


test_that("Check 61.1 - testing method initLPRows of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=new("NucleolusBase",A=A)
  initLPRows(nb)
  
  rlb=c(1, 1, 1, 2, 3, 4, 5)
  rub=c(Inf, Inf, Inf, Inf, Inf, Inf,5)
  rtype=c(2, 2, 2, 2, 2, 2, 5)
  
  expect_equal(getRlb(nb@LPCoopGameUtils),rlb)
  expect_equal(getRub(nb@LPCoopGameUtils),rub)
  expect_equal(getRtype(nb@LPCoopGameUtils),rtype)

})

test_that("Check 61.2 - testing method initLPMatrix of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=new("NucleolusBase",A=A)
  initLPMatrix(nb)
  
  excess=c(rep(1,6),0)
  coeffMat=createBitMatrix(n=3,excess)
  expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
  
  
})

test_that("Check 61.3 - testing method initLPBndsObjCoefs of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=new("NucleolusBase",A=A)
  initLPBndsObjCoefs(nb)
  
  clb=c(0,0,0,-Inf)
  cub=c(Inf, Inf, Inf, Inf)
  ctype=c(2, 2, 2, 1)
  
  expect_equal(getClb(nb@LPCoopGameUtils),clb)
  expect_equal(getCub(nb@LPCoopGameUtils),cub)
  expect_equal(getCtype(nb@LPCoopGameUtils),ctype)
  
})

test_that("Check 61.4 - testing constructor function NucleolusBase of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  
  clb=c(0,0,0,-Inf)
  cub=c(Inf, Inf, Inf, Inf)
  ctype=c(2, 2, 2, 1)
  
  rlb=c(1, 1, 1, 2, 3, 4, 5)
  rub=c(Inf, Inf, Inf, Inf, Inf, Inf,5)
  rtype=c(2, 2, 2, 2, 2, 2, 5)

  
  excess=c(rep(1,6),0)
  coeffMat=createBitMatrix(n=3,excess)
  
  
  expect_equal(getClb(nb@LPCoopGameUtils),clb)
  expect_equal(getCub(nb@LPCoopGameUtils),cub)
  expect_equal(getCtype(nb@LPCoopGameUtils),ctype)
  
  
  expect_equal(getRlb(nb@LPCoopGameUtils),rlb)
  expect_equal(getRub(nb@LPCoopGameUtils),rub)
  expect_equal(getRtype(nb@LPCoopGameUtils),rtype)
  
  expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
  
})


test_that("Check 61.5 - testing method getLPDualSolutionPos of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  solveLP(nb@LPCoopGameUtils)
  expect_equal(getLPDualSolutionPos(nb),c(1,6))
})

test_that("Check 61.5 - testing method updateLPRows of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  solveLP(nb@LPCoopGameUtils)
  updateLPRows(nb)
  
  rlb=c(1, 1, 1, 2, 3, 4, 5)
  rub=c(1, Inf, Inf, Inf, Inf, 4,5)
  rtype=c(5, 2, 2, 2, 2, 5, 5)
  
  expect_equal(getRlb(nb@LPCoopGameUtils),rlb)
  expect_equal(getRub(nb@LPCoopGameUtils),rub)
  expect_equal(getRtype(nb@LPCoopGameUtils),rtype)
})




test_that("Check 61.6 - testing method updateLPMatrix of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  solveLP(nb@LPCoopGameUtils)
  updateLPMatrix(nb)
  
  excess=rep(1,7)
  excess[c(1,6,7)]=0
  coeffMat=createBitMatrix(n=3,excess)
  
  expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
})

test_that("Check 61.7 - testing method updateLPBndsObjCoefs of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  expect_equal(TRUE,TRUE)
})

test_that("Check 61.8 - testing method updateNucleolusBase of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  solveLP(nb@LPCoopGameUtils)
  updateNucleolusBase(nb)
  
  rlb=c(1, 1, 1, 2, 3, 4, 5)
  rub=c(1, Inf, Inf, Inf, Inf, 4,5)
  rtype=c(5, 2, 2, 2, 2, 5, 5)
  
  excess=rep(1,7)
  excess[c(1,6,7)]=0
  coeffMat=createBitMatrix(n=3,excess)
  
  expect_equal(getMatrix(nb@LPCoopGameUtils),coeffMat)
  
  expect_equal(getRlb(nb@LPCoopGameUtils),rlb)
  expect_equal(getRub(nb@LPCoopGameUtils),rub)
  expect_equal(getRtype(nb@LPCoopGameUtils),rtype)
})


test_that("Check 61.8 - testing method getLPRowsBoundsFunc of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  solveLP(nb@LPCoopGameUtils)
  primal=getLPPrimalSolution(nb@LPCoopGameUtils)
  
  coeffMat=createBitMatrix(n=3,c(rep(1,6),1))
  result=apply(coeffMat,1,FUN = getLPRowsBoundsFunc,.Object=nb)
  
  expect_equal(result,c(1, 1, 3, 2, 4, 4, 5) )
})

test_that("Check 61.9 - testing method getExcessCoefficients of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=new("NucleolusBase",A)
  excess=getExcessCoefficients(nb)
  
  expect_equal(excess,c(rep(1,6),0))
})

test_that("Check 61.9 - testing method checkAbort of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  nb=NucleolusBase(rep(-1,7))
  solveLP(nb@LPCoopGameUtils)
  expect_equal(isLPFeasible(nb@LPCoopGameUtils),FALSE)
  expect_error(checkAbort(nb,1))#1 only set for testing
  
  nb=NucleolusBase(c(1, 1, 1, 2, 3, 4, 5))
  solveLP(nb@LPCoopGameUtils)
  expect_equal(isLPFeasible(nb@LPCoopGameUtils),TRUE)
  expect_equal(checkAbort(nb,1),FALSE)#1 only set for testing
  
  nb=NucleolusBase(c(1, 1, 1, 2, 3, 4, 5))
  solveLP(nb@LPCoopGameUtils)
  expect_equal(checkAbort(nb,0),TRUE)
  
  nb=NucleolusBase(c(1, 1, 1, 2, 3, 4, 5))
  solveLP(nb@LPCoopGameUtils)
  coeffMat<-createBitMatrix(n=3,rep(0,7))
  setMatrix(nb@LPCoopGameUtils)<-coeffMat
  expect_equal(checkAbort(nb,1),TRUE)
})

test_that("Check 61.9 - testing method calculateNucleolus of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
 
  expect_equal(nucleolus(A),calculateNucleolus(nb))
})


test_that("Check 61.10 - testing method setA and getA of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  expect_equal(getA(nb),A)
  
  A_new<-rep(9,7)
  setA(nb)<-A_new
  
  expect_equal(getA(nb),A_new)
})

test_that("Check 61.11 - testing method getLPCoopGameUtils of class nucleolusBase" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  nb=NucleolusBase(A)
  lpCoopGameUtils<-getLPCoopGameUtils(nb)
  expect_equal(getRlb(lpCoopGameUtils),A)
})

test_that("Check 61.12 - testing setting new from LPCoopGameUtils derived class" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  A=c(1, 1, 1, 2, 3, 4, 5)
  lpUtilsInterior=LPCoopGameUtilsInterior()
  dn=Nucleolus(A)
  setLPCoopGameUtils(dn)<-lpUtilsInterior
  lpCoopGameUtils<-getLPCoopGameUtils(nb)
  expect_equal(getRlb(lpCoopGameUtils),A)
})


