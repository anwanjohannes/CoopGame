boolSkip=F
samples_3P=sapply(seq(1:1000),function(x){sample(1:20,7,replace = TRUE)},simplify = FALSE)
samples_4P=sapply(seq(1:1000),function(x){sample(1:20,15,replace = TRUE)},simplify = FALSE)


#depreciated functions
essentialgame3 <-function(A){
  
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v123=A[7]
  
  #Code orientiert sich an TugLab. Dateiname: essentialgame
  #Funktion: essentialgame3 Zeile: 85-86
  E= !((v1+v2+v3)>v123);
  D=((v1+v2+v3)==v123);
  
  
  if(E == TRUE & D == TRUE){
    ED=c(1,1)
    return(ED)
  }
  if(E == TRUE & D == FALSE){
    ED=c(1,0)
    return(ED)
  }
  if(E == FALSE & D == TRUE){
    ED=c(0,1)
    return(ED)
  }
  else{
    ED=c(0,0)
    return(ED)
  }
}

essentialgame4 <- function(A){
  
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v4=A[4]
  v1234=A[15]
  
  #Code orientiert sich an TugLab. Dateiname: essentialgame
  #Funktion: essentialgame4 Zeile: 96-97
  E=!((v1+v2+v3+v4)>v1234);
  D=((v1+v2+v3+v4)==v1234);
  
  
  if(E == TRUE & D == TRUE){
    ED=c(1,1)
    return(ED)
  }
  if(E == TRUE & D == FALSE){
    ED=c(1,0)
    return(ED)
  }
  if(E == FALSE & D == TRUE){
    ED=c(0,1)
    return(ED)
  }
  #Bei False ist die Imputationsmenge leer. R?ckgabewert 0
  else{
    ED=c(0,0)
    return(ED)
  }
}

#[1]  1  1  8  2 10 18 20  6  2  8  4  4 20  1  7

test_that("Check 55.1 - test isEssentialGame against essentialgame3" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  for(i in 1:1000){
    P=samples_3P[[i]] #sample(1:20,15,replace = TRUE)
    result=essentialgame3(P)
    result2=isEssentialGame(P)
    expect_equal(result&1, result2)
    # testStatus=try(expect_equal(result&1, result2))
    # if(inherits(testStatus, "try-error")){
    #   failureIndeces_3P<<-c(failureIndeces_3P,i)
    # }
    # 

    }
})
test_that("Check 55.1 - test isEssentialGame against essentialgame4" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  for(i in 1:1000){
    P=samples_4P[[i]]
    result=essentialgame4(P)
    result2=isEssentialGame(P)
    expect_equal(result&1, result2)
  }
})