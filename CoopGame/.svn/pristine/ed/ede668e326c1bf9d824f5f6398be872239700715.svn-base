#' @title Constructor for LPCoopGameUtils
#' @template author/JA
#' @name LPCoopGameUtils
#' @export
LPCoopGameUtils<-function(LPBndsObjCoefs=methods::new("LPBndsObjCoefs"),LPRows=methods::new("LPRows"),LPMatrix=methods::new("LPMatrix"),LPObjDir=GLP_MIN){
  retLPCoopGameUtils=methods::new("LPCoopGameUtils",LPBndsObjCoefs=LPBndsObjCoefs,LPRows=LPRows,LPMatrix=LPMatrix,LPObjDir=LPObjDir)
  return(retLPCoopGameUtils)
}



#' @title LPCoopGameUtils - Linear Programming utils for CoopGame
#' @template author/JA
#' @description An S4 class representing an utility for basic linear programming functionalities (requiring glpkAPI) 
#' as often used in the Game Theory package CoopGame and its derived packages.
#' @include LPRows.R
#' @include LPBndsObjCoefs.R
#' @include LPMatrix.R
#' @name LPCoopGameUtils
#' @import glpkAPI
#' @template slot/LPBndsObjCoefs
#' @template slot/LPRows
#' @template slot/LPMatrix 
#' @template slot/LPObjDir 
#' @template slot/LP
#' @exportClass LPCoopGameUtils





setClass(
  "LPCoopGameUtils",
  representation(
                 LPBndsObjCoefs="LPBndsObjCoefs",
                 LPRows="LPRows",
                 LPMatrix="LPMatrix",
                 LP="glpkPtr",
                 LPObjDir="numeric"
  ),
  prototype = prototype(LPObjDir=GLP_MIN)
  
)


#' @title updateLPCoopGameUtils
#' @noRd
#' @description updateLPCoopGameUtils is updating LPCoopGameUtils according to set class attributes
#' @name updateLPCoopGameUtils
#' @template author/JA
#' @template author/JS
#' @exportMethod updateLPCoopGameUtils
#Class LPCoopGameUtils init
setGeneric(
  "updateLPCoopGameUtils",
  function(.Object){
    standardGeneric("updateLPCoopGameUtils")
  }
)

setMethod(
  "updateLPCoopGameUtils",
  signature = "LPCoopGameUtils",
  function(.Object){
    objLP<-.Object@LP
    N=getNumberOfRows(.Object)
    n=getNumberOfCols(.Object)
    ia <- rep(1:N, each = n)
    ja <- rep(1:(n), N)
    if(isNULLpointerGLPK(objLP)){
      objLP<-initProbGLPK()
      
    }else{
      eraseProbGLPK(objLP)
    }
    addRowsGLPK(objLP, N)
    addColsGLPK(objLP, n)
    setRowsBndsGLPK(objLP, 1:N,    .Object@LPRows@rlb,
                    .Object@LPRows@rub, .Object@LPRows@rtype)
    setColsBndsObjCoefsGLPK(objLP, 1:(n), .Object@LPBndsObjCoefs@clb,.Object@LPBndsObjCoefs@cub,.Object@LPBndsObjCoefs@obj,.Object@LPBndsObjCoefs@ctype)
    setObjDirGLPK(objLP,.Object@LPObjDir)

    loadMatrixGLPK(objLP, N * (n), ia, ja, as.vector(t(.Object@LPMatrix@matrix)))
    eval.parent(substitute(.Object@LP<-objLP))
  }
)

#' @title changeLPCoopGameUtilsObjDirToMin
#' @noRd
#' @description changeLPCoopGameUtilsObjDirToMin changes the lp's optimization flag to minimization
#' @name changeLPCoopGameUtilsObjDirToMin
#' @template author/JA
#' @template author/JS
#' @exportMethod changeLPCoopGameUtilsObjDirToMin

setGeneric(
  "changeLPCoopGameUtilsObjDirToMin",
  function(.Object){
    standardGeneric("changeLPCoopGameUtilsObjDirToMin")
  }
  
)

setMethod(
  "changeLPCoopGameUtilsObjDirToMin",
  signature="LPCoopGameUtils",
  definition=function(.Object){
    objDir=1
    eval.parent(substitute(.Object@LPObjDir<-objDir))
  }
)

#' @title changeLPCoopGameUtilsObjDirToMax
#' @noRd
#' @description changeLPCoopGameUtilsObjDirToMax changes the lp's optimization flag to maximization
#' @name changeLPCoopGameUtilsObjDirToMax
#' @template author/JA
#' @template author/JS
#' @exportMethod changeLPCoopGameUtilsObjDirToMax
#' 
setGeneric(
  "changeLPCoopGameUtilsObjDirToMax",
  function(.Object){
    standardGeneric("changeLPCoopGameUtilsObjDirToMax")
  }
  
)

setMethod(
  "changeLPCoopGameUtilsObjDirToMax",
  signature="LPCoopGameUtils",
  definition=function(.Object){
    objDir=2
    eval.parent(substitute(.Object@LPObjDir<-objDir))
  }
)

#' @title solveLP
#' @noRd
#' @description solveLP
#' @name solveLP
#' @template author/JA
#' @template author/JS
#' @exportMethod solveLP
#' 

setGeneric("solveLP",function(.Object,enableTermOutLP=TRUE){standardGeneric("solveLP")})
setMethod(
  "solveLP",
  signature = "LPCoopGameUtils",
  definition = function(.Object,enableTermOutLP=TRUE){
    if(!isNULLpointerGLPK(.Object@LP)){
      objLP=.Object@LP
      termOutGLPK(ifelse(enableTermOutLP, GLP_ON, GLP_OFF))
      # GLP_SF_2N<-0x20
      # scaleProbGLPK(objLP,GLP_SF_2N)
      solveSimplexGLPK(objLP)
      eval.parent(substitute(.Object@LP<-objLP))
    }
  }
)



#Class LPCoopGameUtils getter for LPBndsObjCoefs
setGeneric("getLPBndsObjCoefs",function(.Object){standardGeneric("getLPBndsObjCoefs")})
setMethod(
  "getLPBndsObjCoefs",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(.Object@LPBndsObjCoefs)
  }
)


#Class LPCoopGameUtils setter for LPBndsObjCoefs

setGeneric("setLPBndsObjCoefs<-",function(.Object,value){standardGeneric("setLPBndsObjCoefs<-")})

setReplaceMethod(
  f="setLPBndsObjCoefs",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    .Object@LPBndsObjCoefs<-value
    return(.Object)
  }
)


#Class LPCoopGameUtils getter for LPRows
setGeneric("getLPRows",function(.Object){standardGeneric("getLPRows")})
setMethod(
  "getLPRows",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(.Object@LPRows)
  }
)


#Class LPCoopGameUtils setter for LPRows
setGeneric("setLPRows<-",function(.Object,value){standardGeneric("setLPRows<-")})

setReplaceMethod(
  f="setLPRows",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    .Object@LPRows<-value
    return(.Object)
  }
)


#Class LPCoopGameUtils getter for LPMatrix
setGeneric("getLPMatrix",function(.Object){standardGeneric("getLPMatrix")})
setMethod(
  "getLPMatrix",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(.Object@LPMatrix)
  }
)


#Class LPCoopGameUtils setter for LPMatrix
setGeneric("setLPMatrix<-",function(.Object,value){standardGeneric("setLPMatrix<-")})

setReplaceMethod(
  f="setLPMatrix",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    .Object@LPMatrix<-value
    return(.Object)
  }
)

 
#Class LPCoopGameUtils getter for LPBndsObjCoefs
setGeneric("getNumberOfCols",function(.Object){standardGeneric("getNumberOfCols")})
setMethod(
  "getNumberOfCols",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(ncol(.Object@LPMatrix@matrix))
  }
)



setGeneric("getNumberOfRows",function(.Object){standardGeneric("getNumberOfRows")})
setMethod(
  "getNumberOfRows",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(nrow(.Object@LPMatrix@matrix))
  }
)




setGeneric("getLPObjVal",function(.Object){standardGeneric("getLPObjVal")})
setMethod(
  "getLPObjVal",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getObjValGLPK(.Object@LP))
  }
)


setGeneric("getLPDualSolution",function(.Object){standardGeneric("getLPDualSolution")})
setMethod(
  "getLPDualSolution",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getRowsDualGLPK(.Object@LP))
  }
)



setGeneric("getLPPrimalSolution",function(.Object){standardGeneric("getLPPrimalSolution")})
setMethod(
  "getLPPrimalSolution",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getColsPrimGLPK(.Object@LP))
  }
)


#Class LPCoopGameUtils getter for LPRows
setGeneric("getPrimStat",function(.Object){standardGeneric("getPrimStat")})
setMethod(
  "getPrimStat",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getPrimStatGLPK(.Object@LP))
  }
)




#Class LPCoopGameUtils getter for LPRows
setGeneric("isLPFeasible",function(.Object){standardGeneric("isLPFeasible")})
setMethod(
  "isLPFeasible",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    boolRetVal=FALSE
    primStat<-getPrimStat(.Object);
    if(primStat==GLP_FEAS){
      boolRetVal=TRUE
    }
    
    return(boolRetVal)
  }
)


setReplaceMethod(
  f="setRub",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setRub(.Object@LPRows)<-value
    return(.Object)
  }
)


setReplaceMethod(
  f="setRlb",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setRlb(.Object@LPRows)<-value
    return(.Object)
  }
)



setReplaceMethod(
  f="setRtype",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setRtype(.Object@LPRows)<-value
    return(.Object)
  }
)





setMethod(
  "getRlb",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getRlb(.Object@LPRows))
  }
)


setMethod(
  "getRub",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getRub(.Object@LPRows))
  }
)


setMethod(
  "getRtype",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getRtype(.Object@LPRows))
  }
)




setMethod(
  "getMatrix",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getMatrix(.Object@LPMatrix))
  }
)


setReplaceMethod(
  f="setMatrix",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setMatrix(.Object@LPMatrix)<-value
    return(.Object)
  }
)



setMethod(
  "getCub",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getCub(.Object@LPBndsObjCoefs))
  }
)


setMethod(
  "getClb",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getClb(.Object@LPBndsObjCoefs))
  }
)


setMethod(
  "getCtype",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getCtype(.Object@LPBndsObjCoefs))
  }
)


setMethod(
  "getObj",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getObj(.Object@LPBndsObjCoefs))
  }
)


setReplaceMethod(
  f="setCub",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setCub(.Object@LPBndsObjCoefs)<-value
    return(.Object)
  }
)


setReplaceMethod(
  f="setClb",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setClb(.Object@LPBndsObjCoefs)<-value
    return(.Object)
  }
)


setReplaceMethod(
  f="setCtype",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setCtype(.Object@LPBndsObjCoefs)<-value
    return(.Object)
  }
)



setReplaceMethod(
  f="setObj",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setObj(.Object@LPBndsObjCoefs)<-value
    return(.Object)
  }
)

#' @title setMatrixLastCol<-
#' @noRd
#' @description setMatrixLastCol<-
#' @name setMatrixLastCol<-
#' @template author/JA
#' @template author/JS
#' @param value numeric vector containing the new coefficients for last column of matrix
#' @exportMethod setMatrixLastCol<-
setReplaceMethod(
  f="setMatrixLastCol",
  signature="LPCoopGameUtils",
  definition=function(.Object,value){
    setMatrixLastCol(.Object@LPMatrix)<-value
    return(.Object)
  }
)


setMethod(
  "getMatrixLastCol",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getMatrixLastCol(.Object@LPMatrix))
  }
)




setGeneric("getLPObjDir",function(.Object){standardGeneric("getLPObjDir")})
setMethod(
  "getLPObjDir",
  signature = "LPCoopGameUtils",
  definition = function(.Object){
    return(getRowsDualGLPK(.Object@LPObjDir))
  }
)
