#' @title NucleolusBase - Basic class for Nucleolus derivatives
#' @noRd
#' @template author/JA
#' @description An S4 class for various solution concepts based on the solution concept of the Nucleolus.
#' @include LPCoopGameUtils.R
#' @include PointSolutionConcept.R
#' @name NucleolusBase
#' @import glpkAPI
#' @template slot/A
# @exportClass NucleolusBase


setClass(
  "NucleolusBase",
  contains = "PointSolutionConcept",
  representation(
    LPCoopGameUtils="LPCoopGameUtils",
    "VIRTUAL"
  )
)



setMethod(
  f="initialize",
  signature = "NucleolusBase",
  definition =  function(.Object, ...) {
    .Object<-methods::callNextMethod(.Object, ...)
    .Object@LPCoopGameUtils<-LPCoopGameUtils()
    initLPMatrix(.Object)
    initLPRows(.Object)
    initLPBndsObjCoefs(.Object)
    updateLPCoopGameUtils(.Object@LPCoopGameUtils)
    return(.Object)
  }
)


#' @title updateNucleolusBase
#' @name updateNucleolusBase
#' @noRd
#' @name updateNucleolusBase
#' @description updateNucleolusBase
#' @template author/JA
# @exportMethod updateNucleolusBase
setGeneric(
  "updateNucleolusBase",
  function(.Object){
    standardGeneric("updateNucleolusBase")
  }
)

setMethod(
  "updateNucleolusBase",
  signature="NucleolusBase",
  definition=function(.Object){
    obj<-.Object
    updateLPMatrix(obj)
    updateLPRows(obj)
    updateLPBndsObjCoefs(obj)
    updateLPCoopGameUtils(obj@LPCoopGameUtils)
    eval.parent(substitute(.Object<-obj))
  }
)

#' @title updateLPBndsObjCoefs
#' @noRd
#' @description updateLPBndsObjCoefs
#' @template author/JA
# @exportMethod updateLPBndsObjCoefs

setGeneric(
  "updateLPBndsObjCoefs",
  function(.Object){
    standardGeneric("updateLPBndsObjCoefs")
  }
)

setMethod(
  "updateLPBndsObjCoefs",
  signature="NucleolusBase",
  definition=function(.Object){
  }
)

#' @title updateLPMatrix
#' @noRd
#' @name updateLPMatrix
#' @description updateLPMatrix
#' @template author/JA
# @exportMethod updateLPMatrix

setGeneric(
  "updateLPMatrix",
  function(.Object){
    standardGeneric("updateLPMatrix")
  }
)

setMethod(
  "updateLPMatrix",
  signature="NucleolusBase",
  definition=function(.Object){
    lpCoopGameUtils<-.Object@LPCoopGameUtils
    excessCoefs=getMatrixLastCol(lpCoopGameUtils)
    pos=getLPDualSolutionPos(.Object)
    excessCoefs[pos]<-0
    setMatrixLastCol(lpCoopGameUtils)<-excessCoefs
    eval.parent(substitute(.Object@LPCoopGameUtils<-lpCoopGameUtils))
  }
)


#' @title getLPCoopGameUtils
#' @noRd
#' @name getLPCoopGameUtils
#' @description getLPCoopGameUtils
#' @template author/JA
# @exportMethod getLPCoopGameUtils

setGeneric(
  "getLPCoopGameUtils",
  function(.Object){
    standardGeneric("getLPCoopGameUtils")
  }
)

setMethod(
  "getLPCoopGameUtils",
  signature="NucleolusBase",
  definition=function(.Object){
    return(.Object@LPCoopGameUtils)
  }
)

#' @title setLPCoopGameUtils
#' @noRd
#' @description setLPCoopGameUtils
#' @name setLPCoopGameUtils
#' @template author/JA
# @exportMethod setLPCoopGameUtils<-
setGeneric(
  "setLPCoopGameUtils<-",
  function(.Object,LPCoopGameUtils){
    standardGeneric("setLPCoopGameUtils<-")
  }

)

setReplaceMethod(
  "setLPCoopGameUtils",
  signature="NucleolusBase",
  definition=function(.Object,LPCoopGameUtils){
    .Object@LPCoopGameUtils<-LPCoopGameUtils
    return(.Object)
  }
)

#' @title setLPCoopGameUtils
#' @noRd
#' @name setLPCoopGameUtils
#' @description setLPCoopGameUtils
#' @template author/JA
# @exportMethod setLPCoopGameUtils<-
setGeneric(
  "setLPCoopGameUtils<-",
  function(.Object, value){
    standardGeneric("setLPCoopGameUtils<-")
  }

)

setReplaceMethod(
  "setLPCoopGameUtils",
  signature="NucleolusBase",
  definition=function(.Object, value){
    .Object@LPCoopGameUtils<-value
    return(.Object)
  }
)
#' @title getLPRowsBoundsFunc
#' @name getLPRowsBoundsFunc
#' @noRd
#' @description getLPRowsBoundsFunc
#' @template author/JA
# @exportMethod getLPRowsBoundsFunc

setGeneric(
  "getLPRowsBoundsFunc",
  function(.Object,x,pos){
    standardGeneric("getLPRowsBoundsFunc")
  }
)

setMethod(
  "getLPRowsBoundsFunc",
  signature="NucleolusBase",
  definition=function(.Object,x,pos){
    primal=getLPPrimalSolution(.Object@LPCoopGameUtils)
    n=length(primal)
    primal=primal[-n]
    return(sum(x[-n] * primal[-n]))
  }
)

#' @title updateLPRows
#' @name updateLPRows
#' @noRd
#' @description updateLPRows
#' @template author/JA
# @exportMethod updateLPRows

setGeneric(
  "updateLPRows",
  function(.Object){
    standardGeneric("updateLPRows")
  }
)

setMethod(
  "updateLPRows",
  signature="NucleolusBase",
  definition=function(.Object){
    lpCoopGameUtils<-.Object@LPCoopGameUtils
    rlb=getRlb(lpCoopGameUtils)
    rub=getRub(lpCoopGameUtils)
    rtype=getRtype(lpCoopGameUtils)
    pos=getLPDualSolutionPos(.Object)
    coeffMat=getMatrix(lpCoopGameUtils)[pos,,drop=FALSE]
    rlb[pos] <- rub[pos] <- apply(
      coeffMat,1,FUN = getLPRowsBoundsFunc,.Object=.Object,pos=pos
    )
    rtype[pos] <- GLP_FX
    setRlb(lpCoopGameUtils)<-rlb
    setRub(lpCoopGameUtils)<-rub
    setRtype(lpCoopGameUtils)<-rtype
    eval.parent(substitute(.Object@LPCoopGameUtils<-lpCoopGameUtils))
  }
)


#' @title getLPDualSolutionPos
#' @description getLPDualSolutionPos
#' @name getLPDualSolutionPos
#' @noRd
#' @template author/JA
# @exportMethod getLPDualSolutionPos

setGeneric(
  "getLPDualSolutionPos",
  function(.Object){
    standardGeneric("getLPDualSolutionPos")
  }
)

setMethod(
  "getLPDualSolutionPos",
  signature="NucleolusBase",
  definition=function(.Object){
    return(which(getLPDualSolution(.Object@LPCoopGameUtils)>0))
  }
)

#' @title initLPRows
#' @noRd
#' @name initLPRows 
#' @description initLPRows
#' @template author/JA
# @exportMethod initLPRows

setGeneric(
  "initLPRows",
  function(.Object){
    standardGeneric("initLPRows")
  }
)

setMethod(
  "initLPRows",
  signature="NucleolusBase",
  definition=function(.Object){
    lpCoopGameUtils<-.Object@LPCoopGameUtils
    N<-length(.Object@A)
    setRlb(lpCoopGameUtils)<-.Object@A
    setRub(lpCoopGameUtils)<-c(rep(Inf, N - 1), .Object@A[N])
    setRtype(lpCoopGameUtils)<-c(rep(GLP_LO, N - 1), GLP_FX)
    eval.parent(substitute(.Object@LPCoopGameUtils<-lpCoopGameUtils))
  }
)


#' @title initLPMatrix
#' @name initLPMatrix
#' @noRd
#' @description initLPMatrix
#' @template author/JA
# @exportMethod initLPMatrix

setGeneric(
  "initLPMatrix",
  function(.Object){
    standardGeneric("initLPMatrix")
  }
)

setMethod(
  "initLPMatrix",
  signature="NucleolusBase",
  definition=function(.Object){
    lpCoopGameUtils<-.Object@LPCoopGameUtils
    excess<-determineExcessCoefficients(.Object)
    coeffMat<-createBitMatrix(n=getNumberOfPlayers(.Object@A),excess)
    setMatrix(lpCoopGameUtils)<-coeffMat
    eval.parent(substitute(.Object@LPCoopGameUtils<-lpCoopGameUtils))
  }
)

#' @title initLPBndsObjCoefs
#' @name initLPBndsObjCoefs
#' @noRd
#' @description initLPBndsObjCoefs
#' @template author/JA
# @exportMethod initLPBndsObjCoefs
setGeneric(
  "initLPBndsObjCoefs",
  function(.Object){
    standardGeneric("initLPBndsObjCoefs")
  }
)

setMethod(
  "initLPBndsObjCoefs",
  signature="NucleolusBase",
  definition=function(.Object){
    lpCoopGameUtils<-.Object@LPCoopGameUtils
    n=getNumberOfPlayers(.Object@A)
    setClb(lpCoopGameUtils)<- c(.Object@A[1:n], -Inf) #changed from c(rep(0, n), -Inf)
    setCub(lpCoopGameUtils)<- rep(Inf, n + 1)
    setCtype(lpCoopGameUtils)<- c(rep(GLP_DB, n), GLP_FR)
    setObj(lpCoopGameUtils)<- c(rep(0, n), 1)
    eval.parent(substitute(.Object@LPCoopGameUtils<-lpCoopGameUtils))
  }
)

#' @title determineExcessCoefficients
#' @name determineExcessCoefficients
#' @noRd
#' @description determineExcessCoefficients
#' @template author/JA
# @exportMethod determineExcessCoefficients
setGeneric(
  "determineExcessCoefficients",
  function(.Object){
    standardGeneric("determineExcessCoefficients")
  }
)


setMethod(
  "determineExcessCoefficients",
  signature="NucleolusBase",
  definition=function(.Object){
    N=length(.Object@A)
    return(c(rep(1,N-1),0))
  }
)


#' @title checkAbort
#' @name checkAbort
#' @noRd
#' @description checkAbort
#' @template author/JA
# @exportMethod checkAbort
setGeneric(
  "checkAbort",
  function(.Object,oldObjValue){
    standardGeneric("checkAbort")
  }
)


setMethod(
  "checkAbort",
  signature="NucleolusBase",
  definition=function(.Object,oldObjValue){
    retVal=FALSE
    lpCoopGameUtils<-.Object@LPCoopGameUtils
    if((!is.null(oldObjValue))){
      if(oldObjValue==getLPObjVal(lpCoopGameUtils)){
        retVal=TRUE
      }
    }else if(!isLPFeasible(lpCoopGameUtils)){
      stop("No Solution exists for this game.")
    }
    return(retVal)
  }
)


#' @title checkGamePreconditions
#' @name checkGamePreconditions
#' @noRd
#' @description checkGamePreconditions
#' @template author/JA
# @exportMethod checkGamePreconditions
setGeneric(
  "checkGamePreconditions",
  function(.Object){
    standardGeneric("checkGamePreconditions")
  }
)


setMethod(
  "checkGamePreconditions",
  signature="NucleolusBase",
  definition=function(.Object){
    boolEssentialGame=isEssentialGame(.Object@A)
    if(!boolEssentialGame){
      stop("Nucleolus solution is stoped as game is not essential.")
    }
  }
)



#' @title calculateNucleolus
#' @name calculateNucleolus
#' @docType methods
#' @noRd
#' @description calculateNucleolus
#' @template author/JA
#' @template cites/PELEG_ET_SUDHOELTER_2007
#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 82 ff.
# @exportMethod calculateNucleolus
setGeneric(
  "calculateNucleolus",
  function(.Object,enableTermOutLP=FALSE){
    standardGeneric("calculateNucleolus")
  }
)


#' @title calculateNucleolus
#' @name calculateNucleolus
#' @description calculateNucleolus
#' @template author/JA
#' @template cites/PELEG_ET_SUDHOELTER_2007
#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 82 ff.
# @exportMethod calculateNucleolus
setMethod(
  "calculateNucleolus",
  signature="NucleolusBase",
  definition=function(.Object,enableTermOutLP = FALSE){
    checkGamePreconditions(.Object)
    N=getNumberOfRows(.Object@LPCoopGameUtils)
    oldObjValue=NULL
    primal=NULL

    for(i in 1:N){
      solveLP(.Object@LPCoopGameUtils,enableTermOutLP)

      if(checkAbort(.Object,oldObjValue)){
        break
      }

      oldObjValue=getLPObjVal(.Object@LPCoopGameUtils)
      primal=getLPPrimalSolution(.Object@LPCoopGameUtils)
      updateNucleolusBase(.Object)

      if(all(getMatrixLastCol(.Object@LPCoopGameUtils)==0)) {
        break
      }

    }
    return((primal[-length(primal)]))
  }
)

setMethod(
  "calculatePointSolution",
  signature="NucleolusBase",
  definition=function(.Object){
    calculateNucleolus(.Object)
  }
)


setMethod(
  "calculateSolution",
  signature="NucleolusBase",
  definition=function(.Object){
    calculateNucleolus(.Object)
  }
)