boolSkip=F

#old depreciated function
convexgame4 <- function(A){
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v4=A[4]
  v12=A[5]
  v13=A[6]
  v14=A[7]
  v23=A[8]  
  v24=A[9]
  v34=A[10]
  v123=A[11]
  v124=A[12]
  v134=A[13]
  v234=A[14]
  v1234=A[15]
  
  #Formel von TugLab. Dateiname: convexgame Funktion: convexgame4 Zeile: 122-133
  
  #ruft die Funktion superadditivegame4 auf
  S = superadditivegame4(A);
  
  if(S==0){
    C=FALSE;
  }else{
    C= !((v123-v23)<(v13-v3) | (v123-v23)<(v12-v2) | (v123-v12)<(v13-v1) 
         | (v124-v24)<(v12-v2) | (v124-v24)<(v14-v4) | (v124-v14)<(v12-v1)
         | (v134-v34)<(v13-v3) | (v134-v34)<(v14-v4) | (v134-v14)<(v13-v1)
         | (v234-v34)<(v23-v3) | (v234-v34)<(v24-v4) | (v234-v24)<(v23-v2)
         | (v1234-v234)<(v123-v23) | (v1234-v234)<(v124-v24) | (v1234-v234)<(v134-v34)
         | (v1234-v134)<(v123-v13) | (v1234-v124)<(v123-v12) | (v1234-v134)<(v124-v14));
  }
  if(C == TRUE){
    return(1);
  }
  else{
    return(0);
  }
}



superadditivegame4 <- function(A){
  
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v4=A[4]
  v12=A[5]
  v13=A[6]
  v14=A[7]
  v23=A[8]  
  v24=A[9]
  v34=A[10]
  v123=A[11]
  v124=A[12]
  v134=A[13]
  v234=A[14]
  v1234=A[15]
  
  #Code orientiert sich an TugLab. Dateiname: superadditivegame 
  #Funktion: superadditivegame4 Zeile: 102-104
  S= !((v13-v3)<v1 | (v12-v2)<v1 | (v14-v4)<v1 | (v23-v2)<v3 | (v24-v2)<v4 | (v34-v3)<v4 | (v123-v23)<v1 | (v123-v12)<v3 | (v123-v13)<v2 | 
         (v124-v24)<v1 | (v124-v12)<v4 | (v124-v14)<v2 | (v134-v34)<v1 | (v134-v13)<v4 | (v134-v14)<v3 | 
         (v234-v24)<v3 | (v234-v23)<v4 | (v234-v34)<v2 | (v1234-v124)<v3 | (v1234-v123)<v4 | (v1234-v134)<v2 | (v1234-v234)<v1);
  
  if(S == TRUE){
    return(1);
  }
  else{
    return(0);
  }
}


test_that("Check 51.1 - test isConvexGame against convexgame4" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  for(i in 1:1000){
    P=sample(1:20,15,replace = TRUE)
    result=convexgame4(P)
    result2=isConvexGame(P)
    expect_equal(result&1, result2$isConvexGame)
  }
})