#' @name publicHelpIndex
#' @title publicHelpIndex
#' @description Calculates the Public Help Index for a specified TU game.
#' @aliases publicHelpIndex
#' @export publicHelpIndex
#' @template author/JA
#' @template cites/BERTINI_ET_AL_2008
#' @templateVar BERTINI_ET_AL_2008_P pp. 83 -- 98
#' @inheritParams CoopGameBaseParams
#' @return Public Help Index for specified game 
#' @examples 
#' A=c(0,0,0,1,1,0,1)
#' publicHelpIndex(A) #result: 0.4285714 0.2857143 0.2857143
publicHelpIndex<-function(A){
  phi=PublicHelpConcept(A)
  return(calculatePowerIndex(phi))
}


#' @name publicHelpValue
#' @title publicHelpValue
#' @description publicHelpValue is a solution concept based on the Public Help Index
#' @aliases publicHelpValue
#' @export publicHelpValue
#' @template author/JA
#' @template cites/BERTINI_ET_AL_2008
#' @templateVar BERTINI_ET_AL_2008_P pp. 83 -- 98
#' @inheritParams CoopGameBaseParams
#' @return The return value is a vector which contains for each player the calculated Public Help value
#' @examples 
#' A=c(0,0,0,1,1,0,1)
#' publicHelpValue(A) #result: 0.4285714 0.2857143 0.2857143
publicHelpValue<-function(A){
  phv=PublicHelpConcept(A)
  return(calculatePointSolution(phv))
}


logicPublicHelpIndex=function(A){
  n=log2(length(A)+1)
  bm=createBitMatrix(n,A)
  #the winning coalitions
  wcs=bm[bm[,"cVal"]>0,,drop=FALSE]
  #the values of correspondingwhere 
  temp=sapply(c(1:n),function(i){sum(wcs[wcs[,i]==1,"cVal"])})
  sumPlayerValues=sum(temp)
  phi=sapply(c(1:n),function(i){temp[i]/sumPlayerValues})
  return(PHI=phi)
}

#' @title PublicHelpConcept
#' @noRd
#' @description PublicHelpConcept
#' @include PointSolutionConcept.R
# @exportClass PublicHelpConcept

setClass(
  "PublicHelpConcept",
  contains = "PointSolutionConcept"
)

#' @rdname calculatePowerIndex-methods
#' @aliases calculatePowerIndex,PublicHelpConcept-method
setMethod(
  "calculatePowerIndex",
  signature="PublicHelpConcept",
  definition=function(.Object){
    A<-.Object@A
    return(logicPublicHelpIndex(A))
  }
)

#' @title Constructor for PublicHelpConcept
#' @noRd
#' @template author/JA
#' @template author/JS
#' @name PublicHelpConcept
#' #@export
PublicHelpConcept<-function(A){
  retPublicHelpIndex=methods::new("PublicHelpConcept",A)
  return(retPublicHelpIndex)
}



#' @name drawPublicHelpValue
#' @title drawPublicHelpValue for n players
#' @description drawPublicHelpValue draws the modiclus for n players.
#' @aliases drawPublicHelpValue
#' @export drawPublicHelpValue
#' @template author/JA
#' @template cites/BERTINI_ET_AL_2008
#' @templateVar BERTINI_ET_AL_2008_P pp. 83 -- 98
#' @inheritParams CoopGameBaseParams
#' @inheritParams visualize
#' @return Public Help Value for given game vector with n players
#' @examples
#' A=c(0,0,0,1,1,0,1)
#' drawPublicHelpValue(A) 
drawPublicHelpValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = "Public Help Value"){
  A=GameVector(A)
  sm=publicHelpValue(A);
  visualize(A, pointsToDraw=sm, holdOn=holdOn, colour = colour , label=label, name = name)
}
