boolSkip=F

test_that("Check 17.1 - isEssentialGame - 3 players - essential",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = generateGameVector(cFuncMaschler, n = 3)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
})

test_that("Check 17.2 - isEssentialGame - 3 players - inessential",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(30, 30, 15, 60, 60, 60, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], FALSE)
})

test_that("Check 17.3 - isEssentialGame - 3 players essential (equality)",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(30, 30, 12, 60, 60, 60, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
})

test_that("Check 17.4 - isEssentialGame - 4 players - essential",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = generateGameVector(cFuncMaschler, n = 4)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
})

test_that("Check 17.5 - isEssentialGame - 4 players - inessential",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(20, 20, 20, 40, 60, 60, 60, 60, 60, 60, 0, 0, 0, 0, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], FALSE)
})

test_that("Check 17.6 - isEssentialGame - 4 players - essential (equality)",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(20, 20, 20, 12, 60, 60, 60, 60, 60, 60, 0, 0, 0, 0, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
})

test_that("Check 17.7 - isEssentialGame - 4 players - essential",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = generateGameVector(cFuncDivideTheDollar, n = 4, numberOfPlayers = 4)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
})

test_that("Check 17.8 - isEssentialGame - 4 players - inessential",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
  result = isEssentialGame(A)
  expect_equal(result[1], FALSE)
})

test_that("Check 17.9 - isEssentialGame - 4 players - essential (equality)",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
})

test_that("Check 17.10 - isEssentialGame - 3 players essential (equality), degenerate",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(30, 30, 12, 60, 60, 60, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
  expect_equal(result[2], TRUE)
})

test_that("Check 17.11 - isEssentialGame - 3 players inessential, not degenerate",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(30, 30, 15, 60, 60, 60, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], FALSE)
  expect_equal(result[2], FALSE)
})

test_that("Check 17.12 - isEssentialGame - 3 players essential, not degenerate",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(0, 0, 0, 60, 60, 60, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], TRUE)
  expect_equal(result[2], FALSE)
})

test_that("Check 17.13 - isEssentialGame - 3 players essential, not degenerate compare logical type with numeric",{
  if(boolSkip){
    skip("Test was skipped")
  }
  A = c(0, 0, 0, 60, 60, 60, 72)
  result = isEssentialGame(A)
  expect_equal(result[1], as.logical(1))
  expect_equal(result[2], as.logical(0))
})
