boolSkip=F

#depreciated functions
admissiblegame3 <- function(A){ 
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v12=A[4]
  v13=A[5]
  v23=A[6]
  v123=A[7]
  
  #berechnet die Utopia Werte 
  utopia = utopiapayoff3(A);
  
  #Code orientiert sich an TugLab. Dateiname: admissablegame 
  #Funktion: admissablegame3 Zeile: 86
  CA = !(utopia[2,1]>utopia[1,1] | utopia[2,2]>utopia[1,2] | utopia[2,3]>utopia[1,3] 
         | (utopia[2,1]+utopia[2,2]+utopia[2,3])>v123 | v123>(utopia[1,1]+utopia[1,2]+utopia[1,3]));
  
  if(CA == TRUE){
    return(1);
  }
  else{
    return(0);
  }
}

admissiblegame4 <- function(A){
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v4=A[4]
  v12=A[5]
  v13=A[6]
  v14=A[7]
  v23=A[8]  
  v24=A[9]
  v34=A[10]
  v123=A[11]
  v124=A[12]
  v134=A[13]
  v234=A[14]
  v1234=A[15]
  
  #berechnet die Utopia Werte 
  utopia = utopiapayoff4(A);
  
  #Code orientiert sich an TugLab. Dateiname: admissablegame 
  #Funktion: admissablegame4 Zeile: 117
  CA = !(utopia[2,1]>utopia[1,1] | utopia[2,2]>utopia[1,2] | utopia[2,3]>utopia[1,3] | utopia[2,4]>utopia[1,4] 
         | (utopia[2,1]+utopia[2,2]+utopia[2,3]+utopia[2,4])>v1234 | v1234>(utopia[1,1]+utopia[1,2]+utopia[1,3]+utopia[1,4]));
  
  if(CA == TRUE){
    return(1);
  }
  else{
    return(0);
  }  
}

utopiapayoff3 <- function(A){
  
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v12=A[4]
  v13=A[5]
  v23=A[6]
  v123=A[7]
  
  #Code orientiert sich an TugLab. Dateiname: utopiapayoffs
  #Funktion: utopiapayoffs3 Zeile: 94-103
  
  #leeren Vektor M erstellen
  M=c();
  #Vektor mit Werten f?llen
  M[1]=v123-v23;
  M[2]=v123-v13;
  M[3]=v123-v12;
  
  #leeren Vektor m erstellen
  m=c()
  #Vektor mit Werten f?llen
  m[1]= max(c(v1, v12-M[2], v13-M[3], v123-M[2]-M[3]));
  m[2]=max(c(v2, v12-M[1], v23-M[3], v123-M[1]-M[3]));
  m[3]=max(c(v3, v13-M[1], v23-M[2], v123-M[1]-M[2]));
  
  utopiapayoff=rbind(M,m)
  return(utopiapayoff);
}

utopiapayoff4 <-function(A){
  
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v4=A[4]
  v12=A[5]
  v13=A[6]
  v14=A[7]
  v23=A[8]  
  v24=A[9]
  v34=A[10]
  v123=A[11]
  v124=A[12]
  v134=A[13]
  v234=A[14]
  v1234=A[15]
  
  #Code orientiert sich an TugLab Dateiname: utopiapayoffs 
  #Funktion: utopiapayoffs4 Zeile: 117-128
  
  
  #leeren Vektor M erstellen
  M=c();
  #Vektor mit Werten fuellen
  M[1]=v1234-v234;
  M[2]=v1234-v134;
  M[3]=v1234-v124;
  M[4]=v1234-v123;
  
  #leeren Vektor m erstellen
  m=c()
  #Vektor mit Werten fuellen
  m[1]=max(c(v1, v12-M[2], v13-M[3], v14-M[4], v123-M[2]-M[3], v124-M[2]-M[4], v134-M[3]-M[4], v1234-M[2]-M[3]-M[4]));
  m[2]=max(c(v2, v12-M[1], v23-M[3], v24-M[4], v123-M[1]-M[3], v124-M[1]-M[4], v234-M[3]-M[4], v1234-M[1]-M[3]-M[4]));
  m[3]=max(c(v3, v13-M[1], v23-M[2], v34-M[4], v123-M[1]-M[2], v134-M[1]-M[4], v234-M[2]-M[4], v1234-M[1]-M[2]-M[4]));
  m[4]=max(c(v4, v14-M[1], v24-M[2], v34-M[3], v124-M[1]-M[2], v134-M[1]-M[3], v234-M[2]-M[3], v1234-M[1]-M[2]-M[3]));
  
  utopiapayoff=rbind(M,m)
  return(utopiapayoff);
}


test_that("Check 54.1 - test isAdmissibleGame against admissiblegame4" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  for(i in 1:1000){
    P=sample(1:20,7,replace = TRUE)
    result=admissiblegame3(P)
    result2=isAdmissibleGame(P)
    expect_equal(result&1, result2)
  }
})


test_that("Check 54.2 - test isAdmissibleGame against admissiblegame4" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  for(i in 1:1000){
    P=sample(1:20,15,replace = TRUE)
    result=admissiblegame4(P)
    result2=isAdmissibleGame(P)
    expect_equal(result&1, result2)
  }
})