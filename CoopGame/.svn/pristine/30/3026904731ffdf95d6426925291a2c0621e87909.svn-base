---
title: "Introduction to Cooperative Games"
author: "Jochen Staudacher"
date: "15 May 2018"
output: pdf_document
---

# Introduction to Cooperative Games

These first sentences will go away in the actual 
publication of the vignette. FROM HERE:
The field of cooperative game theory is really exciting.

The field of cooperative game theory is exciting.

The package CoopGame focusses on a cost-savings approach to
cooperative games. Let us check that references work correctly:
Books by [@BranzeiBook], [@PetersBook], [@PelegSudhoelter], [@DriessenBook],
[@MaschlerSolanZamir], [@ChakravartyMitraSarkar], [@GillesBook], 
[@NeumannMorgenstern], [@SlikkerNouweland], 
[@OsborneRubinsteinBook],
[@NarahariBook], [@JacksonBook] and [@StraffinBook]. 
So much for the books.

Some journal papers: [@LittlechildVaidya] and [@GatelyPaper] 
and [@DeeganPackel] and [@DeeganPackel] and [@HollerPackel] 
as well as [@Sudhoelter1996], [@Sudhoelter1997], 
[@Young1985], [@YoungOkadaHashimoto], [@Tarashnina2011],
[@vanDammeAumann],
[@AumannMaschler1985],
[@Aumann2002], [@Peleg1996], [@Peleg1997],[@AumannMaschlerNTU],
[@CommonMistakesNucleolus], [@aumann1961core], [@aumann2010some],
[@milnor1953reasonable], [@schmeidler1969nucleolus], 
[@peleg2002game].

Check our own paper: [@StaudacherAnwander]

Some proceedings: [@AumannMyerson] and [@BertiniGambarelliStach] 
and [@Tijs1981].

Cost games papers: [@Otten], [@YoungCostAllocation],
[@ParrachinoZaraPatrone], [@TijsDriessen], [@StraffinHeaney].

A paper with some general thoughts [@aumann2004all].

Some stuff CoopGame can not handle: Bargaining sets [@aumann1964bargaining], methods for kernel [@aumann1965method], 
general market games [@aumann1964markets]

Check semiconvexity [@driessen1985tau].

Two original papers by Shapley: [@shapley1953value],
[@shapley1954method].

Quote some packages: [@geometry] and [@rgl]. 
Our competitor [@cano2017enjoying].

TO HERE EVERYTHING WILL BE DELETED LATERON.

Today, the term 
game theory is mostly interpreted as interactive decision theory,
i.e. game theorists wish to study how agents take strategic 
decisions interactively. Since the publication of the seminal 
book "Theory of Games and Economic Behavior" by 
John von Neumann and Oskar Morgenstern  [@NeumannMorgenstern] 
in 1944, modern game theory developed into two main branches. 
These two branches are most frequently referred to as 
noncooperative game theory and cooperative game theory, 
respectively. In our understanding of the field we side with 
the views expressed by Robert Aumann in his 
famous interview [@vanDammeAumann] with Eric van Damme that 
a better name for noncooperative game theory 
would be "strategically oriented game theory" whereas 
cooperative game might be characterized more precisely 
as "coalitional game theory" or "outcome oriented game theory".

<!-- Borrow introductory thought from P&S -->

So, to quote Robert Aumann (see [@vanDammeAumann], p. 195) again 
```
... It is not only strategic interaction.
```
In this spirit our R-package CoopGame is devoted to the study of coalitional games 
with transferable utility. 

## What this package provides and what it does not provide

We are studying a transferable utility game (TU game) $v$ in 
characteristic function form consisting of the 
player set $N =\{ 1, \dots , n \}$ and the characteristic
function $v: 2^{N} \to \mathbb{R}$ with $v (\emptyset) = 0$.
We specify such a TU game with $n$ players as a (game) vector 
of length $2^n - 1$.

### Specifying a TU game

Let us look at an introductory example of a three-player 
TU game. Let $N= \{ 1, 2, 3 \}$ and 
$v: \mathcal{P}(N) \to \mathbb{R}$ 
be specified as   
$$ 
\begin{aligned}
v(\emptyset) & =  0, \\  
v(\{ 1 \}) & =  0, \\
v(\{ 2 \}) & =  0, \\ 
v(\{ 3 \}) & =  0, \\
v(\{ 1,2 \}) & =  100, \\ 
v(\{ 1,3 \}) & =  115, \\ 
v(\{ 2,3 \}) & =  125, \\
v(\{ 1,2,3 \}) & =  220. 
\end{aligned}
$$
We may interpret the values of the individual coalitions 
in various ways, e.g. as the worth of a coalition or the 
cost savings of a coalition. In our above example the singleton 
coalitions have worth zero whereas the grand coalition 
$N= \{ 1, 2, 3 \}$ makes a total of $220$ (monetary units). 
In brief, the 
basic question in coalitional games with transferable utitly 
is how we can share the worth of $220$ among our three players.
In R we can simply specify the above game as a vector $v$ of 
lenght $7$, i.e.
```{r, collapse=TRUE}
(v <- c(0,0,0,100,115,125,220))
```

Internally, we will turn our vector $v$ into an instance 
of our class GameVector 
```{r, collapse=TRUE}
library(CoopGame)
(v <- GameVector(c(0,0,0,100,115,125,220)))
```
Within this vignette, we are using the shorthand notations 
$$ v_{i} = v(\{ i \}) \quad \textrm{for} \quad i=1, \dots , n, $$
for the singleton coalitions.

### A popular example: The Maschler game

The Maschler game is nice

### Functionality and structure of the package CoopGame

Our package CoopGame provides functions for 

* generating TU games with special structure (see chapter 2 
of this vignette), like 
e.g. unanimity games, cost games and bankruptcy games 
* checking game properties (see chapter 3 of this vignette), 
like e.g. superadditivity, convexity and balancedness
* computing a number of set-valued solution concepts for 
TU games (see chapter 4 
of this vignette), including the core and various core catchers
* computing a large array of point-valued solution concepts 
for TU games (see chapter 5 
of this vignette), 
including the Shapley value, the nucleolus as well as various nucleolus derivatives
* drawing both set- and point-valued solution concepts 
for the 3- and 4-player cases (see chapter 6 of this vignette)
* some general functionality around TU games 
(see section 1.3 of this vignette), like e.g. computing the unanimity coefficients for a given game vector

### Models and questions beyond the scope of CoopGame

Coalitional games can be turned into more realistic 
models if, in addition one allows for partitions of the player 
set or specifying an undirected graph connecting the players. 
The latter case is frequently referred to as a communication 
game (see e.g. [@SlikkerNouweland]). The authors are currently 
developing additional R packages for both games with partitions 
of the player set as well as communication games. These 
additional software packages will make use of CoopGame, 
but CoopGame itself will allow for neither partitions or 
communication structures. 
Also, NTU games, i.e. cooperative games with non-transferable 
utility [@AumannMaschlerNTU], are beyond the scope of 
this R package.

### This is not a book on cooperative game and these are not lecture notes 

This is only a vignette!

We refer to book by Peleg and Sudh frequently.

## Some general functionality around cooperative games 

In this section we will introduce some useful functionality 
around cooperative games which we will later use when we 
discuss games with special structure, game properties as well as 
set-valued and point-valued solution concepts for cooperative 
games.

### Zero-normalized and zero-one-normalized games

We call a cooperative game $v$ **zero-normalized** if 
$$ v_{i} = 0 \quad \textrm{for} \quad i=1, \dots , n, $$
i.e. the values of all singleton coalitions are zero 
(see e.g. [@PelegSudhoelter], p. 11).

We can easily zero-normalize a given game vector $v$ into a 
corresponding zero-normalized game vector $w$ via 
$$ w (S) = v(S) - \sum_{i \in S} v_{i} $$
for every coalition $S \in \mathcal{P}(N)$ (see e.g. [@BranzeiBook], p. 9).
In CoopGame we provide a corresponding function **getZeroNormalizedGameVector**:
```{r, collapse=TRUE}
library(CoopGame)
v <- c(30,40,50,90,100,110,180)
(w <- getZeroNormalizedGameVector(v))
```

We call a cooperative game $v$ **zero-one-normalized** if 
it is zero-normalized and for the grand coalition $N$ there 
holds $v(N) = 1$. 
We can easily zero-one-normalize a given game vector $v$ by 
dividing the zero-normalized game vector $w$ by the value 
of the grand coalition $v(N)$.
In CoopGame we provide a corresponding function **getZeroOneNormalizedGameVector**:
```{r, collapse=TRUE}
library(CoopGame)
v <- c(30,40,50,90,100,110,180)
(w01 <- getZeroOneNormalizedGameVector(v))
```

For a detailed discussion on the importance of zero-one-normalized 
games and strategic equivalence we refer the reader to 
the book by Maschler, Solan and Zamir [@MaschlerSolanZamir], p. 670.

### Why bit matrices are helpful in cooperative game theory

We introduce the concept of a bit matrix as it is extremely 
useful for working with cooperative games.

### Marginal contributions

Let our TU game be specified by its characteristic function $v$.
Then for every player $j \in N$ and for every coalition 
$S \in \mathcal{P}(N)$ with $j \in S$ we can define the 
so-called **marginal contribution** of player $j$ to coalition $S$ 
as
$$ v(S) - v(S \backslash \{ j \}), $$
see e.g. [@BranzeiBook], pp. 6, or [@PetersBook], pp. 156. 
For many point- and set-valued solution concepts we need to 
know the marginal contributions of every player for every 
permutation of the set of players.
Our function **getMarginalContributions** provides the user 
with a list of all combinations, i.e. permutations of 
the players, used and 
a corresponding matrix of marginal contributions:
```{r, collapse=TRUE}
library(CoopGame)
v <- c(3,4,5,9,10,11,18)
(MC <- getMarginalContributions(v))
# Look at all the permutations computed
MC$combinations
# Look at the matrix of marginal values 
# corresponding to these permutations
MC$marginal_values
```
It appears worthwhile to interpret the second line of 
the marginal values we just computed 
```{r, collapse=TRUE}
MC$marginal_values[2,]
```
along the lines of the book by Hans Peters [@PetersBook], pp. 156.
The above results corresponds to the permutation $(1,3,2)$. 

- Player $1$ enters first and contributes $3$. 
- Player $3$ enters second and contributes $11-3=8$. 
- Player $2$ enters last and contributes $18-11=7$. 

### The dual game 
Let our TU game be specified by its characteristic function $v$.
Then we can specify the so-called **dual game** $v^{*}$ 
corresponding to $v$ via 
$$ v^{*} (S) = v(N) - v(N \backslash S) $$
for every coalition $S \in \mathcal{P}(N)$ (see 
e.g. [@PelegSudhoelter], p. 125, or [@BranzeiBook], p.7, 
for more details. 
Our package CoopGame provides a function **getDualGameVector**:
```{r, collapse=TRUE}
library(CoopGame)
v <- c(3,4,5,9,10,11,18)
# Compute dual game vector
(vStar <- getDualGameVector(v))
```

### The utopia payoff vector 
In cooperative game theory the so-called 
**utopia payoff** of player $j$ is defined as 
$$ M_{j} = v(N) - v(N \backslash \{ j \}) \quad \textrm{for} \quad j=1, \dots , n,$$
i.e. the utopia payoff $M_{j}$ is the 
marginal contribution of player $i$ to the grand 
coalition $N$ (see e.g. [@BranzeiBook], p. 20). 
Our package CoopGame provides a function 
**getUtopiaPayoff** for computing a vector of 
utopia payoffs for every player:
```{r, collapse=TRUE}
library(CoopGame)
v <- c(3,4,5,9,10,11,18)
# Compute utopia payoff vector for specified game v
(M <- getUtopiaPayoff(v))
```
It is clear that player $j$ can not ask for more 
than $M_{j}$ in the grand coalition.
The utopia payoff vector 
will lateron play a role in defining game properties 
as well as point- and set-valued solution concepts. 

### The minimal rights vector 
The so-called remainder $R(S, j)$
of player $j$ in coalition $S \in \mathcal{P(N)}$ is 
the amount which remains for player $j$ if the 
coalition $S$ forms and the rest of the players in 
coalition $S$ all obtain their 
individual utopia payoffs, i.e.
$$ R(S,j) = v(S) - \sum_{k \in S, k \neq j} M_{k}. $$ 
We can define a vector of **minimal rights** with components 
$$ m_{j} = \max_{S: j \in S} R(S,j),  \quad \textrm{for} 
\quad j=1, \dots , n,$$
since player $j$ has a justification to demand at 
least $m_{j}$ in the grand coalition, 
see e.g. the book by Branzei et al. [@BranzeiBook], p. 20.  
Our package CoopGame provides a function 
**getMinimalRights** for computing a vector of 
minimal rights for every player:
```{r, collapse=TRUE}
library(CoopGame)
v <- c(2,3,4,8,9,10,13)
# Compute utopia payoff vector for specified game v
(M <- getUtopiaPayoff(v))
# Compute minimal rights vector for specified game v
(m <- getMinimalRights(v))
```

### The excess coefficients

### The gap function

### The k-cover

### Propensities to disrupt

### The unanimity coefficients 
The latter are also called Harsanyi dividends. 

## Cooperative game theory in the R Ecosystem

Mention two existing R packages on cooperative game theory.

Why did we find it sensible to develop CoopGame.

Mention restriction to number of players.