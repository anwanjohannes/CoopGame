boolSkip=F

test_that("Check 82.1 - stopOnInvalidGameVector" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  A1=NULL
  A2=1:6
  A3=c("1","2","3","4","5","6","7")
  A4=1:15;
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A1))
  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A2))
  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A3))
  expect_error(stopOnInvalidGameVectorA(paramCheckResult,A=A4,n=3))
})

test_that("Check 82.2 - stopOnInvalidGrandCoalitionN" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  N1=NULL
  N2="3"
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidGrandCoalitionN(paramCheckResult,N1))
  expect_error(stopOnInvalidGrandCoalitionN(paramCheckResult,N=N2)) #TODO
  
})

test_that("Check 82.3 - stopOnInvalidCoalitionS" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  S1=NULL
  S2=c("1","2")
  S3=c(1,2,3,4); N=c(1,2,3)
  S4=c(1,2,3,4,5); n1=3;
  paramCheckResult=c()
  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S1))
  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S2))
  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S3,N = N))
  expect_error(stopOnInvalidCoalitionS(paramCheckResult,S=S4,n=n1))
})

test_that("Check 82.4 - stopOnInvalidNumberOfPlayers" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  n1=1;
  n2=21;
  #todo not numeric of length 1
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidNumber(paramCheckResult,number = n1))
  expect_error(stopOnInvalidNumber(paramCheckResult,number = n2))
})

test_that("Check 82.5 - stopOnInvalidDefinitionAorV" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  #TODO obsolete

})


test_that("Check 82.6 - stopOnInvalidIndex" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  ix1=NULL
  ix2="2"
  ix3=15; n5=3
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidIndex(paramCheckResult,index = ix1))
  expect_error(stopOnInvalidIndex(paramCheckResult,index = ix2))
  expect_error(stopOnInvalidIndex(paramCheckResult,index = ix3, n=n5))
  
})

test_that("Check 82.7 - stopOnInvalidNChooseB" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  n1=NULL
  b1=NULL
  n2="4"
  b2="2"
  n3=3; b3=5
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidNChooseB(paramCheckResult,n = n1))
  expect_error(stopOnInvalidNChooseB(paramCheckResult,n=4,b = b1))
  expect_error(stopOnInvalidNChooseB(paramCheckResult,n = n2, b=2))
  expect_error(stopOnInvalidNChooseB(paramCheckResult,n = n3, b=b3))
})


test_that("Check 82.8 - stopOnInvalidBoolean" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  b=1
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidBoolean(paramCheckResult,boolean = b))
})

test_that("Check 82.9 - stopOnInvalidNumber" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  num="2"
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidNumber(paramCheckResult,number = num))
})

test_that("Check 82.10 - stopOnInvalidCoalitionFunctionV" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  v=2
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidCoalitionFunctionV(paramCheckResult,v = v))
})

test_that("Check 82.11 - stopOnInvalidLeftRightCFuncGlove" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  L1=c(1,2); R1=c(3); N1=c(1,2,3,4)
  L2=c(); R2=c(3); N2=c(1,2,3,4)
  L3=c(1,2); R3=c(); N3=c(1,2,3,4)
  L4=c(1,2); R4=c(2,3,4); N4=c(1,2,3,4)
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L1, R = R1, N = N1))
  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L2, R = R2, N = N2))
  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L3, R = R3, N = N3))
  expect_error(stopOnInvalidLeftRightCFuncGlove(paramCheckResult,L = L4, R = R4, N = N4))
})

test_that("Check 82.12 - stopOnInvalidVetoPlayer" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  vp1=NULL
  vp2=0
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidVetoPlayer(paramCheckResult,vetoPlayer = vp1))
  expect_error(stopOnInvalidVetoPlayer(paramCheckResult, vetoPlayer = vp2))
})

test_that("Check 82.13 - stopOnInvalidQuota" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  q1=-1
  q2="4"
  q3=NULL
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidQuota(paramCheckResult,q = q1))
  expect_error(stopOnInvalidQuota(paramCheckResult,q = q2))
  expect_error(stopOnInvalidQuota(paramCheckResult,q = q3))
})

test_that("Check 82.14 - stopOnInvalidWeightVector" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  n1=3; w1=c(1,2,3)
  n2=3; w2=c("1","2","3")
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidWeightVector(paramCheckResult, n = n1, w = w1))
  expect_error(stopOnInvalidWeightVector(paramCheckResult, n = n2, w = w2))
})

test_that("Check 82.15 - stopOnInvalidDictator" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  dic1=NULL
  dic2="3"
  dic3=c(1,2,3)
  dic4=5; n4=3 
  
  paramCheckResult=getEmptyParamCheckResult()
  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic1))
  
  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic2))
  
  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic3))
  
  expect_error(stopOnInvalidDictator(paramCheckResult, dictator = dic4, n4=3))
})

test_that("Check 82.16 - stopOnInvalidBitMatrix" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  #todo obsolete
  
})


# test_that("Check 82.17 - stopOnInvalidAllocation" ,{
#   if(boolSkip){
#     skip("Test was skipped")
#   }
#   
#   x1=NULL
#   x2=c("1","2","3")
#   x3=c(1,2,3); n3="3"
#   x4=
#   
# })