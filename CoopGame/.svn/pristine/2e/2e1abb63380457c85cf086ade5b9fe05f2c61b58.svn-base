#' @title PayoffSpace
#' @description An class for calculations in payoff space
#' @name PayoffSpace
#' @include SetSolutionConcept.R
#' @slot VRepMatrix A matrix of vertices of a set solution concept
#' @exportClass PayoffSpace

setClass(
  "PayoffSpace",
  slots = c(VRepMatrix="matrix")
)

#' @title Constructor for AllocationPropertyPayoffSpace
#' @noRd
#' @description Constructor for AllocationPropertyPayoffSpace
#' @template author/JA
#' @name PayoffSpace
#' #@export
PayoffSpace<-function(VRepMatrix=NULL){
  retAP=methods::new("PayoffSpace",VRepMatrix=VRepMatrix)
  return(retAP)
}

setMethod(
  f="initialize",
  signature = "PayoffSpace",
  definition =  function(.Object, ...,VRepMatrix) {
    .Object@VRepMatrix=VRepMatrix
    .Object<-methods::callNextMethod(.Object, ...)
    methods::validObject(.Object)
    return(.Object)
  }
)

#' @title Method specifyVRepMatrixByConcept
#' @description This method specifies the payoff space by v-representation.
#' @rdname specifyVRepMatrixByConcept-methods
#' @name specifyVRepMatrixByConcept
#' @docType methods
#' @template author/JA
#' @template param/Object
#' @exportMethod specifyVRepMatrixByConcept

setGeneric(
  "specifyVRepMatrixByConcept",
  function(.Object,solutionConcept="SetSolutionConcept"){
    standardGeneric("specifyVRepMatrixByConcept")
  }
)

#' @rdname specifyVRepMatrixByConcept-methods
#' @aliases specifyVRepMatrixByConcept,PayoffSpace-method
setMethod(
  "specifyVRepMatrixByConcept",
  signature="PayoffSpace",
  definition=function(.Object,solutionConcept){
    .Object@VRepMatrix=calculateSetSolution(solutionConcept)
    return(.Object)
  }
)


#' @title Method isElementOfPayoffSpace
#' @description This method checks if one allocation is element of payoff-space.
#' @rdname isElementOfPayoffSpace-methods
#' @name isElementOfPayoffSpace
#' @docType methods
#' @template author/JA
#' @template param/Object
#' @exportMethod isElementOfPayoffSpace

setGeneric(
  "isElementOfPayoffSpace",
  function(.Object,x="numeric"){
    standardGeneric("isElementOfPayoffSpace")
  }
)


#' @rdname isElementOfPayoffSpace-methods
#' @aliases isElementOfPayoffSpace,PayoffSpace-method
setMethod(
  "isElementOfPayoffSpace",
  signature="PayoffSpace",
  definition=function(.Object,x){
    return(isElementOfConvexSet(.Object@VRepMatrix,x))
  }
)

#' @title isElementOfConvexSet
#' @description check if a point is included in a convex set
#' @name isElementOfConvexSet
#' @template author/FM
#' @template author/JA
# @template param/VRepMatrix
#' @template param/x
#' @return If the point include in a convex set return TRUE, else return FALSE
isElementOfConvexSet <- function(VRepMatrix,x){
  hrepmatrix = VRepMatrix
  numberOfPlayers=length(x)
  boolRetVal=FALSE;
  
  if(nrow(hrepmatrix)!=0){
  
    if(numberOfPlayers == ncol(hrepmatrix))
    {
      hrepmatrix = rbind(hrepmatrix,x)
      
      vRepresentation = makeV(points = hrepmatrix)
      
      if(nrow(vRepresentation)>=2){
        vRepresentation = redundant(vRepresentation)
      }
      
      #Changes a V-Representation into a matrix
      VectorCounter = length(vRepresentation[[1]]) / (numberOfPlayers + 2)
      testvector = vRepresentation[[1]][(VectorCounter * 2 + 1):(length(vRepresentation[[1]]))]
      testmatrix = matrix(testvector, VectorCounter, numberOfPlayers)
      
      equality = all.equal(VRepMatrix,testmatrix)
      
      if(equality[1] == TRUE)
      {
        boolRetVal=TRUE
      }
    }
  }else{
    print("Payoff space is empty.")
  }
  return(boolRetVal)
}


