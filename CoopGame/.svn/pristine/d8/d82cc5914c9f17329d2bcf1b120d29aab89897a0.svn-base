boolSkip=F
samples_3P=sapply(seq(1:1000),function(x){sample(1:20,7,replace = TRUE)},simplify = FALSE)
samples_4P=sapply(seq(1:1000),function(x){sample(1:20,15,replace = TRUE)},simplify = FALSE)


#depreciated functions
shapley3 <- function(A) {
 
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v12=A[4]
  v13=A[5]
  v23=A[6]
  v123=A[7]
  
  #Code orientiert sich anTugLab. Dateiname: Shapley 
  #Funktion: Shapley3 Zeile: 122-133
  
  # Marginalvektoren aufstellen
  m1 = matrix(c(v1,       v12-v1,   v123-v12), nrow=1, ncol=3)
  m2 = matrix(c(v1,       v123-v13, v13-v1),   nrow=1, ncol=3)
  m3 = matrix(c(v12-v2,   v2,       v123-v12), nrow=1, ncol=3)
  m4 = matrix(c(v123-v23, v2,       v23-v2),   nrow=1, ncol=3)
  m5 = matrix(c(v13-v3,   v123-v13, v3),       nrow=1, ncol=3)
  m6 = matrix(c(v123-v23, v23-v3,   v3),       nrow=1, ncol=3)
  margVec=rbind(m1,m2,m3,m4,m5,m6)
  
  # Summe Ueber jede Spalte der Matrix margVec bilden
  Sh=matrix(c(sum(margVec[,1]),sum(margVec[,2]),sum(margVec[,3])), nrow=1, ncol=3)
  # Shapley-Wert gewichten
  Sh=1/6*Sh
  
  return(Sh)
}

shapley4 <- function(A) {
  
  v1=A[1]
  v2=A[2]
  v3=A[3]
  v4=A[4]
  v12=A[5]
  v13=A[6]
  v14=A[7]
  v23=A[8]  
  v24=A[9]
  v34=A[10]
  v123=A[11]
  v124=A[12]
  v134=A[13]
  v234=A[14]
  v1234=A[15]
  
  #Code orientert sich an TugLab. Dateiname: Shapley
  #Funktion: Shapley4 Zeile: 148-183
  
  # Marginalvektoren aufstellen
  m1  = matrix(c(v1,         v12-v1,     v123-v12,   v1234-v123), nrow=1, ncol=4)
  m2  = matrix(c(v1,         v12-v1,     v1234-v124, v124-v12),   nrow=1, ncol=4)
  m3  = matrix(c(v1,         v123-v13,   v13-v1,     v1234-v123), nrow=1, ncol=4)
  m4  = matrix(c(v1,         v1234-v134, v13-v1,     v134-v13),   nrow=1, ncol=4)
  m5  = matrix(c(v1,         v124-v14,   v1234-v124, v14-v1),     nrow=1, ncol=4)
  m6  = matrix(c(v1,         v1234-v134, v134-v14,   v14-v1),     nrow=1, ncol=4)
  m7  = matrix(c(v12-v2,     v2,         v123-v12,   v1234-v123), nrow=1, ncol=4)
  m8  = matrix(c(v12-v2,     v2,         v1234-v124, v124-v12),   nrow=1, ncol=4)
  m9  = matrix(c(v123-v23,   v2,         v23-v2,     v1234-v123), nrow=1, ncol=4)
  m10 = matrix(c(v1234-v234, v2,         v23-v2,     v234-v23),   nrow=1, ncol=4)
  m11 = matrix(c(v124-v24,   v2,         v1234-v124, v24-v2),     nrow=1, ncol=4)
  m12 = matrix(c(v1234-v234, v2,         v234-v24,   v24-v2),     nrow=1, ncol=4)
  m13 = matrix(c(v13-v3,     v123-v13,   v3,         v1234-v123), nrow=1, ncol=4)
  m14 = matrix(c(v13-v3,     v1234-v134, v3,         v134-v13),   nrow=1, ncol=4)
  m15 = matrix(c(v123-v23,   v23-v3,     v3,         v1234-v123), nrow=1, ncol=4)
  m16 = matrix(c(v1234-v234, v23-v3,     v3,         v234-v23),   nrow=1, ncol=4)
  m17 = matrix(c(v134-v34,   v1234-v134, v3,         v34-v3),     nrow=1, ncol=4)
  m18 = matrix(c(v1234-v234, v234-v34,   v3,         v34-v3),     nrow=1, ncol=4)
  m19 = matrix(c(v14-v4,     v124-v14,   v1234-v124, v4),         nrow=1, ncol=4)
  m20 = matrix(c(v14-v4,     v1234-v134, v134-v14,   v4),         nrow=1, ncol=4)
  m21 = matrix(c(v124-v24,   v24-v4,     v1234-v124, v4),         nrow=1, ncol=4)
  m22 = matrix(c(v1234-v234, v24-v4,     v234-v24,   v4),         nrow=1, ncol=4)
  m23 = matrix(c(v134-v34,   v1234-v134, v34-v4,     v4),         nrow=1, ncol=4)
  m24 = matrix(c(v1234-v234, v234-v34,   v34-v4,     v4),         nrow=1, ncol=4)
  margVec = rbind(m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19,m20,m21,m22,m23,m24)
  
  # Summe Ueber jede Spalte der Matrix margVec bilden
  Sh=matrix(c(sum(margVec[,1]),sum(margVec[,2]),sum(margVec[,3]),sum(margVec[,4])), nrow=1, ncol=4)
  # Shapley-Wert gewichten
  Sh=1/24*Sh
  
  return(Sh)
}

test_that("Check 55.1 - test isEssentialGame against essentialgame3" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  
  for(i in 1:1000){
    P=samples_3P[[i]] #sample(1:20,15,replace = TRUE)
    result=shapley3(P)
    result2=shapleyValue(P)
    expect_equal(as.vector(result),as.vector(result2$shapleyValue))
  }
})
test_that("Check 55.1 - test isEssentialGame against essentialgame4" ,{
  if(boolSkip){
    skip("Test was skipped")
  }
  for(i in 1:1000){
    P=samples_4P[[i]]
    result=shapley4(P)
    result2=shapleyValue(P)
    expect_equal(as.vector(result),as.vector(result2$shapleyValue))
  }
})