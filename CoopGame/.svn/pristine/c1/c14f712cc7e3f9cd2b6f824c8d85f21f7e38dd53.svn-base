#' @name banzhafValue
#' @title banzhafValue
#' @description banzhafIndex computes the Banzhaf Index given either a game vector (A) or a coalition function as input. \cr
#'              The Banzhaf value itself is an alternative to the Shapley value. \cr
#'              Conceptually, the Banzhaf value is very similar to the Shapley value. \cr 
#'              Its main difference from the Shapley value is the factor with which we multiply the marginal contributions. \cr
#'              Shapley factor: \eqn{((k-1)!*(n-k))}\cr
#'              Banzhaf factor: \eqn{(1/(2^(n-1))} 
#'
#' @aliases banzhafValue
#' @export banzhafValue
#' @template author/JA
#' @template author/JS
#' @template cites/PETERS_2015
#' @templateVar PETERS_2015_P pp. 367
#' @inheritParams CoopGameBaseParams 
#' @template param/test
#' @return The return value is a vector which contains the Banzhaf value for each player.
#' @examples
#' banzhafValue(cFuncQuotaVector(n=3,w=c(50,30,20),q=67))
#' #[1] 0.6 0.2 0.2
banzhafValue<-function(A){
  bv=BanzhafConcept(A)
  return(calculatePointSolution(bv))
}

#' @name banzhafIndex
#' @title banzhafIndex
#' @description banzhafIndex
#' @aliases banzhafIndex
#' @export banzhafIndex
#' @template author/JA
#' @template author/JS
#' @template cites/PETERS_2015
#' @templateVar PETERS_2015_P p. 367 ff.
#' @inheritParams CoopGameBaseParams
#' @return The return value is a vector which contains the Banzhaf index for each player.
#' @examples 
#' A<- cFuncApexVector(n = 4,apexPlayer=3)
#' banzhafIndex(A=A)
#' 
#' #N=c(1,2,3), w=(50,49,1), q=51   
#' A=cFuncQuotaVector(n=3, w=c(50,49,1),q=51)
#' banzhafIndex(A)
#' #[1] 0.6 0.2 0.2
#' 
#' A<-cFuncQuotaVector(n=3,w=c(50,30,20),q=c(67))
#' banzhafValue(A)
#' #[1] 0.6 0.2 0.2
banzhafIndex<-function(A){
  bi=BanzhafConcept(A)
  return(calculatePowerIndex(bi))
}





logicBanzhafIndex=function(A){

  retVal=NULL
  bV=c()
  
  numberOfPlayers=log2(length(A)+1)
  bm=createBitMatrix(n=numberOfPlayers,A)
  banzhafFactor=1/(2^(numberOfPlayers-1))
  
  for(i in 1:numberOfPlayers){
    #Get all coalitions K where player i takes part
    K=bm[bm[,i]==1,]
    
    #Get all coalition K \ {i}
    KwithoutI=K
    KwithoutI[,i]=0
    #set v({})=0
    KwithoutI[1,"cVal"]=0
    
    
    for(k in 2:nrow(K)){
      ix=indexCoalition(n=numberOfPlayers, S=getPlayersFromBMRow(KwithoutI[k,]))
      KwithoutI[k, "cVal"]=bm[ix,"cVal"]
    }
    sumMarginalContributions=sum(K[,"cVal"]-KwithoutI[,"cVal"])
    bV[i]=sumMarginalContributions*banzhafFactor
  }
  
  #check if sum of Banzhaf Indices is 0
  if(sum(bV)==0){
    retVal=bV
  }else{
    #Normalize Banzhaf Index to 1
    retVal=bV/sum(bV)
  }
  
  return (retVal)
}

#' @title BanzhafConcept
#' @description Class for implementation of banzhaf concept
#' @include PointSolutionConcept.R
#' @exportClass BanzhafConcept

setClass(
  "BanzhafConcept",
  contains = "PointSolutionConcept"
)

#' @title Constructor for BanzhafConcept
#' @noRd
#' @template author/JA
#' @name BanzhafConcept
#' #@export
BanzhafConcept<-function(A){
  retBanzhafConcept=methods::new("BanzhafConcept",A)
  return(retBanzhafConcept)
}

#' @rdname calculatePowerIndex-methods
#' @aliases calculatePowerIndex,BanzhafConcept-method
setMethod(
  "calculatePowerIndex",
  signature="BanzhafConcept",
  definition=function(.Object){
    A<-.Object@A
    return(logicBanzhafIndex(A))
  }
)

#' @name drawBanzhafValue
#' @title drawBanzhafValue for n players
#' @description drawBanzhafValue draws the Banzhaf Value for n players.
#' @aliases drawBanzhafValue
#' @export drawBanzhafValue
#' @template author/JA
#' @template author/JS
#' @template cites/PETERS_2015
#' @templateVar PETERS_2015_P p. 367 ff.
#' @inheritParams CoopGameBaseParams
#' @inheritParams visualize
#' @examples
#' A<-cFuncQuotaVector(n=3,w=c(50,30,20),q=c(67))
#' drawBanzhafValue(A)
drawBanzhafValue<-function(A,holdOn=FALSE, colour = NA , label=TRUE, name = "Banzhaf value"){
  A=GameVector(A)
  bv=banzhafValue(A);
  visualize(A, pointsToDraw=bv, holdOn=holdOn, colour = colour , label=label, name = name)
}

