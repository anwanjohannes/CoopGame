---
title: "The Class cFuncGlove as an example"
author: "Johannes Anwander"
date: "31 MÃ¤rz 2018"
output: pdf_document
---
### The Class cFuncGlove as an example
The class cFuncGlove gets defined as sibling of CoopGameCFunc and with two additional slots L and R where L carries the information about the players possessing one left and R one right glove.
```{r, eval = FALSE}
setClass(
  "cFuncGlove",
  representation(L="numeric",R="numeric"),
  contains = "CoopGameCFunc",
  validity = function(object){
    paramCheckResult=getEmptyParamCheckResult()
    stopOnInvalidLeftRightCFuncGlove(
      paramCheckResult,
      L=object@L,
      R=object@R,
      N=union(object@L,object@R)
    )
  }
)
```

The method inialize sets the slot for L and R then calls the initialization method of its parent class.  
```{r, eval = FALSE}
setMethod(
  f="initialize",
  signature = "cFuncGlove",
  definition=function(.Object,...,L=L,R=R){
    .Object@L<-L
    .Object@R<-R
    .Object<-methods::callNextMethod(.Object, ...)
    return(.Object)
  }
)
```
Moreover the class cFuncGlove needs to implement the method getCoalitionValue.
```{r, eval = FALSE}
setMethod(
  "getCoalitionValue",
  signature="cFuncGlove",
  definition=function(.Object,S,...){
    return(logicCFuncGloveValue(S,L=.Object@L,R=.Object@R))
  }
)
```
The function logicCFuncGloveValue, which is called in the method getCoalitionValue bears the logic for the glove game.
For a coalition S as well as a set of players having left and a set having right gloves it determines the number of matched pairs.
```{r, eval = FALSE}
logicCFuncGloveValue<-function(S, L, R){
  retVal <-0

  #initialize grand coalition N
  numberOfPlayers <-length(L)+length(R)
  N<-as.numeric(1:numberOfPlayers)
  
  compareVector<-c()
  #left side
  compareVector[1]<-length(intersect(S, L))
  #right side
  compareVector[2]<-length(intersect(S, R))
  #return min value of intersected sets' length
  retVal<-min(compareVector, na.rm = TRUE)

  return (retVal)
}
```
Furthermore wrapper functions are provided to the user for retrieving an instance of cFuncGlove by the homonymous function, the vector by cFuncGloveVector and its value by cFuncGloveValue.
