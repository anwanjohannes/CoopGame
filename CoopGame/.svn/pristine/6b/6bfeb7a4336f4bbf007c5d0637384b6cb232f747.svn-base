#' @name getRealGainingCoalitions
#' @title getRealGainingCoalitions
#' @description Checks if a TU game for n players is monotonic. \cr
#' For a monotonic game a coalition \code{S} can never obtain 
#' a larger value than another coalition  \code{T} if \code{S}
#' is contained in \code{T}
#' @export getRealGainingCoalitions
#' @template author/JA
#' @template author/JS
#' @template cites/PELEG_ET_SUDHOELTER_2007
#' @templateVar PELEG_ET_SUDHOELTER_2007_P p. 12
#' @return If the game is monotonic returns TRUE else FALSE
#' @examples
#' #Example for checking non monotonic game
#' A=c(4,2,5,2,3,6,10)
#' isMonotonicGame(A)
#' #Output: [1] FALSE
#' 
#' #Example for checking monotonic game
#' A=c(2,5,7,10, 9, 13,20)
#' isMonotonicGame(A)
#' #Output: [1] TRUE

getRealGainingCoalitions<-function(A){
   boolRetVal=TRUE
   n=getNumberOfPlayers(A)
   N=length(A)
   bm=as.data.frame(createBitMatrix(n,A))
   players=1:n
   idcs=sapply(1:n, function(pl){
     if(bm[pl,"cVal"]>0){
       return(pl) 
     }
   })
   for(i in (n+1):N){
     involvedPlayers=getPlayersFromBMRow(bm[i,])
     uninvolvedPlayers=players[-involvedPlayers]
     corrCVals=getCorrespondingCVals(bm[1:(i-1),],uninvolvedPlayers)
     allSmaller=all(corrCVals<bm[i,"cVal"])
     if(allSmaller){
       idcs=c(idcs,i)
     }
   }
   bm=bm[idcs,]
   return(bm)
}


